
H-bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003058  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800321c  0800321c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800321c  0800321c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800321c  0800321c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000010  08003234  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08003234  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f937  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001edb  00000000  00000000  0002f977  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000097ac  00000000  00000000  00031852  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c30  00000000  00000000  0003b000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000bf8  00000000  00000000  0003bc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001da26  00000000  00000000  0003c828  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000b308  00000000  00000000  0005a24e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000b42c6  00000000  00000000  00065556  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011981c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002044  00000000  00000000  00119898  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080031d4 	.word	0x080031d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080031d4 	.word	0x080031d4

080001d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001d4:	b510      	push	{r4, lr}
 80001d6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d8:	2400      	movs	r4, #0
 80001da:	9403      	str	r4, [sp, #12]
 80001dc:	9404      	str	r4, [sp, #16]
 80001de:	9405      	str	r4, [sp, #20]
 80001e0:	9406      	str	r4, [sp, #24]
 80001e2:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e4:	4b1b      	ldr	r3, [pc, #108]	; (8000254 <MX_GPIO_Init+0x80>)
 80001e6:	695a      	ldr	r2, [r3, #20]
 80001e8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80001ec:	615a      	str	r2, [r3, #20]
 80001ee:	695a      	ldr	r2, [r3, #20]
 80001f0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80001f4:	9200      	str	r2, [sp, #0]
 80001f6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001f8:	695a      	ldr	r2, [r3, #20]
 80001fa:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80001fe:	615a      	str	r2, [r3, #20]
 8000200:	695a      	ldr	r2, [r3, #20]
 8000202:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000206:	9201      	str	r2, [sp, #4]
 8000208:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020a:	695a      	ldr	r2, [r3, #20]
 800020c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000210:	615a      	str	r2, [r3, #20]
 8000212:	695b      	ldr	r3, [r3, #20]
 8000214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000218:	9302      	str	r3, [sp, #8]
 800021a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800021c:	4622      	mov	r2, r4
 800021e:	2120      	movs	r1, #32
 8000220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000224:	f001 fd5e 	bl	8001ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800022c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800022e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000230:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000232:	a903      	add	r1, sp, #12
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <MX_GPIO_Init+0x84>)
 8000236:	f001 fc7f 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800023a:	2320      	movs	r3, #32
 800023c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023e:	2301      	movs	r3, #1
 8000240:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000244:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000246:	a903      	add	r1, sp, #12
 8000248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024c:	f001 fc74 	bl	8001b38 <HAL_GPIO_Init>

}
 8000250:	b008      	add	sp, #32
 8000252:	bd10      	pop	{r4, pc}
 8000254:	40021000 	.word	0x40021000
 8000258:	48000800 	.word	0x48000800

0800025c <MX_ADC1_Init>:
{
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8000260:	2400      	movs	r4, #0
 8000262:	9407      	str	r4, [sp, #28]
 8000264:	9408      	str	r4, [sp, #32]
 8000266:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000268:	9401      	str	r4, [sp, #4]
 800026a:	9402      	str	r4, [sp, #8]
 800026c:	9403      	str	r4, [sp, #12]
 800026e:	9404      	str	r4, [sp, #16]
 8000270:	9405      	str	r4, [sp, #20]
 8000272:	9406      	str	r4, [sp, #24]
  hadc1.Instance = ADC1;
 8000274:	4d18      	ldr	r5, [pc, #96]	; (80002d8 <MX_ADC1_Init+0x7c>)
 8000276:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800027a:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800027c:	606c      	str	r4, [r5, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800027e:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000280:	2601      	movs	r6, #1
 8000282:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000284:	766c      	strb	r4, [r5, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000286:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800028a:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800028c:	62ae      	str	r6, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800028e:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000290:	2702      	movs	r7, #2
 8000292:	61ef      	str	r7, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000294:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000298:	2308      	movs	r3, #8
 800029a:	616b      	str	r3, [r5, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800029c:	762c      	strb	r4, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800029e:	636c      	str	r4, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a0:	4628      	mov	r0, r5
 80002a2:	f000 fc35 	bl	8000b10 <HAL_ADC_Init>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002a6:	9407      	str	r4, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002a8:	a907      	add	r1, sp, #28
 80002aa:	4628      	mov	r0, r5
 80002ac:	f001 fa36 	bl	800171c <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 80002b0:	9601      	str	r6, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b2:	9602      	str	r6, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002b4:	9404      	str	r4, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80002b6:	2304      	movs	r3, #4
 80002b8:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002ba:	9405      	str	r4, [sp, #20]
  sConfig.Offset = 0;
 80002bc:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002be:	eb0d 0103 	add.w	r1, sp, r3
 80002c2:	4628      	mov	r0, r5
 80002c4:	f001 f854 	bl	8001370 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 80002c8:	9701      	str	r7, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002ca:	9702      	str	r7, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002cc:	a901      	add	r1, sp, #4
 80002ce:	4628      	mov	r0, r5
 80002d0:	f001 f84e 	bl	8001370 <HAL_ADC_ConfigChannel>
}
 80002d4:	b00b      	add	sp, #44	; 0x2c
 80002d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002d8:	20000128 	.word	0x20000128

080002dc <MX_TIM1_Init>:
{
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	b097      	sub	sp, #92	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e0:	2400      	movs	r4, #0
 80002e2:	9413      	str	r4, [sp, #76]	; 0x4c
 80002e4:	9414      	str	r4, [sp, #80]	; 0x50
 80002e6:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002e8:	940c      	str	r4, [sp, #48]	; 0x30
 80002ea:	940d      	str	r4, [sp, #52]	; 0x34
 80002ec:	940e      	str	r4, [sp, #56]	; 0x38
 80002ee:	940f      	str	r4, [sp, #60]	; 0x3c
 80002f0:	9410      	str	r4, [sp, #64]	; 0x40
 80002f2:	9411      	str	r4, [sp, #68]	; 0x44
 80002f4:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002f6:	222c      	movs	r2, #44	; 0x2c
 80002f8:	4621      	mov	r1, r4
 80002fa:	a801      	add	r0, sp, #4
 80002fc:	f002 ff62 	bl	80031c4 <memset>
  htim1.Instance = TIM1;
 8000300:	4d1d      	ldr	r5, [pc, #116]	; (8000378 <MX_TIM1_Init+0x9c>)
 8000302:	4b1e      	ldr	r3, [pc, #120]	; (800037c <MX_TIM1_Init+0xa0>)
 8000304:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8000306:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000308:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 14400 - 1;
 800030a:	f643 033f 	movw	r3, #14399	; 0x383f
 800030e:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000310:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8000312:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000314:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000316:	4628      	mov	r0, r5
 8000318:	f002 fc9f 	bl	8002c5a <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800031c:	2320      	movs	r3, #32
 800031e:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000320:	9414      	str	r4, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000322:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000324:	a913      	add	r1, sp, #76	; 0x4c
 8000326:	4628      	mov	r0, r5
 8000328:	f002 fe8c 	bl	8003044 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800032c:	2360      	movs	r3, #96	; 0x60
 800032e:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000330:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000332:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000334:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000336:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000338:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800033a:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800033c:	4622      	mov	r2, r4
 800033e:	a90c      	add	r1, sp, #48	; 0x30
 8000340:	4628      	mov	r0, r5
 8000342:	f002 fcf1 	bl	8002d28 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000346:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000348:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800034a:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800034c:	2364      	movs	r3, #100	; 0x64
 800034e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000350:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000356:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000358:	9407      	str	r4, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800035a:	9408      	str	r4, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800035c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000360:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000362:	940a      	str	r4, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000364:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000366:	a901      	add	r1, sp, #4
 8000368:	4628      	mov	r0, r5
 800036a:	f002 febb 	bl	80030e4 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 800036e:	4628      	mov	r0, r5
 8000370:	f000 fa3c 	bl	80007ec <HAL_TIM_MspPostInit>
}
 8000374:	b017      	add	sp, #92	; 0x5c
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	200001d0 	.word	0x200001d0
 800037c:	40012c00 	.word	0x40012c00

08000380 <MX_TIM4_Init>:
{
 8000380:	b530      	push	{r4, r5, lr}
 8000382:	b089      	sub	sp, #36	; 0x24
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000384:	2400      	movs	r4, #0
 8000386:	9403      	str	r4, [sp, #12]
 8000388:	9404      	str	r4, [sp, #16]
 800038a:	9405      	str	r4, [sp, #20]
 800038c:	9406      	str	r4, [sp, #24]
 800038e:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000390:	9400      	str	r4, [sp, #0]
 8000392:	9401      	str	r4, [sp, #4]
 8000394:	9402      	str	r4, [sp, #8]
  htim4.Instance = TIM4;
 8000396:	4d0f      	ldr	r5, [pc, #60]	; (80003d4 <MX_TIM4_Init+0x54>)
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_TIM4_Init+0x58>)
 800039a:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 0;
 800039c:	606c      	str	r4, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039e:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 900 - 1;
 80003a0:	f240 3383 	movw	r3, #899	; 0x383
 80003a4:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a6:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a8:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003aa:	4628      	mov	r0, r5
 80003ac:	f002 fc3c 	bl	8002c28 <HAL_TIM_Base_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80003b0:	2306      	movs	r3, #6
 80003b2:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80003b4:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80003b6:	a903      	add	r1, sp, #12
 80003b8:	4628      	mov	r0, r5
 80003ba:	f002 fda2 	bl	8002f02 <HAL_TIM_SlaveConfigSynchro>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003be:	2320      	movs	r3, #32
 80003c0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80003c2:	2380      	movs	r3, #128	; 0x80
 80003c4:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80003c6:	4669      	mov	r1, sp
 80003c8:	4628      	mov	r0, r5
 80003ca:	f002 fe3b 	bl	8003044 <HAL_TIMEx_MasterConfigSynchronization>
}
 80003ce:	b009      	add	sp, #36	; 0x24
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop
 80003d4:	20000038 	.word	0x20000038
 80003d8:	40000800 	.word	0x40000800

080003dc <MX_DMA_Init>:
{
 80003dc:	b500      	push	{lr}
 80003de:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <MX_DMA_Init+0x30>)
 80003e2:	695a      	ldr	r2, [r3, #20]
 80003e4:	f042 0201 	orr.w	r2, r2, #1
 80003e8:	615a      	str	r2, [r3, #20]
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	9301      	str	r3, [sp, #4]
 80003f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	4611      	mov	r1, r2
 80003f8:	200b      	movs	r0, #11
 80003fa:	f001 fa4d 	bl	8001898 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003fe:	200b      	movs	r0, #11
 8000400:	f001 fa7e 	bl	8001900 <HAL_NVIC_EnableIRQ>
}
 8000404:	b003      	add	sp, #12
 8000406:	f85d fb04 	ldr.w	pc, [sp], #4
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000

08000410 <SystemClock_Config>:
{
 8000410:	b530      	push	{r4, r5, lr}
 8000412:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000414:	2224      	movs	r2, #36	; 0x24
 8000416:	2100      	movs	r1, #0
 8000418:	a81d      	add	r0, sp, #116	; 0x74
 800041a:	f002 fed3 	bl	80031c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041e:	2400      	movs	r4, #0
 8000420:	9417      	str	r4, [sp, #92]	; 0x5c
 8000422:	9418      	str	r4, [sp, #96]	; 0x60
 8000424:	9419      	str	r4, [sp, #100]	; 0x64
 8000426:	941a      	str	r4, [sp, #104]	; 0x68
 8000428:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800042a:	2258      	movs	r2, #88	; 0x58
 800042c:	4621      	mov	r1, r4
 800042e:	a801      	add	r0, sp, #4
 8000430:	f002 fec8 	bl	80031c4 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000434:	2502      	movs	r5, #2
 8000436:	951c      	str	r5, [sp, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000438:	2301      	movs	r3, #1
 800043a:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043c:	2310      	movs	r3, #16
 800043e:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000440:	9522      	str	r5, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000446:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000448:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800044c:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	a81c      	add	r0, sp, #112	; 0x70
 8000450:	f001 fc4e 	bl	8001cf0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000454:	230f      	movs	r3, #15
 8000456:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000458:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045a:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000460:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000462:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000464:	4629      	mov	r1, r5
 8000466:	a817      	add	r0, sp, #92	; 0x5c
 8000468:	f001 ffa8 	bl	80023bc <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <SystemClock_Config+0x7c>)
 800046e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV4;
 8000470:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000474:	930b      	str	r3, [sp, #44]	; 0x2c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8000476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800047a:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 800047c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000480:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000482:	a801      	add	r0, sp, #4
 8000484:	f002 f86c 	bl	8002560 <HAL_RCCEx_PeriphCLKConfig>
}
 8000488:	b027      	add	sp, #156	; 0x9c
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	00201080 	.word	0x00201080

08000490 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
	rev *= -1;
}

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc){
 8000490:	b410      	push	{r4}
	values[cycle] = adc_values[0];
 8000492:	4912      	ldr	r1, [pc, #72]	; (80004dc <HAL_ADC_ConvCpltCallback+0x4c>)
 8000494:	780b      	ldrb	r3, [r1, #0]
 8000496:	4a12      	ldr	r2, [pc, #72]	; (80004e0 <HAL_ADC_ConvCpltCallback+0x50>)
 8000498:	8814      	ldrh	r4, [r2, #0]
 800049a:	4812      	ldr	r0, [pc, #72]	; (80004e4 <HAL_ADC_ConvCpltCallback+0x54>)
 800049c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	cycle++;
 80004a0:	3301      	adds	r3, #1
 80004a2:	700b      	strb	r3, [r1, #0]
	if(adc_values[1] > 65) ref = ((float)(adc_values[1] >> 1) * rev);
 80004a4:	8853      	ldrh	r3, [r2, #2]
 80004a6:	2b41      	cmp	r3, #65	; 0x41
 80004a8:	d805      	bhi.n	80004b6 <HAL_ADC_ConvCpltCallback+0x26>
	else ref = 0.0;
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <HAL_ADC_ConvCpltCallback+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
}
 80004b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80004b4:	4770      	bx	lr
	if(adc_values[1] > 65) ref = ((float)(adc_values[1] >> 1) * rev);
 80004b6:	085b      	lsrs	r3, r3, #1
 80004b8:	ee07 3a90 	vmov	s15, r3
 80004bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <HAL_ADC_ConvCpltCallback+0x5c>)
 80004c2:	f993 3000 	ldrsb.w	r3, [r3]
 80004c6:	ee07 3a10 	vmov	s14, r3
 80004ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80004ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <HAL_ADC_ConvCpltCallback+0x58>)
 80004d4:	edc3 7a00 	vstr	s15, [r3]
 80004d8:	e7ea      	b.n	80004b0 <HAL_ADC_ConvCpltCallback+0x20>
 80004da:	bf00      	nop
 80004dc:	2000002c 	.word	0x2000002c
 80004e0:	20000214 	.word	0x20000214
 80004e4:	20000078 	.word	0x20000078
 80004e8:	20000030 	.word	0x20000030
 80004ec:	20000000 	.word	0x20000000

080004f0 <PID_Init>:
  * @param 	input_offset - offset wejścia
  *
  * @retval None
  */
void PID_Init (struct PID_Data *pid, float P, float I, float D, float Kb, float Ts, float rate, float deadzone, float min, float max, float output_offset, float input_offset){
	pid -> Kp = P;
 80004f0:	ed80 0a01 	vstr	s0, [r0, #4]
	pid -> Ti = I;
 80004f4:	edc0 0a02 	vstr	s1, [r0, #8]
	pid -> Td = D;
 80004f8:	ed80 1a03 	vstr	s2, [r0, #12]
	pid -> Ts = Ts;
 80004fc:	ed80 2a04 	vstr	s4, [r0, #16]
	pid -> output_min = min;
 8000500:	edc0 3a14 	vstr	s7, [r0, #80]	; 0x50
	pid -> output_max = max;
 8000504:	ed80 4a15 	vstr	s8, [r0, #84]	; 0x54
	pid -> Kb = Kb;
 8000508:	edc0 1a05 	vstr	s3, [r0, #20]
	pid -> output_offset = output_offset;
 800050c:	edc0 4a18 	vstr	s9, [r0, #96]	; 0x60
	pid -> input_offset = input_offset;
 8000510:	ed80 5a13 	vstr	s10, [r0, #76]	; 0x4c
	pid -> output_rate = rate;
 8000514:	edc0 2a06 	vstr	s5, [r0, #24]
	pid -> error_deadzone = deadzone;
 8000518:	ed80 3a16 	vstr	s6, [r0, #88]	; 0x58
}
 800051c:	4770      	bx	lr

0800051e <PID_TurnOn>:
	pid->last_output = pid->output;

}

void PID_TurnOn (struct PID_Data *pid){
	pid->run = 1;
 800051e:	2301      	movs	r3, #1
 8000520:	7003      	strb	r3, [r0, #0]
}
 8000522:	4770      	bx	lr

08000524 <main>:
{
 8000524:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 8000526:	f000 fa19 	bl	800095c <HAL_Init>
  SystemClock_Config();
 800052a:	f7ff ff71 	bl	8000410 <SystemClock_Config>
  MX_GPIO_Init();
 800052e:	f7ff fe51 	bl	80001d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000532:	f7ff fe93 	bl	800025c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000536:	f7ff fed1 	bl	80002dc <MX_TIM1_Init>
  MX_TIM4_Init();
 800053a:	f7ff ff21 	bl	8000380 <MX_TIM4_Init>
  MX_DMA_Init();
 800053e:	f7ff ff4d 	bl	80003dc <MX_DMA_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	2120      	movs	r1, #32
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f001 fbcb 	bl	8001ce4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Init(&htim1);
 800054e:	4c49      	ldr	r4, [pc, #292]	; (8000674 <main+0x150>)
 8000550:	4620      	mov	r0, r4
 8000552:	f002 fb82 	bl	8002c5a <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	4620      	mov	r0, r4
 800055a:	f002 fd0f 	bl	8002f7c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800055e:	2100      	movs	r1, #0
 8000560:	4620      	mov	r0, r4
 8000562:	f002 fd53 	bl	800300c <HAL_TIMEx_PWMN_Start>
  TIM1 -> CCR1 = 7200;
 8000566:	4b44      	ldr	r3, [pc, #272]	; (8000678 <main+0x154>)
 8000568:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_ADC_Start_DMA(&hadc1, &adc_values[0], 2);
 800056e:	2202      	movs	r2, #2
 8000570:	4942      	ldr	r1, [pc, #264]	; (800067c <main+0x158>)
 8000572:	4843      	ldr	r0, [pc, #268]	; (8000680 <main+0x15c>)
 8000574:	f000 fc2a 	bl	8000dcc <HAL_ADC_Start_DMA>
  while(cycle < 8);
 8000578:	4b42      	ldr	r3, [pc, #264]	; (8000684 <main+0x160>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b07      	cmp	r3, #7
 800057e:	d9fb      	bls.n	8000578 <main+0x54>
  cycle = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	4a40      	ldr	r2, [pc, #256]	; (8000684 <main+0x160>)
 8000584:	7013      	strb	r3, [r2, #0]
  movingAverageSum = 0;
 8000586:	4a40      	ldr	r2, [pc, #256]	; (8000688 <main+0x164>)
 8000588:	6013      	str	r3, [r2, #0]
  for(uint8_t i = 0; i < 8; i++){
 800058a:	e008      	b.n	800059e <main+0x7a>
  	movingAverageSum += values[i];
 800058c:	4a3f      	ldr	r2, [pc, #252]	; (800068c <main+0x168>)
 800058e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000592:	493d      	ldr	r1, [pc, #244]	; (8000688 <main+0x164>)
 8000594:	680a      	ldr	r2, [r1, #0]
 8000596:	4402      	add	r2, r0
 8000598:	600a      	str	r2, [r1, #0]
  for(uint8_t i = 0; i < 8; i++){
 800059a:	3301      	adds	r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b07      	cmp	r3, #7
 80005a0:	d9f4      	bls.n	800058c <main+0x68>
  movingAverage = movingAverageSum >> 3;
 80005a2:	4b39      	ldr	r3, [pc, #228]	; (8000688 <main+0x164>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	08db      	lsrs	r3, r3, #3
 80005a8:	4a39      	ldr	r2, [pc, #228]	; (8000690 <main+0x16c>)
 80005aa:	6013      	str	r3, [r2, #0]
  zero_current = movingAverage;
 80005ac:	4d39      	ldr	r5, [pc, #228]	; (8000694 <main+0x170>)
 80005ae:	602b      	str	r3, [r5, #0]
  PID_Init(&regulator, 2.0, 8.0, 0.0, 8.0, 0.001, 0.0, 5.0, 720.0, 13680.0, 7200.0, (float)zero_current);
 80005b0:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8000698 <main+0x174>
 80005b4:	4c39      	ldr	r4, [pc, #228]	; (800069c <main+0x178>)
 80005b6:	ee07 3a90 	vmov	s15, r3
 80005ba:	eeb8 5a67 	vcvt.f32.u32	s10, s15
 80005be:	eddf 4a38 	vldr	s9, [pc, #224]	; 80006a0 <main+0x17c>
 80005c2:	ed9f 4a38 	vldr	s8, [pc, #224]	; 80006a4 <main+0x180>
 80005c6:	eddf 3a38 	vldr	s7, [pc, #224]	; 80006a8 <main+0x184>
 80005ca:	eeb1 3a04 	vmov.f32	s6, #20	; 0x40a00000  5.0
 80005ce:	eef0 2a41 	vmov.f32	s5, s2
 80005d2:	ed9f 2a36 	vldr	s4, [pc, #216]	; 80006ac <main+0x188>
 80005d6:	eef2 1a00 	vmov.f32	s3, #32	; 0x41000000  8.0
 80005da:	eef0 0a61 	vmov.f32	s1, s3
 80005de:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80005e2:	4620      	mov	r0, r4
 80005e4:	f7ff ff84 	bl	80004f0 <PID_Init>
  regulator.input_raw = (float)zero_current;
 80005e8:	edd5 7a00 	vldr	s15, [r5]
 80005ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005f0:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
  PID_TurnOn(&regulator);
 80005f4:	4620      	mov	r0, r4
 80005f6:	f7ff ff92 	bl	800051e <PID_TurnOn>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2120      	movs	r1, #32
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f001 fb6f 	bl	8001ce4 <HAL_GPIO_WritePin>
 8000606:	e018      	b.n	800063a <main+0x116>
			  movingAverageSum += values[i];
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <main+0x168>)
 800060a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800060e:	491e      	ldr	r1, [pc, #120]	; (8000688 <main+0x164>)
 8000610:	680a      	ldr	r2, [r1, #0]
 8000612:	4402      	add	r2, r0
 8000614:	600a      	str	r2, [r1, #0]
		  for(uint8_t i = 0; i < 8; i++){
 8000616:	3301      	adds	r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b07      	cmp	r3, #7
 800061c:	d9f4      	bls.n	8000608 <main+0xe4>
		  avg_values[samples] = movingAverageSum >> 3;
 800061e:	4924      	ldr	r1, [pc, #144]	; (80006b0 <main+0x18c>)
 8000620:	780b      	ldrb	r3, [r1, #0]
 8000622:	4a19      	ldr	r2, [pc, #100]	; (8000688 <main+0x164>)
 8000624:	6812      	ldr	r2, [r2, #0]
 8000626:	08d2      	lsrs	r2, r2, #3
 8000628:	4822      	ldr	r0, [pc, #136]	; (80006b4 <main+0x190>)
 800062a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		  samples++;
 800062e:	3301      	adds	r3, #1
 8000630:	700b      	strb	r3, [r1, #0]
	  if(samples == 10){
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <main+0x18c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b0a      	cmp	r3, #10
 8000638:	d009      	beq.n	800064e <main+0x12a>
	  if(cycle == 8){
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <main+0x160>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b08      	cmp	r3, #8
 8000640:	d1f7      	bne.n	8000632 <main+0x10e>
		  cycle = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <main+0x160>)
 8000646:	7013      	strb	r3, [r2, #0]
		  movingAverageSum = 0;
 8000648:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <main+0x164>)
 800064a:	6013      	str	r3, [r2, #0]
		  for(uint8_t i = 0; i < 8; i++){
 800064c:	e7e5      	b.n	800061a <main+0xf6>
		  samples = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <main+0x18c>)
 8000652:	7013      	strb	r3, [r2, #0]
		  movingAverageSum = 0;
 8000654:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <main+0x164>)
 8000656:	6013      	str	r3, [r2, #0]
		  for(uint8_t i = 0; i < 10; i++){
 8000658:	e008      	b.n	800066c <main+0x148>
		  	movingAverageSum += avg_values[i];
 800065a:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <main+0x190>)
 800065c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000660:	4909      	ldr	r1, [pc, #36]	; (8000688 <main+0x164>)
 8000662:	680a      	ldr	r2, [r1, #0]
 8000664:	4402      	add	r2, r0
 8000666:	600a      	str	r2, [r1, #0]
		  for(uint8_t i = 0; i < 10; i++){
 8000668:	3301      	adds	r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b09      	cmp	r3, #9
 800066e:	d9f4      	bls.n	800065a <main+0x136>
 8000670:	e7e3      	b.n	800063a <main+0x116>
 8000672:	bf00      	nop
 8000674:	200001d0 	.word	0x200001d0
 8000678:	40012c00 	.word	0x40012c00
 800067c:	20000214 	.word	0x20000214
 8000680:	20000128 	.word	0x20000128
 8000684:	2000002c 	.word	0x2000002c
 8000688:	20000178 	.word	0x20000178
 800068c:	20000078 	.word	0x20000078
 8000690:	20000098 	.word	0x20000098
 8000694:	20000210 	.word	0x20000210
 8000698:	00000000 	.word	0x00000000
 800069c:	200000c4 	.word	0x200000c4
 80006a0:	45e10000 	.word	0x45e10000
 80006a4:	4655c000 	.word	0x4655c000
 80006a8:	44340000 	.word	0x44340000
 80006ac:	3a83126f 	.word	0x3a83126f
 80006b0:	20000034 	.word	0x20000034
 80006b4:	2000009c 	.word	0x2000009c

080006b8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006b8:	4770      	bx	lr
	...

080006bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_MspInit+0x2c>)
 80006c0:	699a      	ldr	r2, [r3, #24]
 80006c2:	f042 0201 	orr.w	r2, r2, #1
 80006c6:	619a      	str	r2, [r3, #24]
 80006c8:	699a      	ldr	r2, [r3, #24]
 80006ca:	f002 0201 	and.w	r2, r2, #1
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	69da      	ldr	r2, [r3, #28]
 80006d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006d8:	61da      	str	r2, [r3, #28]
 80006da:	69db      	ldr	r3, [r3, #28]
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e4:	b002      	add	sp, #8
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006ec:	b510      	push	{r4, lr}
 80006ee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	2300      	movs	r3, #0
 80006f2:	9303      	str	r3, [sp, #12]
 80006f4:	9304      	str	r3, [sp, #16]
 80006f6:	9305      	str	r3, [sp, #20]
 80006f8:	9306      	str	r3, [sp, #24]
 80006fa:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80006fc:	6803      	ldr	r3, [r0, #0]
 80006fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000702:	d001      	beq.n	8000708 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000704:	b008      	add	sp, #32
 8000706:	bd10      	pop	{r4, pc}
 8000708:	4604      	mov	r4, r0
    __HAL_RCC_ADC12_CLK_ENABLE();
 800070a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800070e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000712:	695a      	ldr	r2, [r3, #20]
 8000714:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000718:	615a      	str	r2, [r3, #20]
 800071a:	695a      	ldr	r2, [r3, #20]
 800071c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000720:	9201      	str	r2, [sp, #4]
 8000722:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	695a      	ldr	r2, [r3, #20]
 8000726:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000736:	2303      	movs	r3, #3
 8000738:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	a903      	add	r1, sp, #12
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f001 f9f9 	bl	8001b38 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <HAL_ADC_MspInit+0xa0>)
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_ADC_MspInit+0xa4>)
 800074a:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800074c:	2300      	movs	r3, #0
 800074e:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000750:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075a:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000760:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000762:	2220      	movs	r2, #32
 8000764:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000766:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000768:	f001 f92a 	bl	80019c0 <HAL_DMA_Init>
 800076c:	b958      	cbnz	r0, 8000786 <HAL_ADC_MspInit+0x9a>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <HAL_ADC_MspInit+0xa0>)
 8000770:	63a3      	str	r3, [r4, #56]	; 0x38
 8000772:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2101      	movs	r1, #1
 8000778:	2012      	movs	r0, #18
 800077a:	f001 f88d 	bl	8001898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800077e:	2012      	movs	r0, #18
 8000780:	f001 f8be 	bl	8001900 <HAL_NVIC_EnableIRQ>
}
 8000784:	e7be      	b.n	8000704 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000786:	f7ff ff97 	bl	80006b8 <Error_Handler>
 800078a:	e7f0      	b.n	800076e <HAL_ADC_MspInit+0x82>
 800078c:	2000017c 	.word	0x2000017c
 8000790:	40020008 	.word	0x40020008

08000794 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8000794:	6802      	ldr	r2, [r0, #0]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_TIM_PWM_MspInit+0x28>)
 8000798:	429a      	cmp	r2, r3
 800079a:	d000      	beq.n	800079e <HAL_TIM_PWM_MspInit+0xa>
 800079c:	4770      	bx	lr
{
 800079e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007a0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80007a4:	699a      	ldr	r2, [r3, #24]
 80007a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007aa:	619a      	str	r2, [r3, #24]
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007b6:	b002      	add	sp, #8
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40012c00 	.word	0x40012c00

080007c0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 80007c0:	6802      	ldr	r2, [r0, #0]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_TIM_Base_MspInit+0x28>)
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d000      	beq.n	80007ca <HAL_TIM_Base_MspInit+0xa>
 80007c8:	4770      	bx	lr
{
 80007ca:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007cc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80007d0:	69da      	ldr	r2, [r3, #28]
 80007d2:	f042 0204 	orr.w	r2, r2, #4
 80007d6:	61da      	str	r2, [r3, #28]
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80007e2:	b002      	add	sp, #8
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40000800 	.word	0x40000800

080007ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007ec:	b510      	push	{r4, lr}
 80007ee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	2300      	movs	r3, #0
 80007f2:	9303      	str	r3, [sp, #12]
 80007f4:	9304      	str	r3, [sp, #16]
 80007f6:	9305      	str	r3, [sp, #20]
 80007f8:	9306      	str	r3, [sp, #24]
 80007fa:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 80007fc:	6802      	ldr	r2, [r0, #0]
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_TIM_MspPostInit+0x74>)
 8000800:	429a      	cmp	r2, r3
 8000802:	d001      	beq.n	8000808 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000804:	b008      	add	sp, #32
 8000806:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000808:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800081a:	9201      	str	r2, [sp, #4]
 800081c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000830:	2301      	movs	r3, #1
 8000832:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2402      	movs	r4, #2
 8000836:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000838:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	a903      	add	r1, sp, #12
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <HAL_TIM_MspPostInit+0x78>)
 800083e:	f001 f97b 	bl	8001b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800084e:	2306      	movs	r3, #6
 8000850:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	a903      	add	r1, sp, #12
 8000854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000858:	f001 f96e 	bl	8001b38 <HAL_GPIO_Init>
}
 800085c:	e7d2      	b.n	8000804 <HAL_TIM_MspPostInit+0x18>
 800085e:	bf00      	nop
 8000860:	40012c00 	.word	0x40012c00
 8000864:	48000800 	.word	0x48000800

08000868 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000868:	4770      	bx	lr

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	e7fe      	b.n	800086a <HardFault_Handler>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	e7fe      	b.n	800086c <MemManage_Handler>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	e7fe      	b.n	800086e <BusFault_Handler>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler>

08000872 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	4770      	bx	lr

08000874 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	4770      	bx	lr

08000876 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087a:	f000 f881 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bd08      	pop	{r3, pc}

08000880 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000880:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000882:	4802      	ldr	r0, [pc, #8]	; (800088c <DMA1_Channel1_IRQHandler+0xc>)
 8000884:	f001 f8fe 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000888:	bd08      	pop	{r3, pc}
 800088a:	bf00      	nop
 800088c:	2000017c 	.word	0x2000017c

08000890 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000890:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000892:	4802      	ldr	r0, [pc, #8]	; (800089c <ADC1_2_IRQHandler+0xc>)
 8000894:	f000 fb60 	bl	8000f58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000898:	bd08      	pop	{r3, pc}
 800089a:	bf00      	nop
 800089c:	20000128 	.word	0x20000128

080008a0 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <SystemInit+0x18>)
 80008a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80008a6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80008aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008b2:	609a      	str	r2, [r3, #8]
#endif
}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008c2:	e003      	b.n	80008cc <LoopCopyDataInit>

080008c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008ca:	3104      	adds	r1, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008d4:	d3f6      	bcc.n	80008c4 <CopyDataInit>
	ldr	r2, =_sbss
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008d8:	e002      	b.n	80008e0 <LoopFillZerobss>

080008da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008dc:	f842 3b04 	str.w	r3, [r2], #4

080008e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <LoopForever+0x16>)
	cmp	r2, r3
 80008e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008e4:	d3f9      	bcc.n	80008da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008e6:	f7ff ffdb 	bl	80008a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ea:	f002 fc47 	bl	800317c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ee:	f7ff fe19 	bl	8000524 <main>

080008f2 <LoopForever>:

LoopForever:
    b LoopForever
 80008f2:	e7fe      	b.n	80008f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008f4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80008f8:	08003224 	.word	0x08003224
	ldr	r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000900:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000904:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000908:	2000021c 	.word	0x2000021c

0800090c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC3_IRQHandler>
	...

08000910 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b510      	push	{r4, lr}
 8000912:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_InitTick+0x40>)
 8000916:	7818      	ldrb	r0, [r3, #0]
 8000918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <HAL_InitTick+0x44>)
 8000922:	6810      	ldr	r0, [r2, #0]
 8000924:	fbb0 f0f3 	udiv	r0, r0, r3
 8000928:	f000 fff8 	bl	800191c <HAL_SYSTICK_Config>
 800092c:	b968      	cbnz	r0, 800094a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	2c0f      	cmp	r4, #15
 8000930:	d901      	bls.n	8000936 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000932:	2001      	movs	r0, #1
 8000934:	e00a      	b.n	800094c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000936:	2200      	movs	r2, #0
 8000938:	4621      	mov	r1, r4
 800093a:	f04f 30ff 	mov.w	r0, #4294967295
 800093e:	f000 ffab 	bl	8001898 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_InitTick+0x48>)
 8000944:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8000946:	2000      	movs	r0, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800094a:	2001      	movs	r0, #1
}
 800094c:	bd10      	pop	{r4, pc}
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	20000004 	.word	0x20000004
 8000958:	2000000c 	.word	0x2000000c

0800095c <HAL_Init>:
{
 800095c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800095e:	4a07      	ldr	r2, [pc, #28]	; (800097c <HAL_Init+0x20>)
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 ff83 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff ffce 	bl	8000910 <HAL_InitTick>
  HAL_MspInit();
 8000974:	f7ff fea2 	bl	80006bc <HAL_MspInit>
}
 8000978:	2000      	movs	r0, #0
 800097a:	bd08      	pop	{r3, pc}
 800097c:	40022000 	.word	0x40022000

08000980 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000980:	4a03      	ldr	r2, [pc, #12]	; (8000990 <HAL_IncTick+0x10>)
 8000982:	6811      	ldr	r1, [r2, #0]
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_IncTick+0x14>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	440b      	add	r3, r1
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000218 	.word	0x20000218
 8000994:	20000008 	.word	0x20000008

08000998 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000998:	4b01      	ldr	r3, [pc, #4]	; (80009a0 <HAL_GetTick+0x8>)
 800099a:	6818      	ldr	r0, [r3, #0]
}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000218 	.word	0x20000218

080009a4 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80009a4:	4770      	bx	lr

080009a6 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80009a6:	4770      	bx	lr

080009a8 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80009a8:	4770      	bx	lr

080009aa <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80009aa:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80009ac:	6802      	ldr	r2, [r0, #0]
 80009ae:	6893      	ldr	r3, [r2, #8]
 80009b0:	f003 0303 	and.w	r3, r3, #3
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d001      	beq.n	80009bc <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80009b8:	2000      	movs	r0, #0
}
 80009ba:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80009bc:	6813      	ldr	r3, [r2, #0]
 80009be:	f013 0f01 	tst.w	r3, #1
 80009c2:	d02f      	beq.n	8000a24 <ADC_Disable+0x7a>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80009c4:	6893      	ldr	r3, [r2, #8]
 80009c6:	f003 030d 	and.w	r3, r3, #13
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d009      	beq.n	80009e2 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80009d0:	f043 0310 	orr.w	r3, r3, #16
 80009d4:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 80009de:	2001      	movs	r0, #1
 80009e0:	e7eb      	b.n	80009ba <ADC_Disable+0x10>
 80009e2:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 80009e4:	6893      	ldr	r3, [r2, #8]
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	6093      	str	r3, [r2, #8]
 80009ec:	6803      	ldr	r3, [r0, #0]
 80009ee:	2203      	movs	r2, #3
 80009f0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80009f2:	f7ff ffd1 	bl	8000998 <HAL_GetTick>
 80009f6:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80009f8:	6823      	ldr	r3, [r4, #0]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f013 0f01 	tst.w	r3, #1
 8000a00:	d00e      	beq.n	8000a20 <ADC_Disable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a02:	f7ff ffc9 	bl	8000998 <HAL_GetTick>
 8000a06:	1b40      	subs	r0, r0, r5
 8000a08:	2802      	cmp	r0, #2
 8000a0a:	d9f5      	bls.n	80009f8 <ADC_Disable+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	e7cc      	b.n	80009ba <ADC_Disable+0x10>
  return HAL_OK;
 8000a20:	2000      	movs	r0, #0
 8000a22:	e7ca      	b.n	80009ba <ADC_Disable+0x10>
 8000a24:	2000      	movs	r0, #0
 8000a26:	e7c8      	b.n	80009ba <ADC_Disable+0x10>

08000a28 <ADC_Enable>:
{
 8000a28:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a2a:	6802      	ldr	r2, [r0, #0]
 8000a2c:	6893      	ldr	r3, [r2, #8]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d00d      	beq.n	8000a52 <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000a36:	6891      	ldr	r1, [r2, #8]
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <ADC_Enable+0x74>)
 8000a3a:	4219      	tst	r1, r3
 8000a3c:	d00f      	beq.n	8000a5e <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a46:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 8000a4e:	2001      	movs	r0, #1
}
 8000a50:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a52:	6813      	ldr	r3, [r2, #0]
 8000a54:	f013 0f01 	tst.w	r3, #1
 8000a58:	d0ed      	beq.n	8000a36 <ADC_Enable+0xe>
  return HAL_OK;
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	e7f8      	b.n	8000a50 <ADC_Enable+0x28>
 8000a5e:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8000a60:	6893      	ldr	r3, [r2, #8]
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000a68:	f7ff ff96 	bl	8000998 <HAL_GetTick>
 8000a6c:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f013 0f01 	tst.w	r3, #1
 8000a76:	d10e      	bne.n	8000a96 <ADC_Enable+0x6e>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000a78:	f7ff ff8e 	bl	8000998 <HAL_GetTick>
 8000a7c:	1b40      	subs	r0, r0, r5
 8000a7e:	2802      	cmp	r0, #2
 8000a80:	d9f5      	bls.n	8000a6e <ADC_Enable+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a84:	f043 0310 	orr.w	r3, r3, #16
 8000a88:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000a92:	2001      	movs	r0, #1
 8000a94:	e7dc      	b.n	8000a50 <ADC_Enable+0x28>
  return HAL_OK;
 8000a96:	2000      	movs	r0, #0
 8000a98:	e7da      	b.n	8000a50 <ADC_Enable+0x28>
 8000a9a:	bf00      	nop
 8000a9c:	8000003f 	.word	0x8000003f

08000aa0 <ADC_DMAError>:
{
 8000aa0:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000aa2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000aa4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aaa:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000aac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8000ab4:	f7ff ff78 	bl	80009a8 <HAL_ADC_ErrorCallback>
}
 8000ab8:	bd08      	pop	{r3, pc}

08000aba <ADC_DMAHalfConvCplt>:
{
 8000aba:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000abc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000abe:	f7ff ff71 	bl	80009a4 <HAL_ADC_ConvHalfCpltCallback>
}
 8000ac2:	bd08      	pop	{r3, pc}

08000ac4 <ADC_DMAConvCplt>:
{
 8000ac4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ac6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aca:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000ace:	d003      	beq.n	8000ad8 <ADC_DMAConvCplt+0x14>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4798      	blx	r3
}
 8000ad6:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ade:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	68d2      	ldr	r2, [r2, #12]
 8000ae4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000ae8:	d10d      	bne.n	8000b06 <ADC_DMAConvCplt+0x42>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000aea:	7e5a      	ldrb	r2, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000aec:	b95a      	cbnz	r2, 8000b06 <ADC_DMAConvCplt+0x42>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000af4:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af8:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000afc:	d103      	bne.n	8000b06 <ADC_DMAConvCplt+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b00:	f042 0201 	orr.w	r2, r2, #1
 8000b04:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fcc2 	bl	8000490 <HAL_ADC_ConvCpltCallback>
 8000b0c:	e7e3      	b.n	8000ad6 <ADC_DMAConvCplt+0x12>
	...

08000b10 <HAL_ADC_Init>:
{
 8000b10:	b530      	push	{r4, r5, lr}
 8000b12:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	f000 8144 	beq.w	8000da6 <HAL_ADC_Init+0x296>
 8000b1e:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b20:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b22:	f013 0f10 	tst.w	r3, #16
 8000b26:	d152      	bne.n	8000bce <HAL_ADC_Init+0xbe>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b28:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b2a:	b1ab      	cbz	r3, 8000b58 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b2c:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000b36:	d003      	beq.n	8000b40 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b38:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b3a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000b3e:	d047      	beq.n	8000bd0 <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 8000b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b42:	f023 0312 	bic.w	r3, r3, #18
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 8000b54:	2001      	movs	r0, #1
 8000b56:	e03b      	b.n	8000bd0 <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 8000b58:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b5a:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b5c:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 8000b5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8000b62:	f7ff fdc3 	bl	80006ec <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000b6e:	d001      	beq.n	8000b74 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b70:	2000      	movs	r0, #0
 8000b72:	e7dc      	b.n	8000b2e <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8000b74:	4620      	mov	r0, r4
 8000b76:	f7ff ff18 	bl	80009aa <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b7c:	f013 0f10 	tst.w	r3, #16
 8000b80:	d1d5      	bne.n	8000b2e <HAL_ADC_Init+0x1e>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d1d3      	bne.n	8000b2e <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b8c:	f023 0302 	bic.w	r3, r3, #2
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b96:	6822      	ldr	r2, [r4, #0]
 8000b98:	6893      	ldr	r3, [r2, #8]
 8000b9a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000b9e:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ba0:	6822      	ldr	r2, [r4, #0]
 8000ba2:	6893      	ldr	r3, [r2, #8]
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000baa:	4b80      	ldr	r3, [pc, #512]	; (8000dac <HAL_ADC_Init+0x29c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a80      	ldr	r2, [pc, #512]	; (8000db0 <HAL_ADC_Init+0x2a0>)
 8000bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb4:	0c9b      	lsrs	r3, r3, #18
 8000bb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bba:	005a      	lsls	r2, r3, #1
 8000bbc:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8000bbe:	e002      	b.n	8000bc6 <HAL_ADC_Init+0xb6>
            wait_loop_index--;
 8000bc0:	9b01      	ldr	r3, [sp, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000bc6:	9b01      	ldr	r3, [sp, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1f9      	bne.n	8000bc0 <HAL_ADC_Init+0xb0>
 8000bcc:	e7af      	b.n	8000b2e <HAL_ADC_Init+0x1e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bce:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bd2:	f013 0f10 	tst.w	r3, #16
 8000bd6:	f040 80dd 	bne.w	8000d94 <HAL_ADC_Init+0x284>
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	f040 80da 	bne.w	8000d94 <HAL_ADC_Init+0x284>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000be4:	f012 0204 	ands.w	r2, r2, #4
 8000be8:	f040 80d4 	bne.w	8000d94 <HAL_ADC_Init+0x284>
    ADC_STATE_CLR_SET(hadc->State,
 8000bec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000bee:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000bf2:	f041 0102 	orr.w	r1, r1, #2
 8000bf6:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bfc:	d015      	beq.n	8000c2a <HAL_ADC_Init+0x11a>
 8000bfe:	496d      	ldr	r1, [pc, #436]	; (8000db4 <HAL_ADC_Init+0x2a4>)
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d00f      	beq.n	8000c24 <HAL_ADC_Init+0x114>
 8000c04:	496c      	ldr	r1, [pc, #432]	; (8000db8 <HAL_ADC_Init+0x2a8>)
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c0a:	d010      	beq.n	8000c2e <HAL_ADC_Init+0x11e>
 8000c0c:	4d69      	ldr	r5, [pc, #420]	; (8000db4 <HAL_ADC_Init+0x2a4>)
 8000c0e:	42ab      	cmp	r3, r5
 8000c10:	d06c      	beq.n	8000cec <HAL_ADC_Init+0x1dc>
 8000c12:	4d6a      	ldr	r5, [pc, #424]	; (8000dbc <HAL_ADC_Init+0x2ac>)
 8000c14:	42ab      	cmp	r3, r5
 8000c16:	d06d      	beq.n	8000cf4 <HAL_ADC_Init+0x1e4>
 8000c18:	4d69      	ldr	r5, [pc, #420]	; (8000dc0 <HAL_ADC_Init+0x2b0>)
 8000c1a:	42ab      	cmp	r3, r5
 8000c1c:	d06d      	beq.n	8000cfa <HAL_ADC_Init+0x1ea>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9302      	str	r3, [sp, #8]
 8000c22:	e007      	b.n	8000c34 <HAL_ADC_Init+0x124>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c24:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8000c28:	e7ed      	b.n	8000c06 <HAL_ADC_Init+0xf6>
 8000c2a:	4966      	ldr	r1, [pc, #408]	; (8000dc4 <HAL_ADC_Init+0x2b4>)
 8000c2c:	e7eb      	b.n	8000c06 <HAL_ADC_Init+0xf6>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c32:	9302      	str	r3, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c34:	6825      	ldr	r5, [r4, #0]
 8000c36:	68ab      	ldr	r3, [r5, #8]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d05f      	beq.n	8000d00 <HAL_ADC_Init+0x1f0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c40:	9b02      	ldr	r3, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c42:	b123      	cbz	r3, 8000c4e <HAL_ADC_Init+0x13e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c44:	689d      	ldr	r5, [r3, #8]
 8000c46:	f005 0503 	and.w	r5, r5, #3
 8000c4a:	2d01      	cmp	r5, #1
 8000c4c:	d05d      	beq.n	8000d0a <HAL_ADC_Init+0x1fa>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c4e:	688b      	ldr	r3, [r1, #8]
 8000c50:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c54:	6865      	ldr	r5, [r4, #4]
 8000c56:	432b      	orrs	r3, r5
 8000c58:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000c5a:	7e61      	ldrb	r1, [r4, #25]
 8000c5c:	034b      	lsls	r3, r1, #13
 8000c5e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8000c60:	2d01      	cmp	r5, #1
 8000c62:	d001      	beq.n	8000c68 <HAL_ADC_Init+0x158>
 8000c64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	68e2      	ldr	r2, [r4, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	68a2      	ldr	r2, [r4, #8]
 8000c70:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c72:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000c76:	2a01      	cmp	r2, #1
 8000c78:	d04c      	beq.n	8000d14 <HAL_ADC_Init+0x204>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c7c:	2a01      	cmp	r2, #1
 8000c7e:	d00c      	beq.n	8000c9a <HAL_ADC_Init+0x18a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c80:	6821      	ldr	r1, [r4, #0]
 8000c82:	4d4e      	ldr	r5, [pc, #312]	; (8000dbc <HAL_ADC_Init+0x2ac>)
 8000c84:	42a9      	cmp	r1, r5
 8000c86:	d058      	beq.n	8000d3a <HAL_ADC_Init+0x22a>
 8000c88:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8000c8c:	42a9      	cmp	r1, r5
 8000c8e:	d054      	beq.n	8000d3a <HAL_ADC_Init+0x22a>
 8000c90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000c96:	430a      	orrs	r2, r1
 8000c98:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c9a:	6822      	ldr	r2, [r4, #0]
 8000c9c:	6891      	ldr	r1, [r2, #8]
 8000c9e:	f011 0f0c 	tst.w	r1, #12
 8000ca2:	d10c      	bne.n	8000cbe <HAL_ADC_Init+0x1ae>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ca4:	68d1      	ldr	r1, [r2, #12]
 8000ca6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000caa:	f021 0102 	bic.w	r1, r1, #2
 8000cae:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000cb0:	7e21      	ldrb	r1, [r4, #24]
 8000cb2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8000cb6:	0052      	lsls	r2, r2, #1
 8000cb8:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8000cbc:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8000cbe:	6821      	ldr	r1, [r4, #0]
 8000cc0:	68cd      	ldr	r5, [r1, #12]
 8000cc2:	4a41      	ldr	r2, [pc, #260]	; (8000dc8 <HAL_ADC_Init+0x2b8>)
 8000cc4:	402a      	ands	r2, r5
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cca:	6923      	ldr	r3, [r4, #16]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d058      	beq.n	8000d82 <HAL_ADC_Init+0x272>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000cd0:	6822      	ldr	r2, [r4, #0]
 8000cd2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cd4:	f023 030f 	bic.w	r3, r3, #15
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000cde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ce0:	f023 0303 	bic.w	r3, r3, #3
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6423      	str	r3, [r4, #64]	; 0x40
 8000cea:	e05a      	b.n	8000da2 <HAL_ADC_Init+0x292>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000cec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e79f      	b.n	8000c34 <HAL_ADC_Init+0x124>
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <HAL_ADC_Init+0x2b0>)
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	e79c      	b.n	8000c34 <HAL_ADC_Init+0x124>
 8000cfa:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <HAL_ADC_Init+0x2ac>)
 8000cfc:	9302      	str	r3, [sp, #8]
 8000cfe:	e799      	b.n	8000c34 <HAL_ADC_Init+0x124>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d00:	682b      	ldr	r3, [r5, #0]
 8000d02:	f013 0f01 	tst.w	r3, #1
 8000d06:	d1a8      	bne.n	8000c5a <HAL_ADC_Init+0x14a>
 8000d08:	e79a      	b.n	8000c40 <HAL_ADC_Init+0x130>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f013 0f01 	tst.w	r3, #1
 8000d10:	d1a3      	bne.n	8000c5a <HAL_ADC_Init+0x14a>
 8000d12:	e79c      	b.n	8000c4e <HAL_ADC_Init+0x13e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d14:	b931      	cbnz	r1, 8000d24 <HAL_ADC_Init+0x214>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d22:	e7aa      	b.n	8000c7a <HAL_ADC_Init+0x16a>
        ADC_STATE_CLR_SET(hadc->State,
 8000d24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d26:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000d2a:	f042 0220 	orr.w	r2, r2, #32
 8000d2e:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d30:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000d32:	f042 0201 	orr.w	r2, r2, #1
 8000d36:	6462      	str	r2, [r4, #68]	; 0x44
 8000d38:	e79f      	b.n	8000c7a <HAL_ADC_Init+0x16a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d3a:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8000d3e:	d011      	beq.n	8000d64 <HAL_ADC_Init+0x254>
 8000d40:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000d44:	d011      	beq.n	8000d6a <HAL_ADC_Init+0x25a>
 8000d46:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 8000d4a:	d011      	beq.n	8000d70 <HAL_ADC_Init+0x260>
 8000d4c:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 8000d50:	d011      	beq.n	8000d76 <HAL_ADC_Init+0x266>
 8000d52:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 8000d56:	d011      	beq.n	8000d7c <HAL_ADC_Init+0x26c>
 8000d58:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 8000d5c:	d19a      	bne.n	8000c94 <HAL_ADC_Init+0x184>
 8000d5e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000d62:	e797      	b.n	8000c94 <HAL_ADC_Init+0x184>
 8000d64:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000d68:	e794      	b.n	8000c94 <HAL_ADC_Init+0x184>
 8000d6a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8000d6e:	e791      	b.n	8000c94 <HAL_ADC_Init+0x184>
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d74:	e78e      	b.n	8000c94 <HAL_ADC_Init+0x184>
 8000d76:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000d7a:	e78b      	b.n	8000c94 <HAL_ADC_Init+0x184>
 8000d7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d80:	e788      	b.n	8000c94 <HAL_ADC_Init+0x184>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d82:	6821      	ldr	r1, [r4, #0]
 8000d84:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d86:	f023 030f 	bic.w	r3, r3, #15
 8000d8a:	69e2      	ldr	r2, [r4, #28]
 8000d8c:	3a01      	subs	r2, #1
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	630b      	str	r3, [r1, #48]	; 0x30
 8000d92:	e7a2      	b.n	8000cda <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8000d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d96:	f023 0312 	bic.w	r3, r3, #18
 8000d9a:	f043 0310 	orr.w	r3, r3, #16
 8000d9e:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 8000da0:	2001      	movs	r0, #1
}
 8000da2:	b017      	add	sp, #92	; 0x5c
 8000da4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000da6:	2001      	movs	r0, #1
 8000da8:	e7fb      	b.n	8000da2 <HAL_ADC_Init+0x292>
 8000daa:	bf00      	nop
 8000dac:	20000004 	.word	0x20000004
 8000db0:	431bde83 	.word	0x431bde83
 8000db4:	50000100 	.word	0x50000100
 8000db8:	50000700 	.word	0x50000700
 8000dbc:	50000400 	.word	0x50000400
 8000dc0:	50000500 	.word	0x50000500
 8000dc4:	50000300 	.word	0x50000300
 8000dc8:	fff0c007 	.word	0xfff0c007

08000dcc <HAL_ADC_Start_DMA>:
{
 8000dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dce:	6804      	ldr	r4, [r0, #0]
 8000dd0:	68a5      	ldr	r5, [r4, #8]
 8000dd2:	f015 0f04 	tst.w	r5, #4
 8000dd6:	f040 80a8 	bne.w	8000f2a <HAL_ADC_Start_DMA+0x15e>
    __HAL_LOCK(hadc);
 8000dda:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8000dde:	2d01      	cmp	r5, #1
 8000de0:	f000 80a5 	beq.w	8000f2e <HAL_ADC_Start_DMA+0x162>
 8000de4:	2301      	movs	r3, #1
 8000de6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000dea:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000dee:	d00a      	beq.n	8000e06 <HAL_ADC_Start_DMA+0x3a>
 8000df0:	4b50      	ldr	r3, [pc, #320]	; (8000f34 <HAL_ADC_Start_DMA+0x168>)
 8000df2:	429c      	cmp	r4, r3
 8000df4:	d007      	beq.n	8000e06 <HAL_ADC_Start_DMA+0x3a>
 8000df6:	4b50      	ldr	r3, [pc, #320]	; (8000f38 <HAL_ADC_Start_DMA+0x16c>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f013 0f1f 	tst.w	r3, #31
 8000dfe:	bf0c      	ite	eq
 8000e00:	2301      	moveq	r3, #1
 8000e02:	2300      	movne	r3, #0
 8000e04:	e006      	b.n	8000e14 <HAL_ADC_Start_DMA+0x48>
 8000e06:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <HAL_ADC_Start_DMA+0x170>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f013 0f1f 	tst.w	r3, #31
 8000e0e:	bf0c      	ite	eq
 8000e10:	2301      	moveq	r3, #1
 8000e12:	2300      	movne	r3, #0
 8000e14:	b92b      	cbnz	r3, 8000e22 <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8000e16:	2300      	movs	r3, #0
 8000e18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8000e1c:	2501      	movs	r5, #1
}
 8000e1e:	4628      	mov	r0, r5
 8000e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e22:	4616      	mov	r6, r2
 8000e24:	460f      	mov	r7, r1
 8000e26:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 8000e28:	f7ff fdfe 	bl	8000a28 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000e2c:	4605      	mov	r5, r0
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d177      	bne.n	8000f22 <HAL_ADC_Start_DMA+0x156>
        ADC_STATE_CLR_SET(hadc->State,
 8000e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e38:	f023 0301 	bic.w	r3, r3, #1
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e40:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e48:	d043      	beq.n	8000ed2 <HAL_ADC_Start_DMA+0x106>
 8000e4a:	4a3a      	ldr	r2, [pc, #232]	; (8000f34 <HAL_ADC_Start_DMA+0x168>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d040      	beq.n	8000ed2 <HAL_ADC_Start_DMA+0x106>
 8000e50:	4a39      	ldr	r2, [pc, #228]	; (8000f38 <HAL_ADC_Start_DMA+0x16c>)
 8000e52:	6892      	ldr	r2, [r2, #8]
 8000e54:	f012 0f1f 	tst.w	r2, #31
 8000e58:	d140      	bne.n	8000edc <HAL_ADC_Start_DMA+0x110>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e5c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000e60:	6422      	str	r2, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e68:	d005      	beq.n	8000e76 <HAL_ADC_Start_DMA+0xaa>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e74:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e78:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000e7c:	d04e      	beq.n	8000f1c <HAL_ADC_Start_DMA+0x150>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e80:	f023 0306 	bic.w	r3, r3, #6
 8000e84:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8000e86:	2300      	movs	r3, #0
 8000e88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e8e:	4a2c      	ldr	r2, [pc, #176]	; (8000f40 <HAL_ADC_Start_DMA+0x174>)
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e94:	4a2b      	ldr	r2, [pc, #172]	; (8000f44 <HAL_ADC_Start_DMA+0x178>)
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e9a:	4a2b      	ldr	r2, [pc, #172]	; (8000f48 <HAL_ADC_Start_DMA+0x17c>)
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	221c      	movs	r2, #28
 8000ea2:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ea4:	6822      	ldr	r2, [r4, #0]
 8000ea6:	6853      	ldr	r3, [r2, #4]
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	68d3      	ldr	r3, [r2, #12]
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000eb8:	6821      	ldr	r1, [r4, #0]
 8000eba:	4633      	mov	r3, r6
 8000ebc:	463a      	mov	r2, r7
 8000ebe:	3140      	adds	r1, #64	; 0x40
 8000ec0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000ec2:	f000 fda5 	bl	8001a10 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	6893      	ldr	r3, [r2, #8]
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6093      	str	r3, [r2, #8]
 8000ed0:	e7a5      	b.n	8000e1e <HAL_ADC_Start_DMA+0x52>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <HAL_ADC_Start_DMA+0x170>)
 8000ed4:	6892      	ldr	r2, [r2, #8]
 8000ed6:	f012 0f1f 	tst.w	r2, #31
 8000eda:	d0be      	beq.n	8000e5a <HAL_ADC_Start_DMA+0x8e>
 8000edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee0:	d0bb      	beq.n	8000e5a <HAL_ADC_Start_DMA+0x8e>
 8000ee2:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <HAL_ADC_Start_DMA+0x180>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d0b8      	beq.n	8000e5a <HAL_ADC_Start_DMA+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ee8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000eea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000eee:	6422      	str	r2, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ef0:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <HAL_ADC_Start_DMA+0x168>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00c      	beq.n	8000f10 <HAL_ADC_Start_DMA+0x144>
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_ADC_Start_DMA+0x180>)
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0b9      	beq.n	8000e76 <HAL_ADC_Start_DMA+0xaa>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f0c:	6423      	str	r3, [r4, #64]	; 0x40
 8000f0e:	e7b2      	b.n	8000e76 <HAL_ADC_Start_DMA+0xaa>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8000f1a:	e7f0      	b.n	8000efe <HAL_ADC_Start_DMA+0x132>
          ADC_CLEAR_ERRORCODE(hadc);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	6463      	str	r3, [r4, #68]	; 0x44
 8000f20:	e7b1      	b.n	8000e86 <HAL_ADC_Start_DMA+0xba>
        __HAL_UNLOCK(hadc);
 8000f22:	2300      	movs	r3, #0
 8000f24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000f28:	e779      	b.n	8000e1e <HAL_ADC_Start_DMA+0x52>
    tmp_hal_status = HAL_BUSY;
 8000f2a:	2502      	movs	r5, #2
 8000f2c:	e777      	b.n	8000e1e <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 8000f2e:	2502      	movs	r5, #2
 8000f30:	e775      	b.n	8000e1e <HAL_ADC_Start_DMA+0x52>
 8000f32:	bf00      	nop
 8000f34:	50000100 	.word	0x50000100
 8000f38:	50000700 	.word	0x50000700
 8000f3c:	50000300 	.word	0x50000300
 8000f40:	08000ac5 	.word	0x08000ac5
 8000f44:	08000abb 	.word	0x08000abb
 8000f48:	08000aa1 	.word	0x08000aa1
 8000f4c:	50000400 	.word	0x50000400

08000f50 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8000f50:	4770      	bx	lr

08000f52 <HAL_ADCEx_InjectedQueueOverflowCallback>:
}
 8000f52:	4770      	bx	lr

08000f54 <HAL_ADCEx_LevelOutOfWindow2Callback>:
}
 8000f54:	4770      	bx	lr

08000f56 <HAL_ADCEx_LevelOutOfWindow3Callback>:
}
 8000f56:	4770      	bx	lr

08000f58 <HAL_ADC_IRQHandler>:
{
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f5c:	6803      	ldr	r3, [r0, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	f012 0f04 	tst.w	r2, #4
 8000f64:	d003      	beq.n	8000f6e <HAL_ADC_IRQHandler+0x16>
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	f012 0f04 	tst.w	r2, #4
 8000f6c:	d107      	bne.n	8000f7e <HAL_ADC_IRQHandler+0x26>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000f6e:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f70:	f012 0f08 	tst.w	r2, #8
 8000f74:	d07f      	beq.n	8001076 <HAL_ADC_IRQHandler+0x11e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	f012 0f08 	tst.w	r2, #8
 8000f7c:	d07b      	beq.n	8001076 <HAL_ADC_IRQHandler+0x11e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f80:	f012 0f10 	tst.w	r2, #16
 8000f84:	d103      	bne.n	8000f8e <HAL_ADC_IRQHandler+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f8c:	6422      	str	r2, [r4, #64]	; 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f92:	d028      	beq.n	8000fe6 <HAL_ADC_IRQHandler+0x8e>
 8000f94:	4aa3      	ldr	r2, [pc, #652]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d025      	beq.n	8000fe6 <HAL_ADC_IRQHandler+0x8e>
 8000f9a:	4aa3      	ldr	r2, [pc, #652]	; (8001228 <HAL_ADC_IRQHandler+0x2d0>)
 8000f9c:	6892      	ldr	r2, [r2, #8]
 8000f9e:	f012 0f1f 	tst.w	r2, #31
 8000fa2:	d125      	bne.n	8000ff0 <HAL_ADC_IRQHandler+0x98>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000fa4:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000fac:	d15d      	bne.n	800106a <HAL_ADC_IRQHandler+0x112>
 8000fae:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8000fb2:	d15a      	bne.n	800106a <HAL_ADC_IRQHandler+0x112>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f012 0f08 	tst.w	r2, #8
 8000fba:	d056      	beq.n	800106a <HAL_ADC_IRQHandler+0x112>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	f012 0f04 	tst.w	r2, #4
 8000fc2:	d14a      	bne.n	800105a <HAL_ADC_IRQHandler+0x102>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	f022 020c 	bic.w	r2, r2, #12
 8000fca:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd2:	6423      	str	r3, [r4, #64]	; 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fd6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000fda:	d146      	bne.n	800106a <HAL_ADC_IRQHandler+0x112>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6423      	str	r3, [r4, #64]	; 0x40
 8000fe4:	e041      	b.n	800106a <HAL_ADC_IRQHandler+0x112>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000fe6:	4a91      	ldr	r2, [pc, #580]	; (800122c <HAL_ADC_IRQHandler+0x2d4>)
 8000fe8:	6892      	ldr	r2, [r2, #8]
 8000fea:	f012 0f1f 	tst.w	r2, #31
 8000fee:	d0d9      	beq.n	8000fa4 <HAL_ADC_IRQHandler+0x4c>
 8000ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ff4:	d009      	beq.n	800100a <HAL_ADC_IRQHandler+0xb2>
 8000ff6:	4a8b      	ldr	r2, [pc, #556]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d006      	beq.n	800100a <HAL_ADC_IRQHandler+0xb2>
 8000ffc:	4a8a      	ldr	r2, [pc, #552]	; (8001228 <HAL_ADC_IRQHandler+0x2d0>)
 8000ffe:	6892      	ldr	r2, [r2, #8]
 8001000:	f002 021f 	and.w	r2, r2, #31
 8001004:	2a05      	cmp	r2, #5
 8001006:	d106      	bne.n	8001016 <HAL_ADC_IRQHandler+0xbe>
 8001008:	e7cc      	b.n	8000fa4 <HAL_ADC_IRQHandler+0x4c>
 800100a:	4a88      	ldr	r2, [pc, #544]	; (800122c <HAL_ADC_IRQHandler+0x2d4>)
 800100c:	6892      	ldr	r2, [r2, #8]
 800100e:	f002 021f 	and.w	r2, r2, #31
 8001012:	2a05      	cmp	r2, #5
 8001014:	d0c6      	beq.n	8000fa4 <HAL_ADC_IRQHandler+0x4c>
 8001016:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800101a:	d009      	beq.n	8001030 <HAL_ADC_IRQHandler+0xd8>
 800101c:	4a81      	ldr	r2, [pc, #516]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d006      	beq.n	8001030 <HAL_ADC_IRQHandler+0xd8>
 8001022:	4a81      	ldr	r2, [pc, #516]	; (8001228 <HAL_ADC_IRQHandler+0x2d0>)
 8001024:	6892      	ldr	r2, [r2, #8]
 8001026:	f002 021f 	and.w	r2, r2, #31
 800102a:	2a09      	cmp	r2, #9
 800102c:	d106      	bne.n	800103c <HAL_ADC_IRQHandler+0xe4>
 800102e:	e7b9      	b.n	8000fa4 <HAL_ADC_IRQHandler+0x4c>
 8001030:	4a7e      	ldr	r2, [pc, #504]	; (800122c <HAL_ADC_IRQHandler+0x2d4>)
 8001032:	6892      	ldr	r2, [r2, #8]
 8001034:	f002 021f 	and.w	r2, r2, #31
 8001038:	2a09      	cmp	r2, #9
 800103a:	d0b3      	beq.n	8000fa4 <HAL_ADC_IRQHandler+0x4c>
 800103c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001040:	d0b0      	beq.n	8000fa4 <HAL_ADC_IRQHandler+0x4c>
 8001042:	4a7b      	ldr	r2, [pc, #492]	; (8001230 <HAL_ADC_IRQHandler+0x2d8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d0ad      	beq.n	8000fa4 <HAL_ADC_IRQHandler+0x4c>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001048:	4a76      	ldr	r2, [pc, #472]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d002      	beq.n	8001054 <HAL_ADC_IRQHandler+0xfc>
 800104e:	4a78      	ldr	r2, [pc, #480]	; (8001230 <HAL_ADC_IRQHandler+0x2d8>)
 8001050:	68d1      	ldr	r1, [r2, #12]
 8001052:	e7a8      	b.n	8000fa6 <HAL_ADC_IRQHandler+0x4e>
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001058:	e7fa      	b.n	8001050 <HAL_ADC_IRQHandler+0xf8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800105c:	f043 0310 	orr.w	r3, r3, #16
 8001060:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001062:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800106a:	4620      	mov	r0, r4
 800106c:	f7ff fa10 	bl	8000490 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	f012 0f20 	tst.w	r2, #32
 800107e:	d003      	beq.n	8001088 <HAL_ADC_IRQHandler+0x130>
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	f012 0f20 	tst.w	r2, #32
 8001086:	d109      	bne.n	800109c <HAL_ADC_IRQHandler+0x144>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001088:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800108a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800108e:	f000 80df 	beq.w	8001250 <HAL_ADC_IRQHandler+0x2f8>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001098:	f000 80da 	beq.w	8001250 <HAL_ADC_IRQHandler+0x2f8>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800109c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800109e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010a2:	6422      	str	r2, [r4, #64]	; 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80010a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010a8:	d045      	beq.n	8001136 <HAL_ADC_IRQHandler+0x1de>
 80010aa:	4a5e      	ldr	r2, [pc, #376]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d042      	beq.n	8001136 <HAL_ADC_IRQHandler+0x1de>
 80010b0:	4a5d      	ldr	r2, [pc, #372]	; (8001228 <HAL_ADC_IRQHandler+0x2d0>)
 80010b2:	6892      	ldr	r2, [r2, #8]
 80010b4:	f012 0f1f 	tst.w	r2, #31
 80010b8:	d142      	bne.n	8001140 <HAL_ADC_IRQHandler+0x1e8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80010ba:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80010bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010be:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80010c2:	d00c      	beq.n	80010de <HAL_ADC_IRQHandler+0x186>
 80010c4:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80010c8:	f040 80bc 	bne.w	8001244 <HAL_ADC_IRQHandler+0x2ec>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80010cc:	68da      	ldr	r2, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80010ce:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80010d2:	f040 80b7 	bne.w	8001244 <HAL_ADC_IRQHandler+0x2ec>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80010d6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80010da:	f040 80b3 	bne.w	8001244 <HAL_ADC_IRQHandler+0x2ec>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80010e4:	f000 80ae 	beq.w	8001244 <HAL_ADC_IRQHandler+0x2ec>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80010e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ec:	d05d      	beq.n	80011aa <HAL_ADC_IRQHandler+0x252>
 80010ee:	4a4d      	ldr	r2, [pc, #308]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d05a      	beq.n	80011aa <HAL_ADC_IRQHandler+0x252>
 80010f4:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <HAL_ADC_IRQHandler+0x2d0>)
 80010f6:	6892      	ldr	r2, [r2, #8]
 80010f8:	f012 0f1f 	tst.w	r2, #31
 80010fc:	d15a      	bne.n	80011b4 <HAL_ADC_IRQHandler+0x25c>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80010fe:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001100:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001104:	f040 809e 	bne.w	8001244 <HAL_ADC_IRQHandler+0x2ec>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	f012 0f08 	tst.w	r2, #8
 800110e:	f040 8091 	bne.w	8001234 <HAL_ADC_IRQHandler+0x2dc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001118:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800111a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800111c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001120:	6423      	str	r3, [r4, #64]	; 0x40
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001124:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001128:	f040 808c 	bne.w	8001244 <HAL_ADC_IRQHandler+0x2ec>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800112c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6423      	str	r3, [r4, #64]	; 0x40
 8001134:	e086      	b.n	8001244 <HAL_ADC_IRQHandler+0x2ec>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001136:	4a3d      	ldr	r2, [pc, #244]	; (800122c <HAL_ADC_IRQHandler+0x2d4>)
 8001138:	6892      	ldr	r2, [r2, #8]
 800113a:	f012 0f1f 	tst.w	r2, #31
 800113e:	d0bc      	beq.n	80010ba <HAL_ADC_IRQHandler+0x162>
 8001140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001144:	d009      	beq.n	800115a <HAL_ADC_IRQHandler+0x202>
 8001146:	4a37      	ldr	r2, [pc, #220]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d006      	beq.n	800115a <HAL_ADC_IRQHandler+0x202>
 800114c:	4a36      	ldr	r2, [pc, #216]	; (8001228 <HAL_ADC_IRQHandler+0x2d0>)
 800114e:	6892      	ldr	r2, [r2, #8]
 8001150:	f002 021f 	and.w	r2, r2, #31
 8001154:	2a05      	cmp	r2, #5
 8001156:	d106      	bne.n	8001166 <HAL_ADC_IRQHandler+0x20e>
 8001158:	e7af      	b.n	80010ba <HAL_ADC_IRQHandler+0x162>
 800115a:	4a34      	ldr	r2, [pc, #208]	; (800122c <HAL_ADC_IRQHandler+0x2d4>)
 800115c:	6892      	ldr	r2, [r2, #8]
 800115e:	f002 021f 	and.w	r2, r2, #31
 8001162:	2a05      	cmp	r2, #5
 8001164:	d0a9      	beq.n	80010ba <HAL_ADC_IRQHandler+0x162>
 8001166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800116a:	d009      	beq.n	8001180 <HAL_ADC_IRQHandler+0x228>
 800116c:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d006      	beq.n	8001180 <HAL_ADC_IRQHandler+0x228>
 8001172:	4a2d      	ldr	r2, [pc, #180]	; (8001228 <HAL_ADC_IRQHandler+0x2d0>)
 8001174:	6892      	ldr	r2, [r2, #8]
 8001176:	f002 021f 	and.w	r2, r2, #31
 800117a:	2a09      	cmp	r2, #9
 800117c:	d106      	bne.n	800118c <HAL_ADC_IRQHandler+0x234>
 800117e:	e79c      	b.n	80010ba <HAL_ADC_IRQHandler+0x162>
 8001180:	4a2a      	ldr	r2, [pc, #168]	; (800122c <HAL_ADC_IRQHandler+0x2d4>)
 8001182:	6892      	ldr	r2, [r2, #8]
 8001184:	f002 021f 	and.w	r2, r2, #31
 8001188:	2a09      	cmp	r2, #9
 800118a:	d096      	beq.n	80010ba <HAL_ADC_IRQHandler+0x162>
 800118c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001190:	d093      	beq.n	80010ba <HAL_ADC_IRQHandler+0x162>
 8001192:	4a27      	ldr	r2, [pc, #156]	; (8001230 <HAL_ADC_IRQHandler+0x2d8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d090      	beq.n	80010ba <HAL_ADC_IRQHandler+0x162>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001198:	4a22      	ldr	r2, [pc, #136]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d002      	beq.n	80011a4 <HAL_ADC_IRQHandler+0x24c>
 800119e:	4a24      	ldr	r2, [pc, #144]	; (8001230 <HAL_ADC_IRQHandler+0x2d8>)
 80011a0:	68d1      	ldr	r1, [r2, #12]
 80011a2:	e78b      	b.n	80010bc <HAL_ADC_IRQHandler+0x164>
 80011a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011a8:	e7fa      	b.n	80011a0 <HAL_ADC_IRQHandler+0x248>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80011aa:	4a20      	ldr	r2, [pc, #128]	; (800122c <HAL_ADC_IRQHandler+0x2d4>)
 80011ac:	6892      	ldr	r2, [r2, #8]
 80011ae:	f012 0f1f 	tst.w	r2, #31
 80011b2:	d0a4      	beq.n	80010fe <HAL_ADC_IRQHandler+0x1a6>
 80011b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011b8:	d009      	beq.n	80011ce <HAL_ADC_IRQHandler+0x276>
 80011ba:	4a1a      	ldr	r2, [pc, #104]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d006      	beq.n	80011ce <HAL_ADC_IRQHandler+0x276>
 80011c0:	4a19      	ldr	r2, [pc, #100]	; (8001228 <HAL_ADC_IRQHandler+0x2d0>)
 80011c2:	6892      	ldr	r2, [r2, #8]
 80011c4:	f002 021f 	and.w	r2, r2, #31
 80011c8:	2a06      	cmp	r2, #6
 80011ca:	d106      	bne.n	80011da <HAL_ADC_IRQHandler+0x282>
 80011cc:	e797      	b.n	80010fe <HAL_ADC_IRQHandler+0x1a6>
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_ADC_IRQHandler+0x2d4>)
 80011d0:	6892      	ldr	r2, [r2, #8]
 80011d2:	f002 021f 	and.w	r2, r2, #31
 80011d6:	2a06      	cmp	r2, #6
 80011d8:	d091      	beq.n	80010fe <HAL_ADC_IRQHandler+0x1a6>
 80011da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011de:	d009      	beq.n	80011f4 <HAL_ADC_IRQHandler+0x29c>
 80011e0:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d006      	beq.n	80011f4 <HAL_ADC_IRQHandler+0x29c>
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_ADC_IRQHandler+0x2d0>)
 80011e8:	6892      	ldr	r2, [r2, #8]
 80011ea:	f002 021f 	and.w	r2, r2, #31
 80011ee:	2a07      	cmp	r2, #7
 80011f0:	d107      	bne.n	8001202 <HAL_ADC_IRQHandler+0x2aa>
 80011f2:	e784      	b.n	80010fe <HAL_ADC_IRQHandler+0x1a6>
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <HAL_ADC_IRQHandler+0x2d4>)
 80011f6:	6892      	ldr	r2, [r2, #8]
 80011f8:	f002 021f 	and.w	r2, r2, #31
 80011fc:	2a07      	cmp	r2, #7
 80011fe:	f43f af7e 	beq.w	80010fe <HAL_ADC_IRQHandler+0x1a6>
 8001202:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001206:	f43f af7a 	beq.w	80010fe <HAL_ADC_IRQHandler+0x1a6>
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_ADC_IRQHandler+0x2d8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	f43f af76 	beq.w	80010fe <HAL_ADC_IRQHandler+0x1a6>
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_ADC_IRQHandler+0x2cc>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d002      	beq.n	800121e <HAL_ADC_IRQHandler+0x2c6>
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <HAL_ADC_IRQHandler+0x2d8>)
 800121a:	68d2      	ldr	r2, [r2, #12]
 800121c:	e770      	b.n	8001100 <HAL_ADC_IRQHandler+0x1a8>
 800121e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001222:	e7fa      	b.n	800121a <HAL_ADC_IRQHandler+0x2c2>
 8001224:	50000100 	.word	0x50000100
 8001228:	50000700 	.word	0x50000700
 800122c:	50000300 	.word	0x50000300
 8001230:	50000400 	.word	0x50000400
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6423      	str	r3, [r4, #64]	; 0x40
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff fe83 	bl	8000f50 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	2260      	movs	r2, #96	; 0x60
 800124e:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001258:	d003      	beq.n	8001262 <HAL_ADC_IRQHandler+0x30a>
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001260:	d144      	bne.n	80012ec <HAL_ADC_IRQHandler+0x394>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	f412 7f80 	tst.w	r2, #256	; 0x100
 800126a:	d003      	beq.n	8001274 <HAL_ADC_IRQHandler+0x31c>
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001272:	d146      	bne.n	8001302 <HAL_ADC_IRQHandler+0x3aa>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	f412 7f00 	tst.w	r2, #512	; 0x200
 800127c:	d003      	beq.n	8001286 <HAL_ADC_IRQHandler+0x32e>
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001284:	d149      	bne.n	800131a <HAL_ADC_IRQHandler+0x3c2>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	f012 0f10 	tst.w	r2, #16
 800128e:	d023      	beq.n	80012d8 <HAL_ADC_IRQHandler+0x380>
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	f012 0f10 	tst.w	r2, #16
 8001296:	d01f      	beq.n	80012d8 <HAL_ADC_IRQHandler+0x380>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001298:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800129a:	2a01      	cmp	r2, #1
 800129c:	d00e      	beq.n	80012bc <HAL_ADC_IRQHandler+0x364>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800129e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012a2:	d049      	beq.n	8001338 <HAL_ADC_IRQHandler+0x3e0>
 80012a4:	4a2f      	ldr	r2, [pc, #188]	; (8001364 <HAL_ADC_IRQHandler+0x40c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d043      	beq.n	8001332 <HAL_ADC_IRQHandler+0x3da>
 80012aa:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <HAL_ADC_IRQHandler+0x410>)
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80012ac:	6891      	ldr	r1, [r2, #8]
 80012ae:	f011 0f1f 	tst.w	r1, #31
 80012b2:	d143      	bne.n	800133c <HAL_ADC_IRQHandler+0x3e4>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	f013 0f01 	tst.w	r3, #1
 80012ba:	d00a      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x37a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80012bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c2:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 80012cc:	4620      	mov	r0, r4
 80012ce:	f7ff fb6b 	bl	80009a8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	2210      	movs	r2, #16
 80012d6:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80012e0:	d003      	beq.n	80012ea <HAL_ADC_IRQHandler+0x392>
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80012e8:	d12d      	bne.n	8001346 <HAL_ADC_IRQHandler+0x3ee>
}
 80012ea:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f2:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7ff fb56 	bl	80009a6 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e7af      	b.n	8001262 <HAL_ADC_IRQHandler+0x30a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800130a:	4620      	mov	r0, r4
 800130c:	f7ff fe22 	bl	8000f54 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e7ac      	b.n	8001274 <HAL_ADC_IRQHandler+0x31c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800131a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001322:	4620      	mov	r0, r4
 8001324:	f7ff fe17 	bl	8000f56 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e7a9      	b.n	8001286 <HAL_ADC_IRQHandler+0x32e>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001332:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001336:	e7b9      	b.n	80012ac <HAL_ADC_IRQHandler+0x354>
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <HAL_ADC_IRQHandler+0x414>)
 800133a:	e7b7      	b.n	80012ac <HAL_ADC_IRQHandler+0x354>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800133c:	6893      	ldr	r3, [r2, #8]
 800133e:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8001342:	d0c6      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x37a>
 8001344:	e7ba      	b.n	80012bc <HAL_ADC_IRQHandler+0x364>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001346:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800134c:	6422      	str	r2, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800134e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001350:	f042 0208 	orr.w	r2, r2, #8
 8001354:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135a:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff fdf8 	bl	8000f52 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8001362:	e7c2      	b.n	80012ea <HAL_ADC_IRQHandler+0x392>
 8001364:	50000100 	.word	0x50000100
 8001368:	50000700 	.word	0x50000700
 800136c:	50000300 	.word	0x50000300

08001370 <HAL_ADC_ConfigChannel>:
{
 8001370:	b430      	push	{r4, r5}
 8001372:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8001374:	2200      	movs	r2, #0
 8001376:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001378:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800137c:	2a01      	cmp	r2, #1
 800137e:	f000 81bb 	beq.w	80016f8 <HAL_ADC_ConfigChannel+0x388>
 8001382:	4603      	mov	r3, r0
 8001384:	2201      	movs	r2, #1
 8001386:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800138a:	6800      	ldr	r0, [r0, #0]
 800138c:	6882      	ldr	r2, [r0, #8]
 800138e:	f012 0f04 	tst.w	r2, #4
 8001392:	f040 81a6 	bne.w	80016e2 <HAL_ADC_ConfigChannel+0x372>
    if (sConfig->Rank < 5U)
 8001396:	684a      	ldr	r2, [r1, #4]
 8001398:	2a04      	cmp	r2, #4
 800139a:	d831      	bhi.n	8001400 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 800139c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800139e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013a2:	0055      	lsls	r5, r2, #1
 80013a4:	221f      	movs	r2, #31
 80013a6:	40aa      	lsls	r2, r5
 80013a8:	ea24 0202 	bic.w	r2, r4, r2
 80013ac:	680c      	ldr	r4, [r1, #0]
 80013ae:	40ac      	lsls	r4, r5
 80013b0:	4322      	orrs	r2, r4
 80013b2:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	6882      	ldr	r2, [r0, #8]
 80013b8:	f012 0f0c 	tst.w	r2, #12
 80013bc:	d168      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80013be:	680a      	ldr	r2, [r1, #0]
 80013c0:	2a09      	cmp	r2, #9
 80013c2:	d94e      	bls.n	8001462 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013c4:	6984      	ldr	r4, [r0, #24]
 80013c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013ca:	3a1e      	subs	r2, #30
 80013cc:	2507      	movs	r5, #7
 80013ce:	4095      	lsls	r5, r2
 80013d0:	ea24 0405 	bic.w	r4, r4, r5
 80013d4:	688d      	ldr	r5, [r1, #8]
 80013d6:	fa05 f202 	lsl.w	r2, r5, r2
 80013da:	4322      	orrs	r2, r4
 80013dc:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013de:	6948      	ldr	r0, [r1, #20]
 80013e0:	681c      	ldr	r4, [r3, #0]
 80013e2:	68e2      	ldr	r2, [r4, #12]
 80013e4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80013e8:	0052      	lsls	r2, r2, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 80013ee:	6908      	ldr	r0, [r1, #16]
 80013f0:	3801      	subs	r0, #1
 80013f2:	2803      	cmp	r0, #3
 80013f4:	f200 8095 	bhi.w	8001522 <HAL_ADC_ConfigChannel+0x1b2>
 80013f8:	e8df f000 	tbb	[pc, r0]
 80013fc:	887d7240 	.word	0x887d7240
    else if (sConfig->Rank < 10U)
 8001400:	2a09      	cmp	r2, #9
 8001402:	d80e      	bhi.n	8001422 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001404:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001406:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800140a:	0055      	lsls	r5, r2, #1
 800140c:	3d1e      	subs	r5, #30
 800140e:	221f      	movs	r2, #31
 8001410:	40aa      	lsls	r2, r5
 8001412:	ea24 0202 	bic.w	r2, r4, r2
 8001416:	680c      	ldr	r4, [r1, #0]
 8001418:	fa04 f505 	lsl.w	r5, r4, r5
 800141c:	432a      	orrs	r2, r5
 800141e:	6342      	str	r2, [r0, #52]	; 0x34
 8001420:	e7c8      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001422:	2a0e      	cmp	r2, #14
 8001424:	d80e      	bhi.n	8001444 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001426:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001428:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800142c:	0055      	lsls	r5, r2, #1
 800142e:	3d3c      	subs	r5, #60	; 0x3c
 8001430:	221f      	movs	r2, #31
 8001432:	40aa      	lsls	r2, r5
 8001434:	ea24 0202 	bic.w	r2, r4, r2
 8001438:	680c      	ldr	r4, [r1, #0]
 800143a:	fa04 f505 	lsl.w	r5, r4, r5
 800143e:	432a      	orrs	r2, r5
 8001440:	6382      	str	r2, [r0, #56]	; 0x38
 8001442:	e7b7      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001444:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001446:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800144a:	0055      	lsls	r5, r2, #1
 800144c:	3d5a      	subs	r5, #90	; 0x5a
 800144e:	221f      	movs	r2, #31
 8001450:	40aa      	lsls	r2, r5
 8001452:	ea24 0202 	bic.w	r2, r4, r2
 8001456:	680c      	ldr	r4, [r1, #0]
 8001458:	fa04 f505 	lsl.w	r5, r4, r5
 800145c:	432a      	orrs	r2, r5
 800145e:	63c2      	str	r2, [r0, #60]	; 0x3c
 8001460:	e7a8      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001462:	6944      	ldr	r4, [r0, #20]
 8001464:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001468:	2507      	movs	r5, #7
 800146a:	4095      	lsls	r5, r2
 800146c:	ea24 0405 	bic.w	r4, r4, r5
 8001470:	688d      	ldr	r5, [r1, #8]
 8001472:	fa05 f202 	lsl.w	r2, r5, r2
 8001476:	4322      	orrs	r2, r4
 8001478:	6142      	str	r2, [r0, #20]
 800147a:	e7b0      	b.n	80013de <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 800147c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800147e:	4d9f      	ldr	r5, [pc, #636]	; (80016fc <HAL_ADC_ConfigChannel+0x38c>)
 8001480:	4005      	ands	r5, r0
 8001482:	6808      	ldr	r0, [r1, #0]
 8001484:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001488:	4315      	orrs	r5, r2
 800148a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800148e:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	6882      	ldr	r2, [r0, #8]
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	2a01      	cmp	r2, #1
 800149a:	d075      	beq.n	8001588 <HAL_ADC_ConfigChannel+0x218>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800149c:	68ca      	ldr	r2, [r1, #12]
 800149e:	2a01      	cmp	r2, #1
 80014a0:	d078      	beq.n	8001594 <HAL_ADC_ConfigChannel+0x224>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014a2:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 80014a6:	680d      	ldr	r5, [r1, #0]
 80014a8:	2401      	movs	r4, #1
 80014aa:	40ac      	lsls	r4, r5
 80014ac:	ea22 0204 	bic.w	r2, r2, r4
 80014b0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80014ba:	f000 8096 	beq.w	80015ea <HAL_ADC_ConfigChannel+0x27a>
 80014be:	4890      	ldr	r0, [pc, #576]	; (8001700 <HAL_ADC_ConfigChannel+0x390>)
 80014c0:	4282      	cmp	r2, r0
 80014c2:	f000 8090 	beq.w	80015e6 <HAL_ADC_ConfigChannel+0x276>
 80014c6:	4c8f      	ldr	r4, [pc, #572]	; (8001704 <HAL_ADC_ConfigChannel+0x394>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014c8:	6808      	ldr	r0, [r1, #0]
 80014ca:	2810      	cmp	r0, #16
 80014cc:	f000 808f 	beq.w	80015ee <HAL_ADC_ConfigChannel+0x27e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014d0:	2811      	cmp	r0, #17
 80014d2:	f000 80a0 	beq.w	8001616 <HAL_ADC_ConfigChannel+0x2a6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014d6:	2812      	cmp	r0, #18
 80014d8:	f000 80a2 	beq.w	8001620 <HAL_ADC_ConfigChannel+0x2b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014dc:	2000      	movs	r0, #0
 80014de:	e105      	b.n	80016ec <HAL_ADC_ConfigChannel+0x37c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80014e0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80014e2:	4d86      	ldr	r5, [pc, #536]	; (80016fc <HAL_ADC_ConfigChannel+0x38c>)
 80014e4:	4005      	ands	r5, r0
 80014e6:	6808      	ldr	r0, [r1, #0]
 80014e8:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80014ec:	4315      	orrs	r5, r2
 80014ee:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80014f2:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 80014f4:	e7cc      	b.n	8001490 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014f6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80014f8:	4d80      	ldr	r5, [pc, #512]	; (80016fc <HAL_ADC_ConfigChannel+0x38c>)
 80014fa:	4005      	ands	r5, r0
 80014fc:	6808      	ldr	r0, [r1, #0]
 80014fe:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001502:	4315      	orrs	r5, r2
 8001504:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001508:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 800150a:	e7c1      	b.n	8001490 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800150c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800150e:	487b      	ldr	r0, [pc, #492]	; (80016fc <HAL_ADC_ConfigChannel+0x38c>)
 8001510:	4028      	ands	r0, r5
 8001512:	680d      	ldr	r5, [r1, #0]
 8001514:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8001518:	4302      	orrs	r2, r0
 800151a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800151e:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001520:	e7b6      	b.n	8001490 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001522:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001524:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001528:	6808      	ldr	r0, [r1, #0]
 800152a:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 800152e:	d01c      	beq.n	800156a <HAL_ADC_ConfigChannel+0x1fa>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001534:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001538:	680c      	ldr	r4, [r1, #0]
 800153a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800153e:	d019      	beq.n	8001574 <HAL_ADC_ConfigChannel+0x204>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001544:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001548:	680c      	ldr	r4, [r1, #0]
 800154a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800154e:	d016      	beq.n	800157e <HAL_ADC_ConfigChannel+0x20e>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001554:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001558:	680c      	ldr	r4, [r1, #0]
 800155a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800155e:	d197      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001560:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001562:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001566:	66c2      	str	r2, [r0, #108]	; 0x6c
 8001568:	e792      	b.n	8001490 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800156a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800156c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001570:	6622      	str	r2, [r4, #96]	; 0x60
 8001572:	e7dd      	b.n	8001530 <HAL_ADC_ConfigChannel+0x1c0>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001574:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001576:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800157a:	6642      	str	r2, [r0, #100]	; 0x64
 800157c:	e7e0      	b.n	8001540 <HAL_ADC_ConfigChannel+0x1d0>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800157e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001580:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001584:	6682      	str	r2, [r0, #104]	; 0x68
 8001586:	e7e3      	b.n	8001550 <HAL_ADC_ConfigChannel+0x1e0>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001588:	6802      	ldr	r2, [r0, #0]
 800158a:	f012 0f01 	tst.w	r2, #1
 800158e:	d085      	beq.n	800149c <HAL_ADC_ConfigChannel+0x12c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2000      	movs	r0, #0
 8001592:	e0ab      	b.n	80016ec <HAL_ADC_ConfigChannel+0x37c>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001594:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001598:	680d      	ldr	r5, [r1, #0]
 800159a:	2401      	movs	r4, #1
 800159c:	40ac      	lsls	r4, r5
 800159e:	4322      	orrs	r2, r4
 80015a0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80015a4:	680a      	ldr	r2, [r1, #0]
 80015a6:	2a09      	cmp	r2, #9
 80015a8:	d90e      	bls.n	80015c8 <HAL_ADC_ConfigChannel+0x258>
        MODIFY_REG(hadc->Instance->SMPR2,
 80015aa:	681d      	ldr	r5, [r3, #0]
 80015ac:	69a8      	ldr	r0, [r5, #24]
 80015ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80015b2:	3a1b      	subs	r2, #27
 80015b4:	2407      	movs	r4, #7
 80015b6:	4094      	lsls	r4, r2
 80015b8:	ea20 0004 	bic.w	r0, r0, r4
 80015bc:	688c      	ldr	r4, [r1, #8]
 80015be:	fa04 f202 	lsl.w	r2, r4, r2
 80015c2:	4302      	orrs	r2, r0
 80015c4:	61aa      	str	r2, [r5, #24]
 80015c6:	e775      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x144>
        MODIFY_REG(hadc->Instance->SMPR1,
 80015c8:	681d      	ldr	r5, [r3, #0]
 80015ca:	6968      	ldr	r0, [r5, #20]
 80015cc:	3201      	adds	r2, #1
 80015ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80015d2:	2407      	movs	r4, #7
 80015d4:	4094      	lsls	r4, r2
 80015d6:	ea20 0004 	bic.w	r0, r0, r4
 80015da:	688c      	ldr	r4, [r1, #8]
 80015dc:	fa04 f202 	lsl.w	r2, r4, r2
 80015e0:	4302      	orrs	r2, r0
 80015e2:	616a      	str	r2, [r5, #20]
 80015e4:	e766      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x144>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e6:	4c48      	ldr	r4, [pc, #288]	; (8001708 <HAL_ADC_ConfigChannel+0x398>)
 80015e8:	e76e      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x158>
 80015ea:	4c47      	ldr	r4, [pc, #284]	; (8001708 <HAL_ADC_ConfigChannel+0x398>)
 80015ec:	e76c      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x158>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015ee:	68a5      	ldr	r5, [r4, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015f0:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80015f4:	f47f af6c 	bne.w	80014d0 <HAL_ADC_ConfigChannel+0x160>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015f8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80015fc:	d016      	beq.n	800162c <HAL_ADC_ConfigChannel+0x2bc>
 80015fe:	4840      	ldr	r0, [pc, #256]	; (8001700 <HAL_ADC_ConfigChannel+0x390>)
 8001600:	4282      	cmp	r2, r0
 8001602:	d02c      	beq.n	800165e <HAL_ADC_ConfigChannel+0x2ee>
 8001604:	4841      	ldr	r0, [pc, #260]	; (800170c <HAL_ADC_ConfigChannel+0x39c>)
 8001606:	4282      	cmp	r2, r0
 8001608:	d02d      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x2f6>
 800160a:	4841      	ldr	r0, [pc, #260]	; (8001710 <HAL_ADC_ConfigChannel+0x3a0>)
 800160c:	4282      	cmp	r2, r0
 800160e:	d02d      	beq.n	800166c <HAL_ADC_ConfigChannel+0x2fc>
 8001610:	2200      	movs	r2, #0
 8001612:	9202      	str	r2, [sp, #8]
 8001614:	e00d      	b.n	8001632 <HAL_ADC_ConfigChannel+0x2c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001616:	68a5      	ldr	r5, [r4, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001618:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 800161c:	d0ec      	beq.n	80015f8 <HAL_ADC_ConfigChannel+0x288>
 800161e:	e75a      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x166>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001620:	68a0      	ldr	r0, [r4, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001622:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8001626:	d0e7      	beq.n	80015f8 <HAL_ADC_ConfigChannel+0x288>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001628:	2000      	movs	r0, #0
 800162a:	e05f      	b.n	80016ec <HAL_ADC_ConfigChannel+0x37c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800162c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001630:	9202      	str	r2, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	6882      	ldr	r2, [r0, #8]
 8001636:	f002 0203 	and.w	r2, r2, #3
 800163a:	2a01      	cmp	r2, #1
 800163c:	d019      	beq.n	8001672 <HAL_ADC_ConfigChannel+0x302>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800163e:	9a02      	ldr	r2, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001640:	b122      	cbz	r2, 800164c <HAL_ADC_ConfigChannel+0x2dc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001642:	6895      	ldr	r5, [r2, #8]
 8001644:	f005 0503 	and.w	r5, r5, #3
 8001648:	2d01      	cmp	r5, #1
 800164a:	d01c      	beq.n	8001686 <HAL_ADC_ConfigChannel+0x316>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800164c:	680a      	ldr	r2, [r1, #0]
 800164e:	2a10      	cmp	r2, #16
 8001650:	d01e      	beq.n	8001690 <HAL_ADC_ConfigChannel+0x320>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001652:	2a11      	cmp	r2, #17
 8001654:	d036      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x354>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001656:	2a12      	cmp	r2, #18
 8001658:	d03d      	beq.n	80016d6 <HAL_ADC_ConfigChannel+0x366>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800165a:	2000      	movs	r0, #0
 800165c:	e046      	b.n	80016ec <HAL_ADC_ConfigChannel+0x37c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800165e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001662:	9202      	str	r2, [sp, #8]
 8001664:	e7e5      	b.n	8001632 <HAL_ADC_ConfigChannel+0x2c2>
 8001666:	4a2a      	ldr	r2, [pc, #168]	; (8001710 <HAL_ADC_ConfigChannel+0x3a0>)
 8001668:	9202      	str	r2, [sp, #8]
 800166a:	e7e2      	b.n	8001632 <HAL_ADC_ConfigChannel+0x2c2>
 800166c:	4a27      	ldr	r2, [pc, #156]	; (800170c <HAL_ADC_ConfigChannel+0x39c>)
 800166e:	9202      	str	r2, [sp, #8]
 8001670:	e7df      	b.n	8001632 <HAL_ADC_ConfigChannel+0x2c2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001672:	6802      	ldr	r2, [r0, #0]
 8001674:	f012 0f01 	tst.w	r2, #1
 8001678:	d0e1      	beq.n	800163e <HAL_ADC_ConfigChannel+0x2ce>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800167c:	f042 0220 	orr.w	r2, r2, #32
 8001680:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8001682:	2001      	movs	r0, #1
 8001684:	e032      	b.n	80016ec <HAL_ADC_ConfigChannel+0x37c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	f012 0f01 	tst.w	r2, #1
 800168c:	d1f5      	bne.n	800167a <HAL_ADC_ConfigChannel+0x30a>
 800168e:	e7dd      	b.n	800164c <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001690:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001694:	d1dd      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x2e2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001696:	68a2      	ldr	r2, [r4, #8]
 8001698:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800169c:	60a2      	str	r2, [r4, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800169e:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_ADC_ConfigChannel+0x3a4>)
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	491d      	ldr	r1, [pc, #116]	; (8001718 <HAL_ADC_ConfigChannel+0x3a8>)
 80016a4:	fba1 1202 	umull	r1, r2, r1, r2
 80016a8:	0c92      	lsrs	r2, r2, #18
 80016aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80016ae:	0051      	lsls	r1, r2, #1
 80016b0:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80016b2:	e002      	b.n	80016ba <HAL_ADC_ConfigChannel+0x34a>
            wait_loop_index--;
 80016b4:	9a01      	ldr	r2, [sp, #4]
 80016b6:	3a01      	subs	r2, #1
 80016b8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80016ba:	9a01      	ldr	r2, [sp, #4]
 80016bc:	2a00      	cmp	r2, #0
 80016be:	d1f9      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x344>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c0:	2000      	movs	r0, #0
 80016c2:	e013      	b.n	80016ec <HAL_ADC_ConfigChannel+0x37c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80016c4:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80016c8:	d1c5      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x2e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80016ca:	68a2      	ldr	r2, [r4, #8]
 80016cc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80016d0:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d2:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80016d4:	e00a      	b.n	80016ec <HAL_ADC_ConfigChannel+0x37c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80016d6:	68a2      	ldr	r2, [r4, #8]
 80016d8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80016dc:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016de:	2000      	movs	r0, #0
 80016e0:	e004      	b.n	80016ec <HAL_ADC_ConfigChannel+0x37c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e4:	f042 0220 	orr.w	r2, r2, #32
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80016f2:	b016      	add	sp, #88	; 0x58
 80016f4:	bc30      	pop	{r4, r5}
 80016f6:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80016f8:	2002      	movs	r0, #2
 80016fa:	e7fa      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x382>
 80016fc:	83fff000 	.word	0x83fff000
 8001700:	50000100 	.word	0x50000100
 8001704:	50000700 	.word	0x50000700
 8001708:	50000300 	.word	0x50000300
 800170c:	50000400 	.word	0x50000400
 8001710:	50000500 	.word	0x50000500
 8001714:	20000004 	.word	0x20000004
 8001718:	431bde83 	.word	0x431bde83

0800171c <HAL_ADCEx_MultiModeConfigChannel>:
{
 800171c:	b470      	push	{r4, r5, r6}
 800171e:	b095      	sub	sp, #84	; 0x54
 8001720:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001722:	6802      	ldr	r2, [r0, #0]
 8001724:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001728:	d00b      	beq.n	8001742 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800172a:	484d      	ldr	r0, [pc, #308]	; (8001860 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800172c:	4282      	cmp	r2, r0
 800172e:	d04b      	beq.n	80017c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001730:	484c      	ldr	r0, [pc, #304]	; (8001864 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001732:	4282      	cmp	r2, r0
 8001734:	d04c      	beq.n	80017d0 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8001736:	484c      	ldr	r0, [pc, #304]	; (8001868 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001738:	4282      	cmp	r2, r0
 800173a:	d04c      	beq.n	80017d6 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 800173c:	2200      	movs	r2, #0
 800173e:	9200      	str	r2, [sp, #0]
 8001740:	e002      	b.n	8001748 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8001742:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001746:	9200      	str	r2, [sp, #0]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001748:	9a00      	ldr	r2, [sp, #0]
 800174a:	2a00      	cmp	r2, #0
 800174c:	f000 8084 	beq.w	8001858 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
  __HAL_LOCK(hadc);
 8001750:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
 8001754:	2801      	cmp	r0, #1
 8001756:	f000 8081 	beq.w	800185c <HAL_ADCEx_MultiModeConfigChannel+0x140>
 800175a:	2001      	movs	r0, #1
 800175c:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	6884      	ldr	r4, [r0, #8]
 8001764:	f014 0f04 	tst.w	r4, #4
 8001768:	d16b      	bne.n	8001842 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800176a:	6894      	ldr	r4, [r2, #8]
 800176c:	f014 0f04 	tst.w	r4, #4
 8001770:	d167      	bne.n	8001842 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001772:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001776:	d033      	beq.n	80017e0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8001778:	4c39      	ldr	r4, [pc, #228]	; (8001860 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800177a:	42a0      	cmp	r0, r4
 800177c:	d02e      	beq.n	80017dc <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 800177e:	483b      	ldr	r0, [pc, #236]	; (800186c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001780:	680c      	ldr	r4, [r1, #0]
 8001782:	2c00      	cmp	r4, #0
 8001784:	d03a      	beq.n	80017fc <HAL_ADCEx_MultiModeConfigChannel+0xe0>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001786:	6884      	ldr	r4, [r0, #8]
 8001788:	f424 4460 	bic.w	r4, r4, #57344	; 0xe000
 800178c:	684d      	ldr	r5, [r1, #4]
 800178e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
 8001792:	ea45 3546 	orr.w	r5, r5, r6, lsl #13
 8001796:	432c      	orrs	r4, r5
 8001798:	6084      	str	r4, [r0, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800179a:	681d      	ldr	r5, [r3, #0]
 800179c:	68ac      	ldr	r4, [r5, #8]
 800179e:	f004 0403 	and.w	r4, r4, #3
 80017a2:	2c01      	cmp	r4, #1
 80017a4:	d01e      	beq.n	80017e4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80017a6:	6894      	ldr	r4, [r2, #8]
 80017a8:	f004 0403 	and.w	r4, r4, #3
 80017ac:	2c01      	cmp	r4, #1
 80017ae:	d01f      	beq.n	80017f0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80017b0:	6882      	ldr	r2, [r0, #8]
 80017b2:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80017b6:	f022 020f 	bic.w	r2, r2, #15
 80017ba:	680c      	ldr	r4, [r1, #0]
 80017bc:	6889      	ldr	r1, [r1, #8]
 80017be:	4321      	orrs	r1, r4
 80017c0:	430a      	orrs	r2, r1
 80017c2:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c4:	2000      	movs	r0, #0
 80017c6:	e041      	b.n	800184c <HAL_ADCEx_MultiModeConfigChannel+0x130>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017cc:	9200      	str	r2, [sp, #0]
 80017ce:	e7bb      	b.n	8001748 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 80017d0:	4a25      	ldr	r2, [pc, #148]	; (8001868 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80017d2:	9200      	str	r2, [sp, #0]
 80017d4:	e7b8      	b.n	8001748 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 80017d6:	4a23      	ldr	r2, [pc, #140]	; (8001864 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	e7b5      	b.n	8001748 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017dc:	4824      	ldr	r0, [pc, #144]	; (8001870 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80017de:	e7cf      	b.n	8001780 <HAL_ADCEx_MultiModeConfigChannel+0x64>
 80017e0:	4823      	ldr	r0, [pc, #140]	; (8001870 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80017e2:	e7cd      	b.n	8001780 <HAL_ADCEx_MultiModeConfigChannel+0x64>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017e4:	682c      	ldr	r4, [r5, #0]
 80017e6:	f014 0f01 	tst.w	r4, #1
 80017ea:	d0dc      	beq.n	80017a6 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ec:	2000      	movs	r0, #0
 80017ee:	e02d      	b.n	800184c <HAL_ADCEx_MultiModeConfigChannel+0x130>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	f012 0f01 	tst.w	r2, #1
 80017f6:	d0db      	beq.n	80017b0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2000      	movs	r0, #0
 80017fa:	e027      	b.n	800184c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80017fc:	6881      	ldr	r1, [r0, #8]
 80017fe:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8001802:	6081      	str	r1, [r0, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001804:	681c      	ldr	r4, [r3, #0]
 8001806:	68a1      	ldr	r1, [r4, #8]
 8001808:	f001 0103 	and.w	r1, r1, #3
 800180c:	2901      	cmp	r1, #1
 800180e:	d00c      	beq.n	800182a <HAL_ADCEx_MultiModeConfigChannel+0x10e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001810:	6891      	ldr	r1, [r2, #8]
 8001812:	f001 0103 	and.w	r1, r1, #3
 8001816:	2901      	cmp	r1, #1
 8001818:	d00d      	beq.n	8001836 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800181a:	6882      	ldr	r2, [r0, #8]
 800181c:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001820:	f022 020f 	bic.w	r2, r2, #15
 8001824:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001826:	2000      	movs	r0, #0
 8001828:	e010      	b.n	800184c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800182a:	6821      	ldr	r1, [r4, #0]
 800182c:	f011 0f01 	tst.w	r1, #1
 8001830:	d0ee      	beq.n	8001810 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001832:	2000      	movs	r0, #0
 8001834:	e00a      	b.n	800184c <HAL_ADCEx_MultiModeConfigChannel+0x130>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	f012 0f01 	tst.w	r2, #1
 800183c:	d0ed      	beq.n	800181a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183e:	2000      	movs	r0, #0
 8001840:	e004      	b.n	800184c <HAL_ADCEx_MultiModeConfigChannel+0x130>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001844:	f042 0220 	orr.w	r2, r2, #32
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 800184a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 8001852:	b015      	add	sp, #84	; 0x54
 8001854:	bc70      	pop	{r4, r5, r6}
 8001856:	4770      	bx	lr
    return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
 800185a:	e7fa      	b.n	8001852 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  __HAL_LOCK(hadc);
 800185c:	2002      	movs	r0, #2
 800185e:	e7f8      	b.n	8001852 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8001860:	50000100 	.word	0x50000100
 8001864:	50000400 	.word	0x50000400
 8001868:	50000500 	.word	0x50000500
 800186c:	50000700 	.word	0x50000700
 8001870:	50000300 	.word	0x50000300

08001874 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001876:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001878:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	0200      	lsls	r0, r0, #8
 8001882:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001886:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001888:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800188c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001890:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_NVIC_SetPriority+0x60>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a2:	f1c3 0407 	rsb	r4, r3, #7
 80018a6:	2c04      	cmp	r4, #4
 80018a8:	bf28      	it	cs
 80018aa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ac:	1d1d      	adds	r5, r3, #4
 80018ae:	2d06      	cmp	r5, #6
 80018b0:	d918      	bls.n	80018e4 <HAL_NVIC_SetPriority+0x4c>
 80018b2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 35ff 	mov.w	r5, #4294967295
 80018b8:	fa05 f404 	lsl.w	r4, r5, r4
 80018bc:	ea21 0104 	bic.w	r1, r1, r4
 80018c0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c2:	fa05 f303 	lsl.w	r3, r5, r3
 80018c6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ca:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80018cc:	2800      	cmp	r0, #0
 80018ce:	db0b      	blt.n	80018e8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	0109      	lsls	r1, r1, #4
 80018d2:	b2c9      	uxtb	r1, r1
 80018d4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80018d8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80018dc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018e0:	bc30      	pop	{r4, r5}
 80018e2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e4:	2300      	movs	r3, #0
 80018e6:	e7e5      	b.n	80018b4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	f000 000f 	and.w	r0, r0, #15
 80018ec:	0109      	lsls	r1, r1, #4
 80018ee:	b2c9      	uxtb	r1, r1
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <HAL_NVIC_SetPriority+0x64>)
 80018f2:	5419      	strb	r1, [r3, r0]
 80018f4:	e7f4      	b.n	80018e0 <HAL_NVIC_SetPriority+0x48>
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	e000ed14 	.word	0xe000ed14

08001900 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001900:	2800      	cmp	r0, #0
 8001902:	db07      	blt.n	8001914 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001904:	f000 021f 	and.w	r2, r0, #31
 8001908:	0940      	lsrs	r0, r0, #5
 800190a:	2301      	movs	r3, #1
 800190c:	4093      	lsls	r3, r2
 800190e:	4a02      	ldr	r2, [pc, #8]	; (8001918 <HAL_NVIC_EnableIRQ+0x18>)
 8001910:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100

0800191c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	3801      	subs	r0, #1
 800191e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001922:	d20a      	bcs.n	800193a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_SYSTICK_Config+0x24>)
 8001926:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_SYSTICK_Config+0x28>)
 800192a:	21f0      	movs	r1, #240	; 0xf0
 800192c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	2000      	movs	r0, #0
 8001932:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001948:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800194a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800194c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800194e:	2401      	movs	r4, #1
 8001950:	40b4      	lsls	r4, r6
 8001952:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001954:	6804      	ldr	r4, [r0, #0]
 8001956:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001958:	6843      	ldr	r3, [r0, #4]
 800195a:	2b10      	cmp	r3, #16
 800195c:	d005      	beq.n	800196a <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800195e:	6803      	ldr	r3, [r0, #0]
 8001960:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001962:	6803      	ldr	r3, [r0, #0]
 8001964:	60da      	str	r2, [r3, #12]
  }
}
 8001966:	bc70      	pop	{r4, r5, r6}
 8001968:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800196a:	6803      	ldr	r3, [r0, #0]
 800196c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800196e:	6803      	ldr	r3, [r0, #0]
 8001970:	60d9      	str	r1, [r3, #12]
 8001972:	e7f8      	b.n	8001966 <DMA_SetConfig+0x1e>

08001974 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001974:	6802      	ldr	r2, [r0, #0]
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <DMA_CalcBaseAndBitshift+0x34>)
 8001978:	429a      	cmp	r2, r3
 800197a:	d90a      	bls.n	8001992 <DMA_CalcBaseAndBitshift+0x1e>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <DMA_CalcBaseAndBitshift+0x38>)
 800197e:	4413      	add	r3, r2
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <DMA_CalcBaseAndBitshift+0x3c>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <DMA_CalcBaseAndBitshift+0x40>)
 800198e:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001990:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <DMA_CalcBaseAndBitshift+0x44>)
 8001994:	4413      	add	r3, r2
 8001996:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <DMA_CalcBaseAndBitshift+0x3c>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <DMA_CalcBaseAndBitshift+0x48>)
 80019a4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80019a6:	4770      	bx	lr
 80019a8:	40020407 	.word	0x40020407
 80019ac:	bffdfbf8 	.word	0xbffdfbf8
 80019b0:	cccccccd 	.word	0xcccccccd
 80019b4:	40020400 	.word	0x40020400
 80019b8:	bffdfff8 	.word	0xbffdfff8
 80019bc:	40020000 	.word	0x40020000

080019c0 <HAL_DMA_Init>:
  if(NULL == hdma)
 80019c0:	b320      	cbz	r0, 8001a0c <HAL_DMA_Init+0x4c>
{ 
 80019c2:	b510      	push	{r4, lr}
 80019c4:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c6:	2302      	movs	r3, #2
 80019c8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80019cc:	6801      	ldr	r1, [r0, #0]
 80019ce:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019d0:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80019d4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80019d8:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019da:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 80019dc:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019de:	68e0      	ldr	r0, [r4, #12]
 80019e0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e2:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e6:	6960      	ldr	r0, [r4, #20]
 80019e8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ea:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ec:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ee:	69e0      	ldr	r0, [r4, #28]
 80019f0:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80019f2:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80019f4:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff ffbc 	bl	8001974 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fc:	2000      	movs	r0, #0
 80019fe:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001a06:	f884 0020 	strb.w	r0, [r4, #32]
}  
 8001a0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a0c:	2001      	movs	r0, #1
}  
 8001a0e:	4770      	bx	lr

08001a10 <HAL_DMA_Start_IT>:
{
 8001a10:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001a12:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001a16:	2c01      	cmp	r4, #1
 8001a18:	d032      	beq.n	8001a80 <HAL_DMA_Start_IT+0x70>
 8001a1a:	2401      	movs	r4, #1
 8001a1c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a20:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001a24:	2c01      	cmp	r4, #1
 8001a26:	d004      	beq.n	8001a32 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001a2e:	2002      	movs	r0, #2
} 
 8001a30:	bd38      	pop	{r3, r4, r5, pc}
 8001a32:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001a34:	2002      	movs	r0, #2
 8001a36:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a3e:	6825      	ldr	r5, [r4, #0]
 8001a40:	6828      	ldr	r0, [r5, #0]
 8001a42:	f020 0001 	bic.w	r0, r0, #1
 8001a46:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff ff7d 	bl	8001948 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001a4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a50:	b15b      	cbz	r3, 8001a6a <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a52:	6822      	ldr	r2, [r4, #0]
 8001a54:	6813      	ldr	r3, [r2, #0]
 8001a56:	f043 030e 	orr.w	r3, r3, #14
 8001a5a:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001a5c:	6822      	ldr	r2, [r4, #0]
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001a66:	2000      	movs	r0, #0
 8001a68:	e7e2      	b.n	8001a30 <HAL_DMA_Start_IT+0x20>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001a6a:	6822      	ldr	r2, [r4, #0]
 8001a6c:	6813      	ldr	r3, [r2, #0]
 8001a6e:	f043 030a 	orr.w	r3, r3, #10
 8001a72:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a74:	6822      	ldr	r2, [r4, #0]
 8001a76:	6813      	ldr	r3, [r2, #0]
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e7ed      	b.n	8001a5c <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001a80:	2002      	movs	r0, #2
 8001a82:	e7d5      	b.n	8001a30 <HAL_DMA_Start_IT+0x20>

08001a84 <HAL_DMA_IRQHandler>:
{
 8001a84:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a86:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001a88:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001a8a:	6804      	ldr	r4, [r0, #0]
 8001a8c:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a8e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001a90:	2304      	movs	r3, #4
 8001a92:	408b      	lsls	r3, r1
 8001a94:	4213      	tst	r3, r2
 8001a96:	d013      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x3c>
 8001a98:	f015 0f04 	tst.w	r5, #4
 8001a9c:	d010      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	f013 0f20 	tst.w	r3, #32
 8001aa4:	d103      	bne.n	8001aae <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	f023 0304 	bic.w	r3, r3, #4
 8001aac:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001aae:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001ab0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	408b      	lsls	r3, r1
 8001ab6:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ab8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001aba:	b103      	cbz	r3, 8001abe <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 8001abc:	4798      	blx	r3
}  
 8001abe:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	408b      	lsls	r3, r1
 8001ac4:	4213      	tst	r3, r2
 8001ac6:	d01a      	beq.n	8001afe <HAL_DMA_IRQHandler+0x7a>
 8001ac8:	f015 0f02 	tst.w	r5, #2
 8001acc:	d017      	beq.n	8001afe <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	f013 0f20 	tst.w	r3, #32
 8001ad4:	d106      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	f023 030a 	bic.w	r3, r3, #10
 8001adc:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ae4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001ae6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001ae8:	2302      	movs	r3, #2
 8001aea:	408b      	lsls	r3, r1
 8001aec:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001aee:	2300      	movs	r3, #0
 8001af0:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001af4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0e1      	beq.n	8001abe <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8001afa:	4798      	blx	r3
 8001afc:	e7df      	b.n	8001abe <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001afe:	2308      	movs	r3, #8
 8001b00:	fa03 f101 	lsl.w	r1, r3, r1
 8001b04:	4211      	tst	r1, r2
 8001b06:	d0da      	beq.n	8001abe <HAL_DMA_IRQHandler+0x3a>
 8001b08:	f015 0f08 	tst.w	r5, #8
 8001b0c:	d0d7      	beq.n	8001abe <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	f023 030e 	bic.w	r3, r3, #14
 8001b14:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b16:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001b18:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	fa03 f202 	lsl.w	r2, r3, r2
 8001b20:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b22:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001b24:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001b2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0c4      	beq.n	8001abe <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8001b34:	4798      	blx	r3
}  
 8001b36:	e7c2      	b.n	8001abe <HAL_DMA_IRQHandler+0x3a>

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b4f0      	push	{r4, r5, r6, r7}
 8001b3a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001b3c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3e:	e036      	b.n	8001bae <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b40:	2406      	movs	r4, #6
 8001b42:	e000      	b.n	8001b46 <HAL_GPIO_Init+0xe>
 8001b44:	2400      	movs	r4, #0
 8001b46:	40b4      	lsls	r4, r6
 8001b48:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b4a:	3502      	adds	r5, #2
 8001b4c:	4e61      	ldr	r6, [pc, #388]	; (8001cd4 <HAL_GPIO_Init+0x19c>)
 8001b4e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b52:	4c61      	ldr	r4, [pc, #388]	; (8001cd8 <HAL_GPIO_Init+0x1a0>)
 8001b54:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001b56:	43d4      	mvns	r4, r2
 8001b58:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b5c:	684f      	ldr	r7, [r1, #4]
 8001b5e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001b62:	d001      	beq.n	8001b68 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8001b64:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001b68:	4d5b      	ldr	r5, [pc, #364]	; (8001cd8 <HAL_GPIO_Init+0x1a0>)
 8001b6a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001b6c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001b6e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b72:	684f      	ldr	r7, [r1, #4]
 8001b74:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001b78:	d001      	beq.n	8001b7e <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8001b7a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001b7e:	4d56      	ldr	r5, [pc, #344]	; (8001cd8 <HAL_GPIO_Init+0x1a0>)
 8001b80:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b82:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001b84:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b88:	684f      	ldr	r7, [r1, #4]
 8001b8a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001b8e:	d001      	beq.n	8001b94 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8001b90:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001b94:	4d50      	ldr	r5, [pc, #320]	; (8001cd8 <HAL_GPIO_Init+0x1a0>)
 8001b96:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001b98:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001b9a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9c:	684e      	ldr	r6, [r1, #4]
 8001b9e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001ba2:	d001      	beq.n	8001ba8 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8001ba4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001ba8:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <HAL_GPIO_Init+0x1a0>)
 8001baa:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8001bac:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bae:	680a      	ldr	r2, [r1, #0]
 8001bb0:	fa32 f403 	lsrs.w	r4, r2, r3
 8001bb4:	f000 808b 	beq.w	8001cce <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb8:	2401      	movs	r4, #1
 8001bba:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001bbc:	4022      	ands	r2, r4
 8001bbe:	d0f5      	beq.n	8001bac <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc0:	684d      	ldr	r5, [r1, #4]
 8001bc2:	2d02      	cmp	r5, #2
 8001bc4:	d001      	beq.n	8001bca <HAL_GPIO_Init+0x92>
 8001bc6:	2d12      	cmp	r5, #18
 8001bc8:	d110      	bne.n	8001bec <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3u];
 8001bca:	08de      	lsrs	r6, r3, #3
 8001bcc:	3608      	adds	r6, #8
 8001bce:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd2:	f003 0507 	and.w	r5, r3, #7
 8001bd6:	00af      	lsls	r7, r5, #2
 8001bd8:	250f      	movs	r5, #15
 8001bda:	40bd      	lsls	r5, r7
 8001bdc:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001be0:	690d      	ldr	r5, [r1, #16]
 8001be2:	40bd      	lsls	r5, r7
 8001be4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001be8:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001bec:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bee:	005f      	lsls	r7, r3, #1
 8001bf0:	2503      	movs	r5, #3
 8001bf2:	40bd      	lsls	r5, r7
 8001bf4:	43ed      	mvns	r5, r5
 8001bf6:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfa:	684e      	ldr	r6, [r1, #4]
 8001bfc:	f006 0603 	and.w	r6, r6, #3
 8001c00:	40be      	lsls	r6, r7
 8001c02:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8001c06:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c08:	684e      	ldr	r6, [r1, #4]
 8001c0a:	f106 3cff 	add.w	ip, r6, #4294967295
 8001c0e:	f1bc 0f01 	cmp.w	ip, #1
 8001c12:	d903      	bls.n	8001c1c <HAL_GPIO_Init+0xe4>
 8001c14:	2e11      	cmp	r6, #17
 8001c16:	d001      	beq.n	8001c1c <HAL_GPIO_Init+0xe4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c18:	2e12      	cmp	r6, #18
 8001c1a:	d110      	bne.n	8001c3e <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR;
 8001c1c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c1e:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c22:	68ce      	ldr	r6, [r1, #12]
 8001c24:	40be      	lsls	r6, r7
 8001c26:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8001c2a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c2c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c2e:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c32:	684e      	ldr	r6, [r1, #4]
 8001c34:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001c38:	409e      	lsls	r6, r3
 8001c3a:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8001c3c:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001c3e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c40:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c42:	688c      	ldr	r4, [r1, #8]
 8001c44:	40bc      	lsls	r4, r7
 8001c46:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001c48:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4a:	684c      	ldr	r4, [r1, #4]
 8001c4c:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001c50:	d0ac      	beq.n	8001bac <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4c22      	ldr	r4, [pc, #136]	; (8001cdc <HAL_GPIO_Init+0x1a4>)
 8001c54:	69a5      	ldr	r5, [r4, #24]
 8001c56:	f045 0501 	orr.w	r5, r5, #1
 8001c5a:	61a5      	str	r5, [r4, #24]
 8001c5c:	69a4      	ldr	r4, [r4, #24]
 8001c5e:	f004 0401 	and.w	r4, r4, #1
 8001c62:	9401      	str	r4, [sp, #4]
 8001c64:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c66:	089d      	lsrs	r5, r3, #2
 8001c68:	1cae      	adds	r6, r5, #2
 8001c6a:	4c1a      	ldr	r4, [pc, #104]	; (8001cd4 <HAL_GPIO_Init+0x19c>)
 8001c6c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c70:	f003 0403 	and.w	r4, r3, #3
 8001c74:	00a6      	lsls	r6, r4, #2
 8001c76:	240f      	movs	r4, #15
 8001c78:	40b4      	lsls	r4, r6
 8001c7a:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c7e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001c82:	f43f af5f 	beq.w	8001b44 <HAL_GPIO_Init+0xc>
 8001c86:	4c16      	ldr	r4, [pc, #88]	; (8001ce0 <HAL_GPIO_Init+0x1a8>)
 8001c88:	42a0      	cmp	r0, r4
 8001c8a:	d016      	beq.n	8001cba <HAL_GPIO_Init+0x182>
 8001c8c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c90:	42a0      	cmp	r0, r4
 8001c92:	d014      	beq.n	8001cbe <HAL_GPIO_Init+0x186>
 8001c94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c98:	42a0      	cmp	r0, r4
 8001c9a:	d012      	beq.n	8001cc2 <HAL_GPIO_Init+0x18a>
 8001c9c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ca0:	42a0      	cmp	r0, r4
 8001ca2:	d010      	beq.n	8001cc6 <HAL_GPIO_Init+0x18e>
 8001ca4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ca8:	42a0      	cmp	r0, r4
 8001caa:	d00e      	beq.n	8001cca <HAL_GPIO_Init+0x192>
 8001cac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001cb0:	42a0      	cmp	r0, r4
 8001cb2:	f43f af45 	beq.w	8001b40 <HAL_GPIO_Init+0x8>
 8001cb6:	2407      	movs	r4, #7
 8001cb8:	e745      	b.n	8001b46 <HAL_GPIO_Init+0xe>
 8001cba:	2401      	movs	r4, #1
 8001cbc:	e743      	b.n	8001b46 <HAL_GPIO_Init+0xe>
 8001cbe:	2402      	movs	r4, #2
 8001cc0:	e741      	b.n	8001b46 <HAL_GPIO_Init+0xe>
 8001cc2:	2403      	movs	r4, #3
 8001cc4:	e73f      	b.n	8001b46 <HAL_GPIO_Init+0xe>
 8001cc6:	2404      	movs	r4, #4
 8001cc8:	e73d      	b.n	8001b46 <HAL_GPIO_Init+0xe>
 8001cca:	2405      	movs	r4, #5
 8001ccc:	e73b      	b.n	8001b46 <HAL_GPIO_Init+0xe>
  }
}
 8001cce:	b002      	add	sp, #8
 8001cd0:	bcf0      	pop	{r4, r5, r6, r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	40010400 	.word	0x40010400
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48000400 	.word	0x48000400

08001ce4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	b90a      	cbnz	r2, 8001cea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001ce8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cea:	6181      	str	r1, [r0, #24]
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	f000 8319 	beq.w	8002328 <HAL_RCC_OscConfig+0x638>
{
 8001cf6:	b570      	push	{r4, r5, r6, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfc:	6803      	ldr	r3, [r0, #0]
 8001cfe:	f013 0f01 	tst.w	r3, #1
 8001d02:	d03d      	beq.n	8001d80 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d04:	4bb4      	ldr	r3, [pc, #720]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d10:	4bb1      	ldr	r3, [pc, #708]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1c:	6863      	ldr	r3, [r4, #4]
 8001d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d22:	d06a      	beq.n	8001dfa <HAL_RCC_OscConfig+0x10a>
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f040 808d 	bne.w	8001e44 <HAL_RCC_OscConfig+0x154>
 8001d2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d2e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e05f      	b.n	8001e04 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d44:	4ba4      	ldr	r3, [pc, #656]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d1e4      	bne.n	8001d1c <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d56:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5a:	4b9f      	ldr	r3, [pc, #636]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2201      	movs	r2, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	420b      	tst	r3, r1
 8001d76:	d003      	beq.n	8001d80 <HAL_RCC_OscConfig+0x90>
 8001d78:	6863      	ldr	r3, [r4, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 82d6 	beq.w	800232c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	f013 0f02 	tst.w	r3, #2
 8001d86:	f000 80c1 	beq.w	8001f0c <HAL_RCC_OscConfig+0x21c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d8a:	4b93      	ldr	r3, [pc, #588]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f013 0f0c 	tst.w	r3, #12
 8001d92:	f000 8097 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x1d4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d96:	4b90      	ldr	r3, [pc, #576]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	f000 8088 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x1c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da4:	68e3      	ldr	r3, [r4, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80ee 	beq.w	8001f88 <HAL_RCC_OscConfig+0x298>
 8001dac:	2201      	movs	r2, #1
 8001dae:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7fe fde9 	bl	8000998 <HAL_GetTick>
 8001dc6:	4605      	mov	r5, r0
 8001dc8:	2302      	movs	r3, #2
 8001dca:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b82      	ldr	r3, [pc, #520]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001dd0:	6819      	ldr	r1, [r3, #0]
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2201      	movs	r2, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	420b      	tst	r3, r1
 8001de8:	f040 80bf 	bne.w	8001f6a <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dec:	f7fe fdd4 	bl	8000998 <HAL_GetTick>
 8001df0:	1b40      	subs	r0, r0, r5
 8001df2:	2802      	cmp	r0, #2
 8001df4:	d9e8      	bls.n	8001dc8 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8001df6:	2003      	movs	r0, #3
 8001df8:	e29f      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfa:	4a77      	ldr	r2, [pc, #476]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001dfc:	6813      	ldr	r3, [r2, #0]
 8001dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e04:	6863      	ldr	r3, [r4, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d036      	beq.n	8001e78 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 8001e0a:	f7fe fdc5 	bl	8000998 <HAL_GetTick>
 8001e0e:	4605      	mov	r5, r0
 8001e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e14:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e18:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001e1a:	6819      	ldr	r1, [r3, #0]
 8001e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	420b      	tst	r3, r1
 8001e34:	d1a4      	bne.n	8001d80 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e36:	f7fe fdaf 	bl	8000998 <HAL_GetTick>
 8001e3a:	1b40      	subs	r0, r0, r5
 8001e3c:	2864      	cmp	r0, #100	; 0x64
 8001e3e:	d9e7      	bls.n	8001e10 <HAL_RCC_OscConfig+0x120>
            return HAL_TIMEOUT;
 8001e40:	2003      	movs	r0, #3
 8001e42:	e27a      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_OscConfig+0x16e>
 8001e4a:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e7d2      	b.n	8001e04 <HAL_RCC_OscConfig+0x114>
 8001e5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e62:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	e7c5      	b.n	8001e04 <HAL_RCC_OscConfig+0x114>
        tickstart = HAL_GetTick();
 8001e78:	f7fe fd8e 	bl	8000998 <HAL_GetTick>
 8001e7c:	4605      	mov	r5, r0
 8001e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e82:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	4b54      	ldr	r3, [pc, #336]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	420b      	tst	r3, r1
 8001ea2:	f43f af6d 	beq.w	8001d80 <HAL_RCC_OscConfig+0x90>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea6:	f7fe fd77 	bl	8000998 <HAL_GetTick>
 8001eaa:	1b40      	subs	r0, r0, r5
 8001eac:	2864      	cmp	r0, #100	; 0x64
 8001eae:	d9e6      	bls.n	8001e7e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	e242      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001eb4:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec0:	f47f af70 	bne.w	8001da4 <HAL_RCC_OscConfig+0xb4>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001ecc:	6819      	ldr	r1, [r3, #0]
 8001ece:	2302      	movs	r3, #2
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2201      	movs	r2, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	420b      	tst	r3, r1
 8001ee4:	d004      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x200>
 8001ee6:	68e3      	ldr	r3, [r4, #12]
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x200>
        return HAL_ERROR;
 8001eec:	2001      	movs	r0, #1
 8001eee:	e224      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef0:	4839      	ldr	r0, [pc, #228]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001ef2:	6803      	ldr	r3, [r0, #0]
 8001ef4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ef8:	6921      	ldr	r1, [r4, #16]
 8001efa:	22f8      	movs	r2, #248	; 0xf8
 8001efc:	fa92 f2a2 	rbit	r2, r2
 8001f00:	fab2 f282 	clz	r2, r2
 8001f04:	fa01 f202 	lsl.w	r2, r1, r2
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	f013 0f08 	tst.w	r3, #8
 8001f12:	f000 808d 	beq.w	8002030 <HAL_RCC_OscConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f16:	6963      	ldr	r3, [r4, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d061      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x2f0>
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f22:	fab2 f282 	clz	r2, r2
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_OscConfig+0x2ec>)
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7fe fd33 	bl	8000998 <HAL_GetTick>
 8001f32:	4605      	mov	r5, r0
 8001f34:	2302      	movs	r3, #2
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	fa93 f2a3 	rbit	r2, r3
 8001f3e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001f44:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2201      	movs	r2, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	420b      	tst	r3, r1
 8001f5a:	d169      	bne.n	8002030 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7fe fd1c 	bl	8000998 <HAL_GetTick>
 8001f60:	1b40      	subs	r0, r0, r5
 8001f62:	2802      	cmp	r0, #2
 8001f64:	d9e6      	bls.n	8001f34 <HAL_RCC_OscConfig+0x244>
        {
          return HAL_TIMEOUT;
 8001f66:	2003      	movs	r0, #3
 8001f68:	e1e7      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6a:	481b      	ldr	r0, [pc, #108]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001f6c:	6803      	ldr	r3, [r0, #0]
 8001f6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f72:	6921      	ldr	r1, [r4, #16]
 8001f74:	22f8      	movs	r2, #248	; 0xf8
 8001f76:	fa92 f2a2 	rbit	r2, r2
 8001f7a:	fab2 f282 	clz	r2, r2
 8001f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f82:	4313      	orrs	r3, r2
 8001f84:	6003      	str	r3, [r0, #0]
 8001f86:	e7c1      	b.n	8001f0c <HAL_RCC_OscConfig+0x21c>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fcfa 	bl	8000998 <HAL_GetTick>
 8001fa4:	4605      	mov	r5, r0
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_OscConfig+0x2e8>)
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	420b      	tst	r3, r1
 8001fc6:	d0a1      	beq.n	8001f0c <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7fe fce6 	bl	8000998 <HAL_GetTick>
 8001fcc:	1b40      	subs	r0, r0, r5
 8001fce:	2802      	cmp	r0, #2
 8001fd0:	d9e9      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x2b6>
            return HAL_TIMEOUT;
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	e1b1      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	10908120 	.word	0x10908120
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe6:	fab2 f282 	clz	r2, r2
 8001fea:	4bbf      	ldr	r3, [pc, #764]	; (80022e8 <HAL_RCC_OscConfig+0x5f8>)
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff4:	f7fe fcd0 	bl	8000998 <HAL_GetTick>
 8001ff8:	4605      	mov	r5, r0
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	fa93 f2a3 	rbit	r2, r3
 8002000:	fa93 f2a3 	rbit	r2, r3
 8002004:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	4ab8      	ldr	r2, [pc, #736]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 800200a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	2201      	movs	r2, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	420b      	tst	r3, r1
 8002020:	d006      	beq.n	8002030 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002022:	f7fe fcb9 	bl	8000998 <HAL_GetTick>
 8002026:	1b40      	subs	r0, r0, r5
 8002028:	2802      	cmp	r0, #2
 800202a:	d9e6      	bls.n	8001ffa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800202c:	2003      	movs	r0, #3
 800202e:	e184      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	f013 0f04 	tst.w	r3, #4
 8002036:	f000 80b3 	beq.w	80021a0 <HAL_RCC_OscConfig+0x4b0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203a:	4bac      	ldr	r3, [pc, #688]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002042:	d120      	bne.n	8002086 <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4ba9      	ldr	r3, [pc, #676]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 8002046:	69da      	ldr	r2, [r3, #28]
 8002048:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800204c:	61da      	str	r2, [r3, #28]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002058:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	4ba5      	ldr	r3, [pc, #660]	; (80022f0 <HAL_RCC_OscConfig+0x600>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002062:	d012      	beq.n	800208a <HAL_RCC_OscConfig+0x39a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	68a3      	ldr	r3, [r4, #8]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d023      	beq.n	80020b2 <HAL_RCC_OscConfig+0x3c2>
 800206a:	bb73      	cbnz	r3, 80020ca <HAL_RCC_OscConfig+0x3da>
 800206c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002070:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002074:	6a1a      	ldr	r2, [r3, #32]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	621a      	str	r2, [r3, #32]
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	f022 0204 	bic.w	r2, r2, #4
 8002082:	621a      	str	r2, [r3, #32]
 8002084:	e01a      	b.n	80020bc <HAL_RCC_OscConfig+0x3cc>
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2500      	movs	r5, #0
 8002088:	e7e7      	b.n	800205a <HAL_RCC_OscConfig+0x36a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208a:	4a99      	ldr	r2, [pc, #612]	; (80022f0 <HAL_RCC_OscConfig+0x600>)
 800208c:	6813      	ldr	r3, [r2, #0]
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002094:	f7fe fc80 	bl	8000998 <HAL_GetTick>
 8002098:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b95      	ldr	r3, [pc, #596]	; (80022f0 <HAL_RCC_OscConfig+0x600>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80020a2:	d1df      	bne.n	8002064 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a4:	f7fe fc78 	bl	8000998 <HAL_GetTick>
 80020a8:	1b80      	subs	r0, r0, r6
 80020aa:	2864      	cmp	r0, #100	; 0x64
 80020ac:	d9f5      	bls.n	800209a <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 80020ae:	2003      	movs	r0, #3
 80020b0:	e143      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b2:	4a8e      	ldr	r2, [pc, #568]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 80020b4:	6a13      	ldr	r3, [r2, #32]
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020bc:	68a3      	ldr	r3, [r4, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d041      	beq.n	8002146 <HAL_RCC_OscConfig+0x456>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7fe fc69 	bl	8000998 <HAL_GetTick>
 80020c6:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c8:	e02b      	b.n	8002122 <HAL_RCC_OscConfig+0x432>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d009      	beq.n	80020e2 <HAL_RCC_OscConfig+0x3f2>
 80020ce:	4b87      	ldr	r3, [pc, #540]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	621a      	str	r2, [r3, #32]
 80020d8:	6a1a      	ldr	r2, [r3, #32]
 80020da:	f022 0204 	bic.w	r2, r2, #4
 80020de:	621a      	str	r2, [r3, #32]
 80020e0:	e7ec      	b.n	80020bc <HAL_RCC_OscConfig+0x3cc>
 80020e2:	4b82      	ldr	r3, [pc, #520]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	f042 0204 	orr.w	r2, r2, #4
 80020ea:	621a      	str	r2, [r3, #32]
 80020ec:	6a1a      	ldr	r2, [r3, #32]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	621a      	str	r2, [r3, #32]
 80020f4:	e7e2      	b.n	80020bc <HAL_RCC_OscConfig+0x3cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f6:	4b7d      	ldr	r3, [pc, #500]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 80020f8:	6a19      	ldr	r1, [r3, #32]
 80020fa:	2302      	movs	r3, #2
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	2201      	movs	r2, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	4219      	tst	r1, r3
 8002110:	d145      	bne.n	800219e <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7fe fc41 	bl	8000998 <HAL_GetTick>
 8002116:	1b80      	subs	r0, r0, r6
 8002118:	f241 3388 	movw	r3, #5000	; 0x1388
 800211c:	4298      	cmp	r0, r3
 800211e:	f200 8107 	bhi.w	8002330 <HAL_RCC_OscConfig+0x640>
 8002122:	2302      	movs	r3, #2
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	2b02      	cmp	r3, #2
 8002138:	d0dd      	beq.n	80020f6 <HAL_RCC_OscConfig+0x406>
 800213a:	2302      	movs	r3, #2
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 8002142:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002144:	e7d9      	b.n	80020fa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7fe fc27 	bl	8000998 <HAL_GetTick>
 800214a:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x48a>
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 8002150:	6a19      	ldr	r1, [r3, #32]
 8002152:	2302      	movs	r3, #2
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2201      	movs	r2, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	4219      	tst	r1, r3
 8002168:	d019      	beq.n	800219e <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7fe fc15 	bl	8000998 <HAL_GetTick>
 800216e:	1b80      	subs	r0, r0, r6
 8002170:	f241 3388 	movw	r3, #5000	; 0x1388
 8002174:	4298      	cmp	r0, r3
 8002176:	f200 80dd 	bhi.w	8002334 <HAL_RCC_OscConfig+0x644>
 800217a:	2302      	movs	r3, #2
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	2b02      	cmp	r3, #2
 8002190:	d0dd      	beq.n	800214e <HAL_RCC_OscConfig+0x45e>
 8002192:	2302      	movs	r3, #2
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	4b54      	ldr	r3, [pc, #336]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 800219a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800219c:	e7d9      	b.n	8002152 <HAL_RCC_OscConfig+0x462>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800219e:	bbb5      	cbnz	r5, 800220e <HAL_RCC_OscConfig+0x51e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a0:	69a3      	ldr	r3, [r4, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80c8 	beq.w	8002338 <HAL_RCC_OscConfig+0x648>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a8:	4a50      	ldr	r2, [pc, #320]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 80021aa:	6852      	ldr	r2, [r2, #4]
 80021ac:	f002 020c 	and.w	r2, r2, #12
 80021b0:	2a08      	cmp	r2, #8
 80021b2:	f000 809f 	beq.w	80022f4 <HAL_RCC_OscConfig+0x604>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d02f      	beq.n	800221a <HAL_RCC_OscConfig+0x52a>
 80021ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021be:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7fe fbe0 	bl	8000998 <HAL_GetTick>
 80021d8:	4604      	mov	r4, r0
 80021da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021de:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e2:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 80021e4:	6819      	ldr	r1, [r3, #0]
 80021e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2201      	movs	r2, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	4219      	tst	r1, r3
 80021fe:	d071      	beq.n	80022e4 <HAL_RCC_OscConfig+0x5f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe fbca 	bl	8000998 <HAL_GetTick>
 8002204:	1b00      	subs	r0, r0, r4
 8002206:	2802      	cmp	r0, #2
 8002208:	d9e7      	bls.n	80021da <HAL_RCC_OscConfig+0x4ea>
          {
            return HAL_TIMEOUT;
 800220a:	2003      	movs	r0, #3
 800220c:	e095      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4a37      	ldr	r2, [pc, #220]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 8002210:	69d3      	ldr	r3, [r2, #28]
 8002212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002216:	61d3      	str	r3, [r2, #28]
 8002218:	e7c2      	b.n	80021a0 <HAL_RCC_OscConfig+0x4b0>
 800221a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800221e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800222a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002234:	f7fe fbb0 	bl	8000998 <HAL_GetTick>
 8002238:	4605      	mov	r5, r0
 800223a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	2201      	movs	r2, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	4219      	tst	r1, r3
 800225e:	d006      	beq.n	800226e <HAL_RCC_OscConfig+0x57e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fb9a 	bl	8000998 <HAL_GetTick>
 8002264:	1b40      	subs	r0, r0, r5
 8002266:	2802      	cmp	r0, #2
 8002268:	d9e7      	bls.n	800223a <HAL_RCC_OscConfig+0x54a>
            return HAL_TIMEOUT;
 800226a:	2003      	movs	r0, #3
 800226c:	e065      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800226e:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 8002270:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002272:	f023 030f 	bic.w	r3, r3, #15
 8002276:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002278:	430b      	orrs	r3, r1
 800227a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800227c:	6853      	ldr	r3, [r2, #4]
 800227e:	f423 1376 	bic.w	r3, r3, #4030464	; 0x3d8000
 8002282:	6a21      	ldr	r1, [r4, #32]
 8002284:	69e0      	ldr	r0, [r4, #28]
 8002286:	4301      	orrs	r1, r0
 8002288:	430b      	orrs	r3, r1
 800228a:	6053      	str	r3, [r2, #4]
 800228c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002290:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800229c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022a6:	f7fe fb77 	bl	8000998 <HAL_GetTick>
 80022aa:	4604      	mov	r4, r0
 80022ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022b0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_RCC_OscConfig+0x5fc>)
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2201      	movs	r2, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	4219      	tst	r1, r3
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5f0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe fb61 	bl	8000998 <HAL_GetTick>
 80022d6:	1b00      	subs	r0, r0, r4
 80022d8:	2802      	cmp	r0, #2
 80022da:	d9e7      	bls.n	80022ac <HAL_RCC_OscConfig+0x5bc>
            return HAL_TIMEOUT;
 80022dc:	2003      	movs	r0, #3
 80022de:	e02c      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
        }
      }
    }
  }

  return HAL_OK;
 80022e0:	2000      	movs	r0, #0
 80022e2:	e02a      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
 80022e4:	2000      	movs	r0, #0
 80022e6:	e028      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
 80022e8:	10908120 	.word	0x10908120
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d022      	beq.n	800233e <HAL_RCC_OscConfig+0x64e>
        pll_config = RCC->CFGR;
 80022f8:	4a13      	ldr	r2, [pc, #76]	; (8002348 <HAL_RCC_OscConfig+0x658>)
 80022fa:	6853      	ldr	r3, [r2, #4]
        pll_config2 = RCC->CFGR2;
 80022fc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022fe:	f403 31c0 	and.w	r1, r3, #98304	; 0x18000
 8002302:	69e2      	ldr	r2, [r4, #28]
 8002304:	4291      	cmp	r1, r2
 8002306:	d001      	beq.n	800230c <HAL_RCC_OscConfig+0x61c>
          return HAL_ERROR;
 8002308:	2001      	movs	r0, #1
 800230a:	e016      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800230c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002310:	6a22      	ldr	r2, [r4, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002312:	4293      	cmp	r3, r2
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x62a>
          return HAL_ERROR;
 8002316:	2001      	movs	r0, #1
 8002318:	e00f      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800231a:	f000 000f 	and.w	r0, r0, #15
 800231e:	6a63      	ldr	r3, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002320:	4298      	cmp	r0, r3
 8002322:	d00e      	beq.n	8002342 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8002324:	2001      	movs	r0, #1
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
    return HAL_ERROR;
 8002328:	2001      	movs	r0, #1
}
 800232a:	4770      	bx	lr
        return HAL_ERROR;
 800232c:	2001      	movs	r0, #1
 800232e:	e004      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
          return HAL_TIMEOUT;
 8002330:	2003      	movs	r0, #3
 8002332:	e002      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
          return HAL_TIMEOUT;
 8002334:	2003      	movs	r0, #3
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
  return HAL_OK;
 8002338:	2000      	movs	r0, #0
}
 800233a:	b002      	add	sp, #8
 800233c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800233e:	2001      	movs	r0, #1
 8002340:	e7fb      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
  return HAL_OK;
 8002342:	2000      	movs	r0, #0
 8002344:	e7f9      	b.n	800233a <HAL_RCC_OscConfig+0x64a>
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000

0800234c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_RCC_GetSysClockFreq+0x60>)
 800234e:	6859      	ldr	r1, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002350:	f001 030c 	and.w	r3, r1, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d126      	bne.n	80023a6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002358:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800235c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
 800236c:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x64>)
 800236e:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_RCC_GetSysClockFreq+0x60>)
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	220f      	movs	r2, #15
 800237a:	fa92 f2a2 	rbit	r2, r2
 800237e:	fab2 f282 	clz	r2, r2
 8002382:	40d3      	lsrs	r3, r2
 8002384:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x68>)
 8002386:	5cd2      	ldrb	r2, [r2, r3]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002388:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800238c:	d105      	bne.n	800239a <HAL_RCC_GetSysClockFreq+0x4e>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002390:	fbb3 f3f2 	udiv	r3, r3, r2
 8002394:	fb00 f003 	mul.w	r0, r0, r3
 8002398:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x6c>)
 800239c:	fbb3 f3f2 	udiv	r3, r3, r2
 80023a0:	fb00 f003 	mul.w	r0, r0, r3
 80023a4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80023a6:	4804      	ldr	r0, [pc, #16]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	080031fc 	.word	0x080031fc
 80023b4:	0800320c 	.word	0x0800320c
 80023b8:	007a1200 	.word	0x007a1200

080023bc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80023bc:	2800      	cmp	r0, #0
 80023be:	f000 80c1 	beq.w	8002544 <HAL_RCC_ClockConfig+0x188>
{
 80023c2:	b570      	push	{r4, r5, r6, lr}
 80023c4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c6:	4b61      	ldr	r3, [pc, #388]	; (800254c <HAL_RCC_ClockConfig+0x190>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	428b      	cmp	r3, r1
 80023d0:	d20c      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4a5e      	ldr	r2, [pc, #376]	; (800254c <HAL_RCC_ClockConfig+0x190>)
 80023d4:	6813      	ldr	r3, [r2, #0]
 80023d6:	f023 0307 	bic.w	r3, r3, #7
 80023da:	430b      	orrs	r3, r1
 80023dc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	6813      	ldr	r3, [r2, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	428b      	cmp	r3, r1
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80023e8:	2001      	movs	r0, #1
}
 80023ea:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	f013 0f02 	tst.w	r3, #2
 80023f2:	d006      	beq.n	8002402 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4a56      	ldr	r2, [pc, #344]	; (8002550 <HAL_RCC_ClockConfig+0x194>)
 80023f6:	6853      	ldr	r3, [r2, #4]
 80023f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023fc:	68a0      	ldr	r0, [r4, #8]
 80023fe:	4303      	orrs	r3, r0
 8002400:	6053      	str	r3, [r2, #4]
 8002402:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	f013 0f01 	tst.w	r3, #1
 800240a:	d05a      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240c:	6863      	ldr	r3, [r4, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d02d      	beq.n	800246e <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002412:	2b02      	cmp	r3, #2
 8002414:	d040      	beq.n	8002498 <HAL_RCC_ClockConfig+0xdc>
 8002416:	2202      	movs	r2, #2
 8002418:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241c:	4a4c      	ldr	r2, [pc, #304]	; (8002550 <HAL_RCC_ClockConfig+0x194>)
 800241e:	6810      	ldr	r0, [r2, #0]
 8002420:	2202      	movs	r2, #2
 8002422:	fa92 f2a2 	rbit	r2, r2
 8002426:	fab2 f282 	clz	r2, r2
 800242a:	f002 021f 	and.w	r2, r2, #31
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	4210      	tst	r0, r2
 8002436:	f000 8087 	beq.w	8002548 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4945      	ldr	r1, [pc, #276]	; (8002550 <HAL_RCC_ClockConfig+0x194>)
 800243c:	684a      	ldr	r2, [r1, #4]
 800243e:	f022 0203 	bic.w	r2, r2, #3
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002446:	f7fe faa7 	bl	8000998 <HAL_GetTick>
 800244a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244c:	4b40      	ldr	r3, [pc, #256]	; (8002550 <HAL_RCC_ClockConfig+0x194>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	6862      	ldr	r2, [r4, #4]
 8002456:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800245a:	d032      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7fe fa9c 	bl	8000998 <HAL_GetTick>
 8002460:	1b80      	subs	r0, r0, r6
 8002462:	f241 3388 	movw	r3, #5000	; 0x1388
 8002466:	4298      	cmp	r0, r3
 8002468:	d9f0      	bls.n	800244c <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800246a:	2003      	movs	r0, #3
 800246c:	e7bd      	b.n	80023ea <HAL_RCC_ClockConfig+0x2e>
 800246e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002472:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4a36      	ldr	r2, [pc, #216]	; (8002550 <HAL_RCC_ClockConfig+0x194>)
 8002478:	6810      	ldr	r0, [r2, #0]
 800247a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800247e:	fa92 f2a2 	rbit	r2, r2
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	f002 021f 	and.w	r2, r2, #31
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	4202      	tst	r2, r0
 8002492:	d1d2      	bne.n	800243a <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8002494:	2001      	movs	r0, #1
 8002496:	e7a8      	b.n	80023ea <HAL_RCC_ClockConfig+0x2e>
 8002498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800249c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a0:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <HAL_RCC_ClockConfig+0x194>)
 80024a2:	6810      	ldr	r0, [r2, #0]
 80024a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a8:	fa92 f2a2 	rbit	r2, r2
 80024ac:	fab2 f282 	clz	r2, r2
 80024b0:	f002 021f 	and.w	r2, r2, #31
 80024b4:	2101      	movs	r1, #1
 80024b6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ba:	4210      	tst	r0, r2
 80024bc:	d1bd      	bne.n	800243a <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 80024be:	2001      	movs	r0, #1
 80024c0:	e793      	b.n	80023ea <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c2:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_RCC_ClockConfig+0x190>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	42ab      	cmp	r3, r5
 80024cc:	d90c      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4a1f      	ldr	r2, [pc, #124]	; (800254c <HAL_RCC_ClockConfig+0x190>)
 80024d0:	6813      	ldr	r3, [r2, #0]
 80024d2:	f023 0307 	bic.w	r3, r3, #7
 80024d6:	432b      	orrs	r3, r5
 80024d8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	42ab      	cmp	r3, r5
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 80024e4:	2001      	movs	r0, #1
 80024e6:	e780      	b.n	80023ea <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	f013 0f04 	tst.w	r3, #4
 80024ee:	d006      	beq.n	80024fe <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f0:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_RCC_ClockConfig+0x194>)
 80024f2:	6853      	ldr	r3, [r2, #4]
 80024f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024f8:	68e1      	ldr	r1, [r4, #12]
 80024fa:	430b      	orrs	r3, r1
 80024fc:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	f013 0f08 	tst.w	r3, #8
 8002504:	d007      	beq.n	8002516 <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <HAL_RCC_ClockConfig+0x194>)
 8002508:	6853      	ldr	r3, [r2, #4]
 800250a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800250e:	6921      	ldr	r1, [r4, #16]
 8002510:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002514:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002516:	f7ff ff19 	bl	800234c <HAL_RCC_GetSysClockFreq>
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_RCC_ClockConfig+0x194>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002522:	22f0      	movs	r2, #240	; 0xf0
 8002524:	fa92 f2a2 	rbit	r2, r2
 8002528:	fab2 f282 	clz	r2, r2
 800252c:	40d3      	lsrs	r3, r2
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x198>)
 8002530:	5cd3      	ldrb	r3, [r2, r3]
 8002532:	40d8      	lsrs	r0, r3
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_RCC_ClockConfig+0x19c>)
 8002536:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_RCC_ClockConfig+0x1a0>)
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	f7fe f9e8 	bl	8000910 <HAL_InitTick>
  return HAL_OK;
 8002540:	2000      	movs	r0, #0
 8002542:	e752      	b.n	80023ea <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002544:	2001      	movs	r0, #1
}
 8002546:	4770      	bx	lr
        return HAL_ERROR;
 8002548:	2001      	movs	r0, #1
 800254a:	e74e      	b.n	80023ea <HAL_RCC_ClockConfig+0x2e>
 800254c:	40022000 	.word	0x40022000
 8002550:	40021000 	.word	0x40021000
 8002554:	080031ec 	.word	0x080031ec
 8002558:	20000004 	.word	0x20000004
 800255c:	2000000c 	.word	0x2000000c

08002560 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002562:	b083      	sub	sp, #12
 8002564:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002566:	6803      	ldr	r3, [r0, #0]
 8002568:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800256c:	d048      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4ba1      	ldr	r3, [pc, #644]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002576:	f040 8122 	bne.w	80027be <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4b9e      	ldr	r3, [pc, #632]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002582:	61da      	str	r2, [r3, #28]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800258e:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	4b99      	ldr	r3, [pc, #612]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002598:	f000 8113 	beq.w	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800259c:	4b95      	ldr	r3, [pc, #596]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80025a4:	d022      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80025a6:	6862      	ldr	r2, [r4, #4]
 80025a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d01d      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025b0:	4890      	ldr	r0, [pc, #576]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80025b2:	6a01      	ldr	r1, [r0, #32]
 80025b4:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 80025b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025bc:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025c0:	fab2 f282 	clz	r2, r2
 80025c4:	4f8d      	ldr	r7, [pc, #564]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80025c6:	443a      	add	r2, r7
 80025c8:	0092      	lsls	r2, r2, #2
 80025ca:	f04f 0c01 	mov.w	ip, #1
 80025ce:	f8c2 c000 	str.w	ip, [r2]
 80025d2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	443b      	add	r3, r7
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025e2:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025e4:	f011 0f01 	tst.w	r1, #1
 80025e8:	f040 8100 	bne.w	80027ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025ec:	4a81      	ldr	r2, [pc, #516]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80025ee:	6a13      	ldr	r3, [r2, #32]
 80025f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f4:	6861      	ldr	r1, [r4, #4]
 80025f6:	430b      	orrs	r3, r1
 80025f8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025fa:	2d00      	cmp	r5, #0
 80025fc:	f040 8128 	bne.w	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	f013 0f01 	tst.w	r3, #1
 8002606:	d006      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002608:	4a7a      	ldr	r2, [pc, #488]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800260a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800260c:	f023 0303 	bic.w	r3, r3, #3
 8002610:	68a1      	ldr	r1, [r4, #8]
 8002612:	430b      	orrs	r3, r1
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	f013 0f02 	tst.w	r3, #2
 800261c:	d006      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800261e:	4a75      	ldr	r2, [pc, #468]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002620:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002622:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002626:	68e1      	ldr	r1, [r4, #12]
 8002628:	430b      	orrs	r3, r1
 800262a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	f013 0f04 	tst.w	r3, #4
 8002632:	d006      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002634:	4a6f      	ldr	r2, [pc, #444]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002636:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002638:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800263c:	6921      	ldr	r1, [r4, #16]
 800263e:	430b      	orrs	r3, r1
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	f013 0f20 	tst.w	r3, #32
 8002648:	d006      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800264a:	4a6a      	ldr	r2, [pc, #424]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800264c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800264e:	f023 0310 	bic.w	r3, r3, #16
 8002652:	69e1      	ldr	r1, [r4, #28]
 8002654:	430b      	orrs	r3, r1
 8002656:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800265e:	d006      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002660:	4a64      	ldr	r2, [pc, #400]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002662:	6853      	ldr	r3, [r2, #4]
 8002664:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002668:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800266a:	430b      	orrs	r3, r1
 800266c:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002674:	d006      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002676:	4a5f      	ldr	r2, [pc, #380]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002678:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800267a:	f023 0320 	bic.w	r3, r3, #32
 800267e:	6a21      	ldr	r1, [r4, #32]
 8002680:	430b      	orrs	r3, r1
 8002682:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800268a:	d006      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800268c:	4a59      	ldr	r2, [pc, #356]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800268e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002694:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002696:	430b      	orrs	r3, r1
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	f013 0f08 	tst.w	r3, #8
 80026a0:	d006      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026a2:	4a54      	ldr	r2, [pc, #336]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80026a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80026a6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80026aa:	6961      	ldr	r1, [r4, #20]
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	f013 0f10 	tst.w	r3, #16
 80026b6:	d006      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026b8:	4a4e      	ldr	r2, [pc, #312]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80026ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80026bc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80026c0:	69a1      	ldr	r1, [r4, #24]
 80026c2:	430b      	orrs	r3, r1
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80026cc:	d006      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ce:	4a49      	ldr	r2, [pc, #292]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80026d0:	6853      	ldr	r3, [r2, #4]
 80026d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80026d8:	430b      	orrs	r3, r1
 80026da:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026e2:	d006      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026e4:	4a43      	ldr	r2, [pc, #268]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80026e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026e8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80026ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80026ee:	430b      	orrs	r3, r1
 80026f0:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026f8:	d006      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026fa:	4a3e      	ldr	r2, [pc, #248]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80026fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026fe:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8002702:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002704:	430b      	orrs	r3, r1
 8002706:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800270e:	d006      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002710:	4a38      	ldr	r2, [pc, #224]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002712:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800271a:	430b      	orrs	r3, r1
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002724:	d006      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002726:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002728:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800272a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800272e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002730:	430b      	orrs	r3, r1
 8002732:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800273a:	d006      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800273c:	4a2d      	ldr	r2, [pc, #180]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800273e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002740:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002744:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002746:	430b      	orrs	r3, r1
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002750:	d006      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002752:	4a28      	ldr	r2, [pc, #160]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002754:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002756:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800275a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800275c:	430b      	orrs	r3, r1
 800275e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002766:	d006      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002768:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800276a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800276c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002770:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002772:	430b      	orrs	r3, r1
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800277c:	d006      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800277e:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002780:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002786:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002788:	430b      	orrs	r3, r1
 800278a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002792:	d006      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002796:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800279c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800279e:	430b      	orrs	r3, r1
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80027a8:	d059      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80027ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80027b4:	430b      	orrs	r3, r1
 80027b6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027b8:	2000      	movs	r0, #0
}
 80027ba:	b003      	add	sp, #12
 80027bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2500      	movs	r5, #0
 80027c0:	e6e6      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c2:	4a0d      	ldr	r2, [pc, #52]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80027c4:	6813      	ldr	r3, [r2, #0]
 80027c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ca:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80027cc:	f7fe f8e4 	bl	8000998 <HAL_GetTick>
 80027d0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027da:	f47f aedf 	bne.w	800259c <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027de:	f7fe f8db 	bl	8000998 <HAL_GetTick>
 80027e2:	1b80      	subs	r0, r0, r6
 80027e4:	2864      	cmp	r0, #100	; 0x64
 80027e6:	d9f4      	bls.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
          return HAL_TIMEOUT;
 80027e8:	2003      	movs	r0, #3
 80027ea:	e7e6      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
        tickstart = HAL_GetTick();
 80027ec:	f7fe f8d4 	bl	8000998 <HAL_GetTick>
 80027f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	e01b      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
 80027fc:	10908100 	.word	0x10908100
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002802:	6a19      	ldr	r1, [r3, #32]
 8002804:	2302      	movs	r3, #2
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2201      	movs	r2, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	420b      	tst	r3, r1
 800281a:	f47f aee7 	bne.w	80025ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe f8bb 	bl	8000998 <HAL_GetTick>
 8002822:	1b80      	subs	r0, r0, r6
 8002824:	f241 3388 	movw	r3, #5000	; 0x1388
 8002828:	4298      	cmp	r0, r3
 800282a:	d816      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800282c:	2302      	movs	r3, #2
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	2b02      	cmp	r3, #2
 8002842:	d0dd      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8002844:	2302      	movs	r3, #2
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800284c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800284e:	e7d9      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	69d3      	ldr	r3, [r2, #28]
 8002852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002856:	61d3      	str	r3, [r2, #28]
 8002858:	e6d2      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 800285a:	2003      	movs	r0, #3
 800285c:	e7ad      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  return HAL_OK;
 800285e:	2000      	movs	r0, #0
 8002860:	e7ab      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002868:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286a:	6a03      	ldr	r3, [r0, #32]
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002872:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002874:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002876:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002878:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800287c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002880:	680d      	ldr	r5, [r1, #0]
 8002882:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002884:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002888:	688d      	ldr	r5, [r1, #8]
 800288a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800288c:	4d20      	ldr	r5, [pc, #128]	; (8002910 <TIM_OC1_SetConfig+0xa8>)
 800288e:	42a8      	cmp	r0, r5
 8002890:	d013      	beq.n	80028ba <TIM_OC1_SetConfig+0x52>
 8002892:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002896:	42a8      	cmp	r0, r5
 8002898:	d00f      	beq.n	80028ba <TIM_OC1_SetConfig+0x52>
 800289a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800289e:	42a8      	cmp	r0, r5
 80028a0:	d00b      	beq.n	80028ba <TIM_OC1_SetConfig+0x52>
 80028a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028a6:	42a8      	cmp	r0, r5
 80028a8:	d007      	beq.n	80028ba <TIM_OC1_SetConfig+0x52>
 80028aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028ae:	42a8      	cmp	r0, r5
 80028b0:	d003      	beq.n	80028ba <TIM_OC1_SetConfig+0x52>
 80028b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80028b6:	42a8      	cmp	r0, r5
 80028b8:	d105      	bne.n	80028c6 <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028ba:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028be:	68cd      	ldr	r5, [r1, #12]
 80028c0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028c2:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c6:	4d12      	ldr	r5, [pc, #72]	; (8002910 <TIM_OC1_SetConfig+0xa8>)
 80028c8:	42a8      	cmp	r0, r5
 80028ca:	d013      	beq.n	80028f4 <TIM_OC1_SetConfig+0x8c>
 80028cc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80028d0:	42a8      	cmp	r0, r5
 80028d2:	d00f      	beq.n	80028f4 <TIM_OC1_SetConfig+0x8c>
 80028d4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80028d8:	42a8      	cmp	r0, r5
 80028da:	d00b      	beq.n	80028f4 <TIM_OC1_SetConfig+0x8c>
 80028dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028e0:	42a8      	cmp	r0, r5
 80028e2:	d007      	beq.n	80028f4 <TIM_OC1_SetConfig+0x8c>
 80028e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028e8:	42a8      	cmp	r0, r5
 80028ea:	d003      	beq.n	80028f4 <TIM_OC1_SetConfig+0x8c>
 80028ec:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80028f0:	42a8      	cmp	r0, r5
 80028f2:	d105      	bne.n	8002900 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028f4:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028f8:	694c      	ldr	r4, [r1, #20]
 80028fa:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028fc:	698d      	ldr	r5, [r1, #24]
 80028fe:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002900:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002902:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002904:	684a      	ldr	r2, [r1, #4]
 8002906:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002908:	6203      	str	r3, [r0, #32]
}
 800290a:	bc30      	pop	{r4, r5}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40012c00 	.word	0x40012c00

08002914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002914:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002916:	6a03      	ldr	r3, [r0, #32]
 8002918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800291c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002920:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002922:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002924:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002928:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800292c:	680d      	ldr	r5, [r1, #0]
 800292e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002934:	688d      	ldr	r5, [r1, #8]
 8002936:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800293a:	4d1c      	ldr	r5, [pc, #112]	; (80029ac <TIM_OC3_SetConfig+0x98>)
 800293c:	42a8      	cmp	r0, r5
 800293e:	d007      	beq.n	8002950 <TIM_OC3_SetConfig+0x3c>
 8002940:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002944:	42a8      	cmp	r0, r5
 8002946:	d003      	beq.n	8002950 <TIM_OC3_SetConfig+0x3c>
 8002948:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800294c:	42a8      	cmp	r0, r5
 800294e:	d106      	bne.n	800295e <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002954:	68cd      	ldr	r5, [r1, #12]
 8002956:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800295a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295e:	4d13      	ldr	r5, [pc, #76]	; (80029ac <TIM_OC3_SetConfig+0x98>)
 8002960:	42a8      	cmp	r0, r5
 8002962:	d013      	beq.n	800298c <TIM_OC3_SetConfig+0x78>
 8002964:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002968:	42a8      	cmp	r0, r5
 800296a:	d00f      	beq.n	800298c <TIM_OC3_SetConfig+0x78>
 800296c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002970:	42a8      	cmp	r0, r5
 8002972:	d00b      	beq.n	800298c <TIM_OC3_SetConfig+0x78>
 8002974:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002978:	42a8      	cmp	r0, r5
 800297a:	d007      	beq.n	800298c <TIM_OC3_SetConfig+0x78>
 800297c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002980:	42a8      	cmp	r0, r5
 8002982:	d003      	beq.n	800298c <TIM_OC3_SetConfig+0x78>
 8002984:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002988:	42a8      	cmp	r0, r5
 800298a:	d107      	bne.n	800299c <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800298c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002990:	694d      	ldr	r5, [r1, #20]
 8002992:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002996:	698d      	ldr	r5, [r1, #24]
 8002998:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800299c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800299e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029a0:	684a      	ldr	r2, [r1, #4]
 80029a2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a4:	6203      	str	r3, [r0, #32]
}
 80029a6:	bc30      	pop	{r4, r5}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40012c00 	.word	0x40012c00

080029b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029b0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029b2:	6a03      	ldr	r3, [r0, #32]
 80029b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029be:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80029c4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c8:	680d      	ldr	r5, [r1, #0]
 80029ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029d2:	688d      	ldr	r5, [r1, #8]
 80029d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d8:	4d11      	ldr	r5, [pc, #68]	; (8002a20 <TIM_OC4_SetConfig+0x70>)
 80029da:	42a8      	cmp	r0, r5
 80029dc:	d013      	beq.n	8002a06 <TIM_OC4_SetConfig+0x56>
 80029de:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80029e2:	42a8      	cmp	r0, r5
 80029e4:	d00f      	beq.n	8002a06 <TIM_OC4_SetConfig+0x56>
 80029e6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80029ea:	42a8      	cmp	r0, r5
 80029ec:	d00b      	beq.n	8002a06 <TIM_OC4_SetConfig+0x56>
 80029ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029f2:	42a8      	cmp	r0, r5
 80029f4:	d007      	beq.n	8002a06 <TIM_OC4_SetConfig+0x56>
 80029f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029fa:	42a8      	cmp	r0, r5
 80029fc:	d003      	beq.n	8002a06 <TIM_OC4_SetConfig+0x56>
 80029fe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a02:	42a8      	cmp	r0, r5
 8002a04:	d104      	bne.n	8002a10 <TIM_OC4_SetConfig+0x60>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a06:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a0a:	694d      	ldr	r5, [r1, #20]
 8002a0c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a10:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a12:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a14:	684a      	ldr	r2, [r1, #4]
 8002a16:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a18:	6203      	str	r3, [r0, #32]
}
 8002a1a:	bc30      	pop	{r4, r5}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40012c00 	.word	0x40012c00

08002a24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002a24:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a26:	6a03      	ldr	r3, [r0, #32]
 8002a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a30:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a32:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002a34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a3c:	680d      	ldr	r5, [r1, #0]
 8002a3e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002a40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a44:	688d      	ldr	r5, [r1, #8]
 8002a46:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a4a:	4d11      	ldr	r5, [pc, #68]	; (8002a90 <TIM_OC5_SetConfig+0x6c>)
 8002a4c:	42a8      	cmp	r0, r5
 8002a4e:	d013      	beq.n	8002a78 <TIM_OC5_SetConfig+0x54>
 8002a50:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a54:	42a8      	cmp	r0, r5
 8002a56:	d00f      	beq.n	8002a78 <TIM_OC5_SetConfig+0x54>
 8002a58:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002a5c:	42a8      	cmp	r0, r5
 8002a5e:	d00b      	beq.n	8002a78 <TIM_OC5_SetConfig+0x54>
 8002a60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a64:	42a8      	cmp	r0, r5
 8002a66:	d007      	beq.n	8002a78 <TIM_OC5_SetConfig+0x54>
 8002a68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a6c:	42a8      	cmp	r0, r5
 8002a6e:	d003      	beq.n	8002a78 <TIM_OC5_SetConfig+0x54>
 8002a70:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a74:	42a8      	cmp	r0, r5
 8002a76:	d104      	bne.n	8002a82 <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002a78:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002a7c:	694d      	ldr	r5, [r1, #20]
 8002a7e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a82:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a84:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a86:	684a      	ldr	r2, [r1, #4]
 8002a88:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a8a:	6203      	str	r3, [r0, #32]
}
 8002a8c:	bc30      	pop	{r4, r5}
 8002a8e:	4770      	bx	lr
 8002a90:	40012c00 	.word	0x40012c00

08002a94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002a94:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a96:	6a03      	ldr	r3, [r0, #32]
 8002a98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a9c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002aa2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002aa4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002aa8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aac:	680d      	ldr	r5, [r1, #0]
 8002aae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ab2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ab6:	688d      	ldr	r5, [r1, #8]
 8002ab8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002abc:	4d11      	ldr	r5, [pc, #68]	; (8002b04 <TIM_OC6_SetConfig+0x70>)
 8002abe:	42a8      	cmp	r0, r5
 8002ac0:	d013      	beq.n	8002aea <TIM_OC6_SetConfig+0x56>
 8002ac2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002ac6:	42a8      	cmp	r0, r5
 8002ac8:	d00f      	beq.n	8002aea <TIM_OC6_SetConfig+0x56>
 8002aca:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002ace:	42a8      	cmp	r0, r5
 8002ad0:	d00b      	beq.n	8002aea <TIM_OC6_SetConfig+0x56>
 8002ad2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ad6:	42a8      	cmp	r0, r5
 8002ad8:	d007      	beq.n	8002aea <TIM_OC6_SetConfig+0x56>
 8002ada:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ade:	42a8      	cmp	r0, r5
 8002ae0:	d003      	beq.n	8002aea <TIM_OC6_SetConfig+0x56>
 8002ae2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002ae6:	42a8      	cmp	r0, r5
 8002ae8:	d104      	bne.n	8002af4 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002aea:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002aee:	694d      	ldr	r5, [r1, #20]
 8002af0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002af6:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002af8:	684a      	ldr	r2, [r1, #4]
 8002afa:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afc:	6203      	str	r3, [r0, #32]
}
 8002afe:	bc30      	pop	{r4, r5}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00

08002b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b08:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b0a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b0c:	6a04      	ldr	r4, [r0, #32]
 8002b0e:	f024 0401 	bic.w	r4, r4, #1
 8002b12:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b14:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b16:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b1a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b1e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002b22:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b24:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b26:	6203      	str	r3, [r0, #32]
}
 8002b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b2e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b30:	6a03      	ldr	r3, [r0, #32]
 8002b32:	f023 0310 	bic.w	r3, r3, #16
 8002b36:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b38:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002b3a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b3c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b40:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b48:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b4c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b4e:	6203      	str	r3, [r0, #32]
}
 8002b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002b58:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5a:	4a32      	ldr	r2, [pc, #200]	; (8002c24 <TIM_Base_SetConfig+0xcc>)
 8002b5c:	4290      	cmp	r0, r2
 8002b5e:	d012      	beq.n	8002b86 <TIM_Base_SetConfig+0x2e>
 8002b60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002b64:	d00f      	beq.n	8002b86 <TIM_Base_SetConfig+0x2e>
 8002b66:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002b6a:	4290      	cmp	r0, r2
 8002b6c:	d00b      	beq.n	8002b86 <TIM_Base_SetConfig+0x2e>
 8002b6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b72:	4290      	cmp	r0, r2
 8002b74:	d007      	beq.n	8002b86 <TIM_Base_SetConfig+0x2e>
 8002b76:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002b7a:	4290      	cmp	r0, r2
 8002b7c:	d003      	beq.n	8002b86 <TIM_Base_SetConfig+0x2e>
 8002b7e:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002b82:	4290      	cmp	r0, r2
 8002b84:	d103      	bne.n	8002b8e <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002b8a:	684a      	ldr	r2, [r1, #4]
 8002b8c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8e:	4a25      	ldr	r2, [pc, #148]	; (8002c24 <TIM_Base_SetConfig+0xcc>)
 8002b90:	4290      	cmp	r0, r2
 8002b92:	d01e      	beq.n	8002bd2 <TIM_Base_SetConfig+0x7a>
 8002b94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002b98:	d01b      	beq.n	8002bd2 <TIM_Base_SetConfig+0x7a>
 8002b9a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002b9e:	4290      	cmp	r0, r2
 8002ba0:	d017      	beq.n	8002bd2 <TIM_Base_SetConfig+0x7a>
 8002ba2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ba6:	4290      	cmp	r0, r2
 8002ba8:	d013      	beq.n	8002bd2 <TIM_Base_SetConfig+0x7a>
 8002baa:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002bae:	4290      	cmp	r0, r2
 8002bb0:	d00f      	beq.n	8002bd2 <TIM_Base_SetConfig+0x7a>
 8002bb2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002bb6:	4290      	cmp	r0, r2
 8002bb8:	d00b      	beq.n	8002bd2 <TIM_Base_SetConfig+0x7a>
 8002bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bbe:	4290      	cmp	r0, r2
 8002bc0:	d007      	beq.n	8002bd2 <TIM_Base_SetConfig+0x7a>
 8002bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bc6:	4290      	cmp	r0, r2
 8002bc8:	d003      	beq.n	8002bd2 <TIM_Base_SetConfig+0x7a>
 8002bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bce:	4290      	cmp	r0, r2
 8002bd0:	d103      	bne.n	8002bda <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bd6:	68ca      	ldr	r2, [r1, #12]
 8002bd8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bde:	694a      	ldr	r2, [r1, #20]
 8002be0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002be2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be4:	688b      	ldr	r3, [r1, #8]
 8002be6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002be8:	680b      	ldr	r3, [r1, #0]
 8002bea:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <TIM_Base_SetConfig+0xcc>)
 8002bee:	4298      	cmp	r0, r3
 8002bf0:	d013      	beq.n	8002c1a <TIM_Base_SetConfig+0xc2>
 8002bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf6:	4298      	cmp	r0, r3
 8002bf8:	d00f      	beq.n	8002c1a <TIM_Base_SetConfig+0xc2>
 8002bfa:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002bfe:	4298      	cmp	r0, r3
 8002c00:	d00b      	beq.n	8002c1a <TIM_Base_SetConfig+0xc2>
 8002c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c06:	4298      	cmp	r0, r3
 8002c08:	d007      	beq.n	8002c1a <TIM_Base_SetConfig+0xc2>
 8002c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c0e:	4298      	cmp	r0, r3
 8002c10:	d003      	beq.n	8002c1a <TIM_Base_SetConfig+0xc2>
 8002c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c16:	4298      	cmp	r0, r3
 8002c18:	d101      	bne.n	8002c1e <TIM_Base_SetConfig+0xc6>
    TIMx->RCR = Structure->RepetitionCounter;
 8002c1a:	690b      	ldr	r3, [r1, #16]
 8002c1c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	6143      	str	r3, [r0, #20]
}
 8002c22:	4770      	bx	lr
 8002c24:	40012c00 	.word	0x40012c00

08002c28 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002c28:	b1a8      	cbz	r0, 8002c56 <HAL_TIM_Base_Init+0x2e>
{
 8002c2a:	b510      	push	{r4, lr}
 8002c2c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c32:	b15b      	cbz	r3, 8002c4c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c3a:	1d21      	adds	r1, r4, #4
 8002c3c:	6820      	ldr	r0, [r4, #0]
 8002c3e:	f7ff ff8b 	bl	8002b58 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002c48:	2000      	movs	r0, #0
}
 8002c4a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002c50:	f7fd fdb6 	bl	80007c0 <HAL_TIM_Base_MspInit>
 8002c54:	e7ee      	b.n	8002c34 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002c56:	2001      	movs	r0, #1
}
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002c5a:	b1a8      	cbz	r0, 8002c88 <HAL_TIM_PWM_Init+0x2e>
{
 8002c5c:	b510      	push	{r4, lr}
 8002c5e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c60:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c64:	b15b      	cbz	r3, 8002c7e <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c66:	2302      	movs	r3, #2
 8002c68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c6c:	1d21      	adds	r1, r4, #4
 8002c6e:	6820      	ldr	r0, [r4, #0]
 8002c70:	f7ff ff72 	bl	8002b58 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002c7a:	2000      	movs	r0, #0
}
 8002c7c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002c82:	f7fd fd87 	bl	8000794 <HAL_TIM_PWM_MspInit>
 8002c86:	e7ee      	b.n	8002c66 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002c88:	2001      	movs	r0, #1
}
 8002c8a:	4770      	bx	lr

08002c8c <TIM_OC2_SetConfig>:
{
 8002c8c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c8e:	6a03      	ldr	r3, [r0, #32]
 8002c90:	f023 0310 	bic.w	r3, r3, #16
 8002c94:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002c96:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002c98:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002c9a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c9c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002ca0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca4:	680d      	ldr	r5, [r1, #0]
 8002ca6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002caa:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cae:	688d      	ldr	r5, [r1, #8]
 8002cb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cb4:	4d1b      	ldr	r5, [pc, #108]	; (8002d24 <TIM_OC2_SetConfig+0x98>)
 8002cb6:	42a8      	cmp	r0, r5
 8002cb8:	d007      	beq.n	8002cca <TIM_OC2_SetConfig+0x3e>
 8002cba:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002cbe:	42a8      	cmp	r0, r5
 8002cc0:	d003      	beq.n	8002cca <TIM_OC2_SetConfig+0x3e>
 8002cc2:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002cc6:	42a8      	cmp	r0, r5
 8002cc8:	d106      	bne.n	8002cd8 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cce:	68cd      	ldr	r5, [r1, #12]
 8002cd0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd8:	4d12      	ldr	r5, [pc, #72]	; (8002d24 <TIM_OC2_SetConfig+0x98>)
 8002cda:	42a8      	cmp	r0, r5
 8002cdc:	d013      	beq.n	8002d06 <TIM_OC2_SetConfig+0x7a>
 8002cde:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002ce2:	42a8      	cmp	r0, r5
 8002ce4:	d00f      	beq.n	8002d06 <TIM_OC2_SetConfig+0x7a>
 8002ce6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002cea:	42a8      	cmp	r0, r5
 8002cec:	d00b      	beq.n	8002d06 <TIM_OC2_SetConfig+0x7a>
 8002cee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cf2:	42a8      	cmp	r0, r5
 8002cf4:	d007      	beq.n	8002d06 <TIM_OC2_SetConfig+0x7a>
 8002cf6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cfa:	42a8      	cmp	r0, r5
 8002cfc:	d003      	beq.n	8002d06 <TIM_OC2_SetConfig+0x7a>
 8002cfe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002d02:	42a8      	cmp	r0, r5
 8002d04:	d107      	bne.n	8002d16 <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d06:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d0a:	694d      	ldr	r5, [r1, #20]
 8002d0c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d10:	698d      	ldr	r5, [r1, #24]
 8002d12:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002d16:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002d18:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002d1a:	684a      	ldr	r2, [r1, #4]
 8002d1c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002d1e:	6203      	str	r3, [r0, #32]
}
 8002d20:	bc30      	pop	{r4, r5}
 8002d22:	4770      	bx	lr
 8002d24:	40012c00 	.word	0x40012c00

08002d28 <HAL_TIM_PWM_ConfigChannel>:
{
 8002d28:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002d2a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	f000 8092 	beq.w	8002e58 <HAL_TIM_PWM_ConfigChannel+0x130>
 8002d34:	460d      	mov	r5, r1
 8002d36:	4604      	mov	r4, r0
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002d44:	2a14      	cmp	r2, #20
 8002d46:	d81e      	bhi.n	8002d86 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8002d48:	e8df f002 	tbb	[pc, r2]
 8002d4c:	1d1d1d0b 	.word	0x1d1d1d0b
 8002d50:	1d1d1d24 	.word	0x1d1d1d24
 8002d54:	1d1d1d38 	.word	0x1d1d1d38
 8002d58:	1d1d1d4b 	.word	0x1d1d1d4b
 8002d5c:	1d1d1d5f 	.word	0x1d1d1d5f
 8002d60:	72          	.byte	0x72
 8002d61:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d62:	6800      	ldr	r0, [r0, #0]
 8002d64:	f7ff fd80 	bl	8002868 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d68:	6822      	ldr	r2, [r4, #0]
 8002d6a:	6993      	ldr	r3, [r2, #24]
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d72:	6822      	ldr	r2, [r4, #0]
 8002d74:	6993      	ldr	r3, [r2, #24]
 8002d76:	f023 0304 	bic.w	r3, r3, #4
 8002d7a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	6993      	ldr	r3, [r2, #24]
 8002d80:	6929      	ldr	r1, [r5, #16]
 8002d82:	430b      	orrs	r3, r1
 8002d84:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002d92:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d94:	6800      	ldr	r0, [r0, #0]
 8002d96:	f7ff ff79 	bl	8002c8c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d9a:	6822      	ldr	r2, [r4, #0]
 8002d9c:	6993      	ldr	r3, [r2, #24]
 8002d9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002da2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da4:	6822      	ldr	r2, [r4, #0]
 8002da6:	6993      	ldr	r3, [r2, #24]
 8002da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dae:	6822      	ldr	r2, [r4, #0]
 8002db0:	6993      	ldr	r3, [r2, #24]
 8002db2:	6929      	ldr	r1, [r5, #16]
 8002db4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002db8:	6193      	str	r3, [r2, #24]
      break;
 8002dba:	e7e4      	b.n	8002d86 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dbc:	6800      	ldr	r0, [r0, #0]
 8002dbe:	f7ff fda9 	bl	8002914 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dc2:	6822      	ldr	r2, [r4, #0]
 8002dc4:	69d3      	ldr	r3, [r2, #28]
 8002dc6:	f043 0308 	orr.w	r3, r3, #8
 8002dca:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dcc:	6822      	ldr	r2, [r4, #0]
 8002dce:	69d3      	ldr	r3, [r2, #28]
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dd6:	6822      	ldr	r2, [r4, #0]
 8002dd8:	69d3      	ldr	r3, [r2, #28]
 8002dda:	6929      	ldr	r1, [r5, #16]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	61d3      	str	r3, [r2, #28]
      break;
 8002de0:	e7d1      	b.n	8002d86 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002de2:	6800      	ldr	r0, [r0, #0]
 8002de4:	f7ff fde4 	bl	80029b0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002de8:	6822      	ldr	r2, [r4, #0]
 8002dea:	69d3      	ldr	r3, [r2, #28]
 8002dec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002df0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002df2:	6822      	ldr	r2, [r4, #0]
 8002df4:	69d3      	ldr	r3, [r2, #28]
 8002df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dfa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dfc:	6822      	ldr	r2, [r4, #0]
 8002dfe:	69d3      	ldr	r3, [r2, #28]
 8002e00:	6929      	ldr	r1, [r5, #16]
 8002e02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e06:	61d3      	str	r3, [r2, #28]
      break;
 8002e08:	e7bd      	b.n	8002d86 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e0a:	6800      	ldr	r0, [r0, #0]
 8002e0c:	f7ff fe0a 	bl	8002a24 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e10:	6822      	ldr	r2, [r4, #0]
 8002e12:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002e14:	f043 0308 	orr.w	r3, r3, #8
 8002e18:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e1a:	6822      	ldr	r2, [r4, #0]
 8002e1c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002e1e:	f023 0304 	bic.w	r3, r3, #4
 8002e22:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e24:	6822      	ldr	r2, [r4, #0]
 8002e26:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002e28:	6929      	ldr	r1, [r5, #16]
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8002e2e:	e7aa      	b.n	8002d86 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e30:	6800      	ldr	r0, [r0, #0]
 8002e32:	f7ff fe2f 	bl	8002a94 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002e3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e3e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e40:	6822      	ldr	r2, [r4, #0]
 8002e42:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e48:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002e4e:	6929      	ldr	r1, [r5, #16]
 8002e50:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e54:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8002e56:	e796      	b.n	8002d86 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8002e58:	2002      	movs	r0, #2
 8002e5a:	e79a      	b.n	8002d92 <HAL_TIM_PWM_ConfigChannel+0x6a>

08002e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e5c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e5e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e60:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e64:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6c:	6083      	str	r3, [r0, #8]
}
 8002e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <TIM_SlaveTimer_SetConfig>:
{
 8002e74:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8002e76:	6804      	ldr	r4, [r0, #0]
 8002e78:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002e7e:	684b      	ldr	r3, [r1, #4]
 8002e80:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e86:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002e8a:	680a      	ldr	r2, [r1, #0]
 8002e8c:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002e8e:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8002e90:	684b      	ldr	r3, [r1, #4]
 8002e92:	2b50      	cmp	r3, #80	; 0x50
 8002e94:	d023      	beq.n	8002ede <TIM_SlaveTimer_SetConfig+0x6a>
 8002e96:	d90b      	bls.n	8002eb0 <TIM_SlaveTimer_SetConfig+0x3c>
 8002e98:	2b60      	cmp	r3, #96	; 0x60
 8002e9a:	d027      	beq.n	8002eec <TIM_SlaveTimer_SetConfig+0x78>
 8002e9c:	2b70      	cmp	r3, #112	; 0x70
 8002e9e:	d12c      	bne.n	8002efa <TIM_SlaveTimer_SetConfig+0x86>
      TIM_ETR_SetConfig(htim->Instance,
 8002ea0:	690b      	ldr	r3, [r1, #16]
 8002ea2:	688a      	ldr	r2, [r1, #8]
 8002ea4:	68c9      	ldr	r1, [r1, #12]
 8002ea6:	6800      	ldr	r0, [r0, #0]
 8002ea8:	f7ff ffd8 	bl	8002e5c <TIM_ETR_SetConfig>
  return HAL_OK;
 8002eac:	2000      	movs	r0, #0
}
 8002eae:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d122      	bne.n	8002efa <TIM_SlaveTimer_SetConfig+0x86>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002eb4:	680b      	ldr	r3, [r1, #0]
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d021      	beq.n	8002efe <TIM_SlaveTimer_SetConfig+0x8a>
      tmpccer = htim->Instance->CCER;
 8002eba:	6803      	ldr	r3, [r0, #0]
 8002ebc:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002ec6:	6802      	ldr	r2, [r0, #0]
 8002ec8:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002ece:	6909      	ldr	r1, [r1, #16]
 8002ed0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8002ed4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8002ed6:	6803      	ldr	r3, [r0, #0]
 8002ed8:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 8002eda:	2000      	movs	r0, #0
      break;
 8002edc:	e7e7      	b.n	8002eae <TIM_SlaveTimer_SetConfig+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ede:	690a      	ldr	r2, [r1, #16]
 8002ee0:	6889      	ldr	r1, [r1, #8]
 8002ee2:	6800      	ldr	r0, [r0, #0]
 8002ee4:	f7ff fe10 	bl	8002b08 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 8002ee8:	2000      	movs	r0, #0
      break;
 8002eea:	e7e0      	b.n	8002eae <TIM_SlaveTimer_SetConfig+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eec:	690a      	ldr	r2, [r1, #16]
 8002eee:	6889      	ldr	r1, [r1, #8]
 8002ef0:	6800      	ldr	r0, [r0, #0]
 8002ef2:	f7ff fe1c 	bl	8002b2e <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 8002ef6:	2000      	movs	r0, #0
      break;
 8002ef8:	e7d9      	b.n	8002eae <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 8002efa:	2000      	movs	r0, #0
 8002efc:	e7d7      	b.n	8002eae <TIM_SlaveTimer_SetConfig+0x3a>
        return HAL_ERROR;
 8002efe:	2001      	movs	r0, #1
 8002f00:	e7d5      	b.n	8002eae <TIM_SlaveTimer_SetConfig+0x3a>

08002f02 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8002f02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d024      	beq.n	8002f54 <HAL_TIM_SlaveConfigSynchro+0x52>
{
 8002f0a:	b510      	push	{r4, lr}
 8002f0c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	2302      	movs	r3, #2
 8002f16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002f1a:	f7ff ffab 	bl	8002e74 <TIM_SlaveTimer_SetConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	b988      	cbnz	r0, 8002f46 <HAL_TIM_SlaveConfigSynchro+0x44>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002f22:	6821      	ldr	r1, [r4, #0]
 8002f24:	68ca      	ldr	r2, [r1, #12]
 8002f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2a:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002f2c:	6821      	ldr	r1, [r4, #0]
 8002f2e:	68ca      	ldr	r2, [r1, #12]
 8002f30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f34:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	2201      	movs	r2, #1
 8002f38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8002f52:	e7f6      	b.n	8002f42 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 8002f54:	2302      	movs	r3, #2
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	4770      	bx	lr

08002f5a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f5a:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f5c:	f001 011f 	and.w	r1, r1, #31
 8002f60:	2301      	movs	r3, #1
 8002f62:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f66:	6a03      	ldr	r3, [r0, #32]
 8002f68:	ea23 0304 	bic.w	r3, r3, r4
 8002f6c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f6e:	6a03      	ldr	r3, [r0, #32]
 8002f70:	408a      	lsls	r2, r1
 8002f72:	4313      	orrs	r3, r2
 8002f74:	6203      	str	r3, [r0, #32]
}
 8002f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIM_PWM_Start>:
{
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f80:	2201      	movs	r2, #1
 8002f82:	6800      	ldr	r0, [r0, #0]
 8002f84:	f7ff ffe9 	bl	8002f5a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	4a15      	ldr	r2, [pc, #84]	; (8002fe0 <HAL_TIM_PWM_Start+0x64>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d013      	beq.n	8002fb8 <HAL_TIM_PWM_Start+0x3c>
 8002f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00f      	beq.n	8002fb8 <HAL_TIM_PWM_Start+0x3c>
 8002f98:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_TIM_PWM_Start+0x3c>
 8002fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d007      	beq.n	8002fb8 <HAL_TIM_PWM_Start+0x3c>
 8002fa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <HAL_TIM_PWM_Start+0x3c>
 8002fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d103      	bne.n	8002fc0 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8002fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fbe:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	6891      	ldr	r1, [r2, #8]
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <HAL_TIM_PWM_Start+0x68>)
 8002fc6:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc8:	2b06      	cmp	r3, #6
 8002fca:	d006      	beq.n	8002fda <HAL_TIM_PWM_Start+0x5e>
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_PWM_Start+0x5e>
    __HAL_TIM_ENABLE(htim);
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6013      	str	r3, [r2, #0]
}
 8002fda:	2000      	movs	r0, #0
 8002fdc:	bd10      	pop	{r4, pc}
 8002fde:	bf00      	nop
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	00010007 	.word	0x00010007

08002fe8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002fe8:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fea:	f001 011f 	and.w	r1, r1, #31
 8002fee:	2304      	movs	r3, #4
 8002ff0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002ff4:	6a03      	ldr	r3, [r0, #32]
 8002ff6:	ea23 0304 	bic.w	r3, r3, r4
 8002ffa:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ffc:	6a03      	ldr	r3, [r0, #32]
 8002ffe:	408a      	lsls	r2, r1
 8003000:	4313      	orrs	r3, r2
 8003002:	6203      	str	r3, [r0, #32]
}
 8003004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <HAL_TIMEx_PWMN_Start>:
{
 800300c:	b510      	push	{r4, lr}
 800300e:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003010:	2204      	movs	r2, #4
 8003012:	6800      	ldr	r0, [r0, #0]
 8003014:	f7ff ffe8 	bl	8002fe8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8003018:	6822      	ldr	r2, [r4, #0]
 800301a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800301c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003020:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003022:	6822      	ldr	r2, [r4, #0]
 8003024:	6891      	ldr	r1, [r2, #8]
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_TIMEx_PWMN_Start+0x34>)
 8003028:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302a:	2b06      	cmp	r3, #6
 800302c:	d006      	beq.n	800303c <HAL_TIMEx_PWMN_Start+0x30>
 800302e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003032:	d003      	beq.n	800303c <HAL_TIMEx_PWMN_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 8003034:	6813      	ldr	r3, [r2, #0]
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6013      	str	r3, [r2, #0]
}
 800303c:	2000      	movs	r0, #0
 800303e:	bd10      	pop	{r4, pc}
 8003040:	00010007 	.word	0x00010007

08003044 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8003044:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d046      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 800304c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800304e:	2301      	movs	r3, #1
 8003050:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	2302      	movs	r3, #2
 8003056:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800305a:	6802      	ldr	r2, [r0, #0]
 800305c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800305e:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003060:	4c1f      	ldr	r4, [pc, #124]	; (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003062:	42a2      	cmp	r2, r4
 8003064:	d007      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8003066:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800306a:	42a2      	cmp	r2, r4
 800306c:	d003      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800306e:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003072:	42a2      	cmp	r2, r4
 8003074:	d103      	bne.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003076:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800307a:	684c      	ldr	r4, [r1, #4]
 800307c:	4323      	orrs	r3, r4
  tmpcr2 &= ~TIM_CR2_MMS;
 800307e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003082:	680c      	ldr	r4, [r1, #0]
 8003084:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8003086:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003088:	6803      	ldr	r3, [r0, #0]
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d016      	beq.n	80030be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003094:	d013      	beq.n	80030be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003096:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800309a:	4293      	cmp	r3, r2
 800309c:	d00f      	beq.n	80030be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800309e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00b      	beq.n	80030be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030a6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d007      	beq.n	80030be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030ae:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d104      	bne.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030be:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030c2:	688a      	ldr	r2, [r1, #8]
 80030c4:	4315      	orrs	r5, r2
    htim->Instance->SMCR = tmpsmcr;
 80030c6:	609d      	str	r5, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80030ce:	2300      	movs	r3, #0
 80030d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80030d4:	4618      	mov	r0, r3
}
 80030d6:	bc30      	pop	{r4, r5}
 80030d8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80030da:	2002      	movs	r0, #2
}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40012c00 	.word	0x40012c00

080030e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80030e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d042      	beq.n	8003172 <HAL_TIMEx_ConfigBreakDeadTime+0x8e>
{
 80030ec:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80030ee:	2301      	movs	r3, #1
 80030f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030f4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fa:	688a      	ldr	r2, [r1, #8]
 80030fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003102:	684a      	ldr	r2, [r1, #4]
 8003104:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800310a:	680a      	ldr	r2, [r1, #0]
 800310c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800310e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003112:	690a      	ldr	r2, [r1, #16]
 8003114:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800311a:	694a      	ldr	r2, [r1, #20]
 800311c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800311e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003122:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003124:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003126:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800312a:	698a      	ldr	r2, [r1, #24]
 800312c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003130:	6802      	ldr	r2, [r0, #0]
 8003132:	4c11      	ldr	r4, [pc, #68]	; (8003178 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8003134:	42a2      	cmp	r2, r4
 8003136:	d007      	beq.n	8003148 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8003138:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800313c:	42a2      	cmp	r2, r4
 800313e:	d003      	beq.n	8003148 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8003140:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003144:	42a2      	cmp	r2, r4
 8003146:	d10c      	bne.n	8003162 <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003148:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800314c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800314e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003156:	69cc      	ldr	r4, [r1, #28]
 8003158:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800315a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800315e:	6a09      	ldr	r1, [r1, #32]
 8003160:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003162:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003164:	2300      	movs	r3, #0
 8003166:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800316a:	4618      	mov	r0, r3
}
 800316c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003170:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003172:	2002      	movs	r0, #2
}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40012c00 	.word	0x40012c00

0800317c <__libc_init_array>:
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	4e0d      	ldr	r6, [pc, #52]	; (80031b4 <__libc_init_array+0x38>)
 8003180:	4c0d      	ldr	r4, [pc, #52]	; (80031b8 <__libc_init_array+0x3c>)
 8003182:	1ba4      	subs	r4, r4, r6
 8003184:	10a4      	asrs	r4, r4, #2
 8003186:	2500      	movs	r5, #0
 8003188:	42a5      	cmp	r5, r4
 800318a:	d109      	bne.n	80031a0 <__libc_init_array+0x24>
 800318c:	4e0b      	ldr	r6, [pc, #44]	; (80031bc <__libc_init_array+0x40>)
 800318e:	4c0c      	ldr	r4, [pc, #48]	; (80031c0 <__libc_init_array+0x44>)
 8003190:	f000 f820 	bl	80031d4 <_init>
 8003194:	1ba4      	subs	r4, r4, r6
 8003196:	10a4      	asrs	r4, r4, #2
 8003198:	2500      	movs	r5, #0
 800319a:	42a5      	cmp	r5, r4
 800319c:	d105      	bne.n	80031aa <__libc_init_array+0x2e>
 800319e:	bd70      	pop	{r4, r5, r6, pc}
 80031a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031a4:	4798      	blx	r3
 80031a6:	3501      	adds	r5, #1
 80031a8:	e7ee      	b.n	8003188 <__libc_init_array+0xc>
 80031aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ae:	4798      	blx	r3
 80031b0:	3501      	adds	r5, #1
 80031b2:	e7f2      	b.n	800319a <__libc_init_array+0x1e>
 80031b4:	0800321c 	.word	0x0800321c
 80031b8:	0800321c 	.word	0x0800321c
 80031bc:	0800321c 	.word	0x0800321c
 80031c0:	08003220 	.word	0x08003220

080031c4 <memset>:
 80031c4:	4402      	add	r2, r0
 80031c6:	4603      	mov	r3, r0
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d100      	bne.n	80031ce <memset+0xa>
 80031cc:	4770      	bx	lr
 80031ce:	f803 1b01 	strb.w	r1, [r3], #1
 80031d2:	e7f9      	b.n	80031c8 <memset+0x4>

080031d4 <_init>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	bf00      	nop
 80031d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031da:	bc08      	pop	{r3}
 80031dc:	469e      	mov	lr, r3
 80031de:	4770      	bx	lr

080031e0 <_fini>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr
