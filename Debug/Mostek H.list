
Mostek H.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000468c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800485c  0800485c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800485c  0800485c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800485c  0800485c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004860  08004860  00014860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000010  08004874  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08004874  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c00  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000232e  00000000  00000000  00032c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b097  00000000  00000000  00034f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000e98  00000000  00000000  00040008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e58  00000000  00000000  00040ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001ea0b  00000000  00000000  00041cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c13e  00000000  00000000  00060703  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000b9e7c  00000000  00000000  0006c841  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001266bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028e4  00000000  00000000  00126738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800480c 	.word	0x0800480c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800480c 	.word	0x0800480c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	2400      	movs	r4, #0
 8000b6a:	9405      	str	r4, [sp, #20]
 8000b6c:	9406      	str	r4, [sp, #24]
 8000b6e:	9407      	str	r4, [sp, #28]
 8000b70:	9408      	str	r4, [sp, #32]
 8000b72:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000b84:	9201      	str	r2, [sp, #4]
 8000b86:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b88:	695a      	ldr	r2, [r3, #20]
 8000b8a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000b96:	9202      	str	r2, [sp, #8]
 8000b98:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	695a      	ldr	r2, [r3, #20]
 8000b9c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ba0:	615a      	str	r2, [r3, #20]
 8000ba2:	695a      	ldr	r2, [r3, #20]
 8000ba4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000ba8:	9203      	str	r2, [sp, #12]
 8000baa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000bb2:	615a      	str	r2, [r3, #20]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bba:	9304      	str	r3, [sp, #16]
 8000bbc:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f002 f883 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000bca:	4e18      	ldr	r6, [pc, #96]	; (8000c2c <MX_GPIO_Init+0xc8>)
 8000bcc:	4622      	mov	r2, r4
 8000bce:	2130      	movs	r1, #48	; 0x30
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	f002 f87d 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bda:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_GPIO_Init+0xcc>)
 8000bde:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be2:	a905      	add	r1, sp, #20
 8000be4:	4813      	ldr	r0, [pc, #76]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000be6:	f001 ff9d 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bea:	2320      	movs	r3, #32
 8000bec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2501      	movs	r5, #1
 8000bf0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	a905      	add	r1, sp, #20
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f001 ff92 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c00:	2330      	movs	r3, #48	; 0x30
 8000c02:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	a905      	add	r1, sp, #20
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	f001 ff89 	bl	8002b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000c12:	4622      	mov	r2, r4
 8000c14:	4629      	mov	r1, r5
 8000c16:	2028      	movs	r0, #40	; 0x28
 8000c18:	f001 fe34 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c1c:	2028      	movs	r0, #40	; 0x28
 8000c1e:	f001 fe65 	bl	80028ec <HAL_NVIC_EnableIRQ>

}
 8000c22:	b00a      	add	sp, #40	; 0x28
 8000c24:	bd70      	pop	{r4, r5, r6, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	10110000 	.word	0x10110000
 8000c34:	48000800 	.word	0x48000800

08000c38 <MX_DMA_Init>:
{
 8000c38:	b500      	push	{lr}
 8000c3a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_DMA_Init+0x40>)
 8000c3e:	695a      	ldr	r2, [r3, #20]
 8000c40:	f042 0201 	orr.w	r2, r2, #1
 8000c44:	615a      	str	r2, [r3, #20]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	4611      	mov	r1, r2
 8000c54:	200b      	movs	r0, #11
 8000c56:	f001 fe15 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c5a:	200b      	movs	r0, #11
 8000c5c:	f001 fe46 	bl	80028ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	4611      	mov	r1, r2
 8000c64:	2011      	movs	r0, #17
 8000c66:	f001 fe0d 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c6a:	2011      	movs	r0, #17
 8000c6c:	f001 fe3e 	bl	80028ec <HAL_NVIC_EnableIRQ>
}
 8000c70:	b003      	add	sp, #12
 8000c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <MX_ADC1_Init>:
{
 8000c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7e:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8000c80:	2400      	movs	r4, #0
 8000c82:	9407      	str	r4, [sp, #28]
 8000c84:	9408      	str	r4, [sp, #32]
 8000c86:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c88:	9401      	str	r4, [sp, #4]
 8000c8a:	9402      	str	r4, [sp, #8]
 8000c8c:	9403      	str	r4, [sp, #12]
 8000c8e:	9404      	str	r4, [sp, #16]
 8000c90:	9405      	str	r4, [sp, #20]
 8000c92:	9406      	str	r4, [sp, #24]
  hadc1.Instance = ADC1;
 8000c94:	4d1a      	ldr	r5, [pc, #104]	; (8000d00 <MX_ADC1_Init+0x84>)
 8000c96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c9a:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c9c:	606c      	str	r4, [r5, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9e:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ca0:	2601      	movs	r6, #1
 8000ca2:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca4:	766c      	strb	r4, [r5, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca6:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cae:	62eb      	str	r3, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_TRGO;
 8000cb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb4:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb6:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000cb8:	2702      	movs	r7, #2
 8000cba:	61ef      	str	r7, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cbc:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	616b      	str	r3, [r5, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cc4:	762c      	strb	r4, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cc6:	636c      	str	r4, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc8:	4628      	mov	r0, r5
 8000cca:	f000 ff17 	bl	8001afc <HAL_ADC_Init>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cce:	9407      	str	r4, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cd0:	a907      	add	r1, sp, #28
 8000cd2:	4628      	mov	r0, r5
 8000cd4:	f001 fd18 	bl	8002708 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8000cd8:	9601      	str	r6, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cda:	9602      	str	r6, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cdc:	9404      	str	r4, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce2:	9405      	str	r4, [sp, #20]
  sConfig.Offset = 0;
 8000ce4:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce6:	a901      	add	r1, sp, #4
 8000ce8:	4628      	mov	r0, r5
 8000cea:	f001 fb37 	bl	800235c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8000cee:	9701      	str	r7, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cf0:	9702      	str	r7, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf2:	a901      	add	r1, sp, #4
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	f001 fb31 	bl	800235c <HAL_ADC_ConfigChannel>
}
 8000cfa:	b00b      	add	sp, #44	; 0x2c
 8000cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000140 	.word	0x20000140

08000d04 <MX_TIM1_Init>:
{
 8000d04:	b530      	push	{r4, r5, lr}
 8000d06:	b097      	sub	sp, #92	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	2400      	movs	r4, #0
 8000d0a:	9413      	str	r4, [sp, #76]	; 0x4c
 8000d0c:	9414      	str	r4, [sp, #80]	; 0x50
 8000d0e:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d10:	940c      	str	r4, [sp, #48]	; 0x30
 8000d12:	940d      	str	r4, [sp, #52]	; 0x34
 8000d14:	940e      	str	r4, [sp, #56]	; 0x38
 8000d16:	940f      	str	r4, [sp, #60]	; 0x3c
 8000d18:	9410      	str	r4, [sp, #64]	; 0x40
 8000d1a:	9411      	str	r4, [sp, #68]	; 0x44
 8000d1c:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d1e:	222c      	movs	r2, #44	; 0x2c
 8000d20:	4621      	mov	r1, r4
 8000d22:	a801      	add	r0, sp, #4
 8000d24:	f003 fd6a 	bl	80047fc <memset>
  htim1.Instance = TIM1;
 8000d28:	4d1d      	ldr	r5, [pc, #116]	; (8000da0 <MX_TIM1_Init+0x9c>)
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_TIM1_Init+0xa0>)
 8000d2c:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8000d2e:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 14399;
 8000d32:	f643 033f 	movw	r3, #14399	; 0x383f
 8000d36:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3a:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d3e:	4628      	mov	r0, r5
 8000d40:	f002 ffc1 	bl	8003cc6 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d44:	2320      	movs	r3, #32
 8000d46:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d48:	9414      	str	r4, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d4c:	a913      	add	r1, sp, #76	; 0x4c
 8000d4e:	4628      	mov	r0, r5
 8000d50:	f003 fa1e 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d54:	2360      	movs	r3, #96	; 0x60
 8000d56:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000d58:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5a:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d5c:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5e:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d60:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d62:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d64:	4622      	mov	r2, r4
 8000d66:	a90c      	add	r1, sp, #48	; 0x30
 8000d68:	4628      	mov	r0, r5
 8000d6a:	f003 f861 	bl	8003e30 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d6e:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d70:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d72:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8000d74:	2332      	movs	r3, #50	; 0x32
 8000d76:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d78:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7e:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d80:	9407      	str	r4, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d82:	9408      	str	r4, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d88:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d8a:	940a      	str	r4, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d8c:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d8e:	a901      	add	r1, sp, #4
 8000d90:	4628      	mov	r0, r5
 8000d92:	f003 fa4d 	bl	8004230 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000d96:	4628      	mov	r0, r5
 8000d98:	f000 fcb8 	bl	800170c <HAL_TIM_MspPostInit>
}
 8000d9c:	b017      	add	sp, #92	; 0x5c
 8000d9e:	bd30      	pop	{r4, r5, pc}
 8000da0:	20000220 	.word	0x20000220
 8000da4:	40012c00 	.word	0x40012c00

08000da8 <MX_TIM4_Init>:
{
 8000da8:	b530      	push	{r4, r5, lr}
 8000daa:	b089      	sub	sp, #36	; 0x24
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dac:	2400      	movs	r4, #0
 8000dae:	9403      	str	r4, [sp, #12]
 8000db0:	9404      	str	r4, [sp, #16]
 8000db2:	9405      	str	r4, [sp, #20]
 8000db4:	9406      	str	r4, [sp, #24]
 8000db6:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db8:	9400      	str	r4, [sp, #0]
 8000dba:	9401      	str	r4, [sp, #4]
 8000dbc:	9402      	str	r4, [sp, #8]
  htim4.Instance = TIM4;
 8000dbe:	4d0f      	ldr	r5, [pc, #60]	; (8000dfc <MX_TIM4_Init+0x54>)
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_TIM4_Init+0x58>)
 8000dc2:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 0;
 8000dc4:	606c      	str	r4, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 1799;
 8000dc8:	f240 7307 	movw	r3, #1799	; 0x707
 8000dcc:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	f002 ff5e 	bl	8003c94 <HAL_TIM_Base_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000dd8:	2306      	movs	r3, #6
 8000dda:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ddc:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000dde:	a903      	add	r1, sp, #12
 8000de0:	4628      	mov	r0, r5
 8000de2:	f003 f912 	bl	800400a <HAL_TIM_SlaveConfigSynchro>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000de6:	2320      	movs	r3, #32
 8000de8:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dee:	4669      	mov	r1, sp
 8000df0:	4628      	mov	r0, r5
 8000df2:	f003 f9cd 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000df6:	b009      	add	sp, #36	; 0x24
 8000df8:	bd30      	pop	{r4, r5, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000038 	.word	0x20000038
 8000e00:	40000800 	.word	0x40000800

08000e04 <MX_TIM3_Init>:
{
 8000e04:	b530      	push	{r4, r5, lr}
 8000e06:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e08:	2220      	movs	r2, #32
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	a804      	add	r0, sp, #16
 8000e0e:	f003 fcf5 	bl	80047fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	2400      	movs	r4, #0
 8000e14:	9400      	str	r4, [sp, #0]
 8000e16:	9401      	str	r4, [sp, #4]
 8000e18:	9402      	str	r4, [sp, #8]
  htim3.Instance = TIM3;
 8000e1a:	4d0d      	ldr	r5, [pc, #52]	; (8000e50 <MX_TIM3_Init+0x4c>)
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <MX_TIM3_Init+0x50>)
 8000e1e:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 0;
 8000e20:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 65534;
 8000e24:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000e28:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2a:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2c:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e32:	2301      	movs	r3, #1
 8000e34:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e36:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e38:	a903      	add	r1, sp, #12
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	f002 ff5c 	bl	8003cf8 <HAL_TIM_Encoder_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e44:	4669      	mov	r1, sp
 8000e46:	4628      	mov	r0, r5
 8000e48:	f003 f9a2 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000e4c:	b00d      	add	sp, #52	; 0x34
 8000e4e:	bd30      	pop	{r4, r5, pc}
 8000e50:	20000100 	.word	0x20000100
 8000e54:	40000400 	.word	0x40000400

08000e58 <MX_USART2_UART_Init>:
{
 8000e58:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000e5a:	4809      	ldr	r0, [pc, #36]	; (8000e80 <MX_USART2_UART_Init+0x28>)
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_USART2_UART_Init+0x2c>)
 8000e5e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000e60:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e64:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	2300      	movs	r3, #0
 8000e68:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e6e:	220c      	movs	r2, #12
 8000e70:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e76:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e78:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7a:	f003 fc6a 	bl	8004752 <HAL_UART_Init>
}
 8000e7e:	bd08      	pop	{r3, pc}
 8000e80:	200002e0 	.word	0x200002e0
 8000e84:	40004400 	.word	0x40004400

08000e88 <SystemClock_Config>:
{
 8000e88:	b530      	push	{r4, r5, lr}
 8000e8a:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8c:	2224      	movs	r2, #36	; 0x24
 8000e8e:	2100      	movs	r1, #0
 8000e90:	a81d      	add	r0, sp, #116	; 0x74
 8000e92:	f003 fcb3 	bl	80047fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e96:	2400      	movs	r4, #0
 8000e98:	9417      	str	r4, [sp, #92]	; 0x5c
 8000e9a:	9418      	str	r4, [sp, #96]	; 0x60
 8000e9c:	9419      	str	r4, [sp, #100]	; 0x64
 8000e9e:	941a      	str	r4, [sp, #104]	; 0x68
 8000ea0:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea2:	2258      	movs	r2, #88	; 0x58
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	a801      	add	r0, sp, #4
 8000ea8:	f003 fca8 	bl	80047fc <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eac:	2502      	movs	r5, #2
 8000eae:	951c      	str	r5, [sp, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb8:	9522      	str	r5, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ebe:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ec0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ec4:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	a81c      	add	r0, sp, #112	; 0x70
 8000ec8:	f001 ff16 	bl	8002cf8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	230f      	movs	r3, #15
 8000ece:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed0:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed8:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eda:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000edc:	4629      	mov	r1, r5
 8000ede:	a817      	add	r0, sp, #92	; 0x5c
 8000ee0:	f002 fa70 	bl	80033c4 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <SystemClock_Config+0x80>)
 8000ee6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee8:	9404      	str	r4, [sp, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV2;
 8000eea:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000eee:	930b      	str	r3, [sp, #44]	; 0x2c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8000ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef4:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 8000ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efa:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efc:	a801      	add	r0, sp, #4
 8000efe:	f002 fb65 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
}
 8000f02:	b027      	add	sp, #156	; 0x9c
 8000f04:	bd30      	pop	{r4, r5, pc}
 8000f06:	bf00      	nop
 8000f08:	00201082 	.word	0x00201082

08000f0c <main>:
{
 8000f0c:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8000f0e:	f000 fd1b 	bl	8001948 <HAL_Init>
  SystemClock_Config();
 8000f12:	f7ff ffb9 	bl	8000e88 <SystemClock_Config>
  MX_GPIO_Init();
 8000f16:	f7ff fe25 	bl	8000b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f1a:	f7ff fe8d 	bl	8000c38 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f1e:	f7ff fead 	bl	8000c7c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f22:	f7ff feef 	bl	8000d04 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000f26:	f7ff ff3f 	bl	8000da8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f2a:	f7ff ff6b 	bl	8000e04 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f2e:	f7ff ff93 	bl	8000e58 <MX_USART2_UART_Init>
  HAL_TIM_PWM_Init(&htim1);
 8000f32:	4c71      	ldr	r4, [pc, #452]	; (80010f8 <main+0x1ec>)
 8000f34:	4620      	mov	r0, r4
 8000f36:	f002 fec6 	bl	8003cc6 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f003 f8a1 	bl	8004084 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f42:	2100      	movs	r1, #0
 8000f44:	4620      	mov	r0, r4
 8000f46:	f003 f907 	bl	8004158 <HAL_TIMEx_PWMN_Start>
  TIM1 -> CCR1 = 7200;
 8000f4a:	4b6c      	ldr	r3, [pc, #432]	; (80010fc <main+0x1f0>)
 8000f4c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f52:	213c      	movs	r1, #60	; 0x3c
 8000f54:	486a      	ldr	r0, [pc, #424]	; (8001100 <main+0x1f4>)
 8000f56:	f003 f8cb 	bl	80040f0 <HAL_TIM_Encoder_Start>
  HAL_ADC_Start_DMA(&hadc1, &raw_adc_values[0], 2);
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	4969      	ldr	r1, [pc, #420]	; (8001104 <main+0x1f8>)
 8000f5e:	486a      	ldr	r0, [pc, #424]	; (8001108 <main+0x1fc>)
 8000f60:	f000 ff2a 	bl	8001db8 <HAL_ADC_Start_DMA>
  while(cycle < N){
 8000f64:	4b69      	ldr	r3, [pc, #420]	; (800110c <main+0x200>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	d94f      	bls.n	800100e <main+0x102>
  cycle = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	4a66      	ldr	r2, [pc, #408]	; (800110c <main+0x200>)
 8000f72:	7013      	strb	r3, [r2, #0]
  movingAverageSum = 0;
 8000f74:	4a66      	ldr	r2, [pc, #408]	; (8001110 <main+0x204>)
 8000f76:	6013      	str	r3, [r2, #0]
  for(uint8_t i = 0; i < N; i++){
 8000f78:	2b07      	cmp	r3, #7
 8000f7a:	d94f      	bls.n	800101c <main+0x110>
  movingAverage = movingAverageSum / N;
 8000f7c:	4b64      	ldr	r3, [pc, #400]	; (8001110 <main+0x204>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	08db      	lsrs	r3, r3, #3
 8000f82:	4a64      	ldr	r2, [pc, #400]	; (8001114 <main+0x208>)
 8000f84:	6013      	str	r3, [r2, #0]
  zero_current = movingAverage;
 8000f86:	6813      	ldr	r3, [r2, #0]
 8000f88:	4d63      	ldr	r5, [pc, #396]	; (8001118 <main+0x20c>)
 8000f8a:	602b      	str	r3, [r5, #0]
  PID_Init(&speed_regulator, 3.8, 2.0, 7.0, 0.005, 3.0, -2048.0, 2048.0, 0.0, 0.0);
 8000f8c:	eddf 3a63 	vldr	s7, [pc, #396]	; 800111c <main+0x210>
 8000f90:	4e63      	ldr	r6, [pc, #396]	; (8001120 <main+0x214>)
 8000f92:	eeb0 4a63 	vmov.f32	s8, s7
 8000f96:	ed9f 3a63 	vldr	s6, [pc, #396]	; 8001124 <main+0x218>
 8000f9a:	eddf 2a63 	vldr	s5, [pc, #396]	; 8001128 <main+0x21c>
 8000f9e:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 8000fa2:	eddf 1a62 	vldr	s3, [pc, #392]	; 800112c <main+0x220>
 8000fa6:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8000faa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000fae:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8001130 <main+0x224>
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	f000 fa35 	bl	8001422 <PID_Init>
  PID_Init(&current_regulator, 2.5, 2.0, 7.0, 0.001, 10.0, 720.0, 13680.0, 7200.0, (float)zero_current);
 8000fb8:	ed95 4a00 	vldr	s8, [r5]
 8000fbc:	4c5d      	ldr	r4, [pc, #372]	; (8001134 <main+0x228>)
 8000fbe:	eeb8 4a44 	vcvt.f32.u32	s8, s8
 8000fc2:	eddf 3a5d 	vldr	s7, [pc, #372]	; 8001138 <main+0x22c>
 8000fc6:	ed9f 3a5d 	vldr	s6, [pc, #372]	; 800113c <main+0x230>
 8000fca:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8001140 <main+0x234>
 8000fce:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 8000fd2:	eddf 1a5c 	vldr	s3, [pc, #368]	; 8001144 <main+0x238>
 8000fd6:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8000fda:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000fde:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f000 fa1d 	bl	8001422 <PID_Init>
  current_regulator.input_raw = (float)zero_current;
 8000fe8:	edd5 7a00 	vldr	s15, [r5]
 8000fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ff0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  PID_TurnOn(&current_regulator);
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f000 faa6 	bl	8001546 <PID_TurnOn>
  PID_TurnOn(&speed_regulator);
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f000 faa3 	bl	8001546 <PID_TurnOn>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2120      	movs	r1, #32
 8001004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001008:	f001 fe62 	bl	8002cd0 <HAL_GPIO_WritePin>
 800100c:	e02d      	b.n	800106a <main+0x15e>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2120      	movs	r1, #32
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f001 fe5b 	bl	8002cd0 <HAL_GPIO_WritePin>
 800101a:	e7a3      	b.n	8000f64 <main+0x58>
  	movingAverageSum += values[i];
 800101c:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <main+0x23c>)
 800101e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001022:	493b      	ldr	r1, [pc, #236]	; (8001110 <main+0x204>)
 8001024:	680a      	ldr	r2, [r1, #0]
 8001026:	4402      	add	r2, r0
 8001028:	600a      	str	r2, [r1, #0]
  for(uint8_t i = 0; i < N; i++){
 800102a:	3301      	adds	r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	e7a3      	b.n	8000f78 <main+0x6c>
			  movingAverageSum += values[i];
 8001030:	4a45      	ldr	r2, [pc, #276]	; (8001148 <main+0x23c>)
 8001032:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001036:	4936      	ldr	r1, [pc, #216]	; (8001110 <main+0x204>)
 8001038:	680a      	ldr	r2, [r1, #0]
 800103a:	4402      	add	r2, r0
 800103c:	600a      	str	r2, [r1, #0]
		  for(uint8_t i = 0; i < N; i++){
 800103e:	3301      	adds	r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b07      	cmp	r3, #7
 8001044:	d9f4      	bls.n	8001030 <main+0x124>
		  average_values[samples] = movingAverageSum / N;
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <main+0x204>)
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	4a40      	ldr	r2, [pc, #256]	; (800114c <main+0x240>)
 800104c:	7813      	ldrb	r3, [r2, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	08c9      	lsrs	r1, r1, #3
 8001052:	483f      	ldr	r0, [pc, #252]	; (8001150 <main+0x244>)
 8001054:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  samples++;
 8001058:	7813      	ldrb	r3, [r2, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7013      	strb	r3, [r2, #0]
	  if(samples == 10){
 8001060:	4b3a      	ldr	r3, [pc, #232]	; (800114c <main+0x240>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b0a      	cmp	r3, #10
 8001068:	d00a      	beq.n	8001080 <main+0x174>
	  if(cycle >= N){
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <main+0x200>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b07      	cmp	r3, #7
 8001072:	d9f5      	bls.n	8001060 <main+0x154>
		  cycle = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	4a25      	ldr	r2, [pc, #148]	; (800110c <main+0x200>)
 8001078:	7013      	strb	r3, [r2, #0]
		  movingAverageSum = 0;
 800107a:	4a25      	ldr	r2, [pc, #148]	; (8001110 <main+0x204>)
 800107c:	6013      	str	r3, [r2, #0]
		  for(uint8_t i = 0; i < N; i++){
 800107e:	e7e0      	b.n	8001042 <main+0x136>
		  samples = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	4a32      	ldr	r2, [pc, #200]	; (800114c <main+0x240>)
 8001084:	7013      	strb	r3, [r2, #0]
		  movingAverageSum = 0;
 8001086:	4a22      	ldr	r2, [pc, #136]	; (8001110 <main+0x204>)
 8001088:	6013      	str	r3, [r2, #0]
		  for(uint8_t i = 0; i < 10; i++){
 800108a:	e008      	b.n	800109e <main+0x192>
		  	movingAverageSum += average_values[i];
 800108c:	4a30      	ldr	r2, [pc, #192]	; (8001150 <main+0x244>)
 800108e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001092:	491f      	ldr	r1, [pc, #124]	; (8001110 <main+0x204>)
 8001094:	680a      	ldr	r2, [r1, #0]
 8001096:	4402      	add	r2, r0
 8001098:	600a      	str	r2, [r1, #0]
		  for(uint8_t i = 0; i < 10; i++){
 800109a:	3301      	adds	r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b09      	cmp	r3, #9
 80010a0:	d9f4      	bls.n	800108c <main+0x180>
		  current_regulator.input_raw = ((float)movingAverageSum) / 10.0;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <main+0x204>)
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80010b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <main+0x228>)
 80010b6:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
		  if(run) ref_normalized = ((float)(raw_adc_values[1] >> 1) * rev)/2048.0;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <main+0x248>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b1bb      	cbz	r3, 80010f0 <main+0x1e4>
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <main+0x1f8>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	085b      	lsrs	r3, r3, #1
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <main+0x24c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800115c <main+0x250>
 80010e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <main+0x254>)
 80010ea:	edc3 7a00 	vstr	s15, [r3]
 80010ee:	e7bc      	b.n	800106a <main+0x15e>
		  else ref_normalized = 0.0;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <main+0x254>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e7b8      	b.n	800106a <main+0x15e>
 80010f8:	20000220 	.word	0x20000220
 80010fc:	40012c00 	.word	0x40012c00
 8001100:	20000100 	.word	0x20000100
 8001104:	200000f8 	.word	0x200000f8
 8001108:	20000140 	.word	0x20000140
 800110c:	2000002c 	.word	0x2000002c
 8001110:	200001d8 	.word	0x200001d8
 8001114:	2000009c 	.word	0x2000009c
 8001118:	20000360 	.word	0x20000360
 800111c:	00000000 	.word	0x00000000
 8001120:	20000260 	.word	0x20000260
 8001124:	45000000 	.word	0x45000000
 8001128:	c5000000 	.word	0xc5000000
 800112c:	3ba3d70a 	.word	0x3ba3d70a
 8001130:	40733333 	.word	0x40733333
 8001134:	200000a0 	.word	0x200000a0
 8001138:	45e10000 	.word	0x45e10000
 800113c:	4655c000 	.word	0x4655c000
 8001140:	44340000 	.word	0x44340000
 8001144:	3a83126f 	.word	0x3a83126f
 8001148:	2000007c 	.word	0x2000007c
 800114c:	20000030 	.word	0x20000030
 8001150:	200002b4 	.word	0x200002b4
 8001154:	2000002f 	.word	0x2000002f
 8001158:	20000001 	.word	0x20000001
 800115c:	3a000000 	.word	0x3a000000
 8001160:	200000f4 	.word	0x200000f4

08001164 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
	//rev *= -1;
	run = !run;
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <HAL_GPIO_EXTI_Callback+0x10>)
 8001166:	7813      	ldrb	r3, [r2, #0]
 8001168:	fab3 f383 	clz	r3, r3
 800116c:	095b      	lsrs	r3, r3, #5
 800116e:	7013      	strb	r3, [r2, #0]
}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	2000002f 	.word	0x2000002f

08001178 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc){
	values[cycle] = raw_adc_values[0];
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_ADC_ConvCpltCallback+0x1c>)
 800117a:	7813      	ldrb	r3, [r2, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4906      	ldr	r1, [pc, #24]	; (8001198 <HAL_ADC_ConvCpltCallback+0x20>)
 8001180:	6808      	ldr	r0, [r1, #0]
 8001182:	4906      	ldr	r1, [pc, #24]	; (800119c <HAL_ADC_ConvCpltCallback+0x24>)
 8001184:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	cycle++;
 8001188:	7813      	ldrb	r3, [r2, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	7013      	strb	r3, [r2, #0]
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000002c 	.word	0x2000002c
 8001198:	200000f8 	.word	0x200000f8
 800119c:	2000007c 	.word	0x2000007c

080011a0 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback (void){
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	ed2d 8b02 	vpush	{d8}
	cyclespeed++;
 80011a6:	4a8e      	ldr	r2, [pc, #568]	; (80013e0 <HAL_SYSTICK_Callback+0x240>)
 80011a8:	7813      	ldrb	r3, [r2, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	7013      	strb	r3, [r2, #0]
	samples = 0;
 80011b0:	4a8c      	ldr	r2, [pc, #560]	; (80013e4 <HAL_SYSTICK_Callback+0x244>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	7011      	strb	r1, [r2, #0]

	if(control_loop == 1){
 80011b6:	4a8c      	ldr	r2, [pc, #560]	; (80013e8 <HAL_SYSTICK_Callback+0x248>)
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	2a01      	cmp	r2, #1
 80011bc:	d024      	beq.n	8001208 <HAL_SYSTICK_Callback+0x68>
		current_regulator.reference = ref_ramp * 2048.0;
	}

	if(cyclespeed == 10){
 80011be:	2b0a      	cmp	r3, #10
 80011c0:	d02d      	beq.n	800121e <HAL_SYSTICK_Callback+0x7e>
			current_regulator.reference = speed_regulator.output;
		}
		PID_Controller(&speed_regulator);
	}

	PID_Controller(&current_regulator);
 80011c2:	488a      	ldr	r0, [pc, #552]	; (80013ec <HAL_SYSTICK_Callback+0x24c>)
 80011c4:	f000 f940 	bl	8001448 <PID_Controller>

	if(control_loop){
 80011c8:	4b87      	ldr	r3, [pc, #540]	; (80013e8 <HAL_SYSTICK_Callback+0x248>)
 80011ca:	781c      	ldrb	r4, [r3, #0]
 80011cc:	2c00      	cmp	r4, #0
 80011ce:	f000 80bf 	beq.w	8001350 <HAL_SYSTICK_Callback+0x1b0>
		TIM1 -> CCR1 = (uint32_t)current_regulator.output;
 80011d2:	4b86      	ldr	r3, [pc, #536]	; (80013ec <HAL_SYSTICK_Callback+0x24c>)
 80011d4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80011d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011dc:	4b84      	ldr	r3, [pc, #528]	; (80013f0 <HAL_SYSTICK_Callback+0x250>)
 80011de:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	}else{
		TIM1 -> CCR1 = (uint32_t)(7200.0 + ref_ramp * 6480.0);
	}

	if((control_loop == 0) && (last_control_loop != control_loop)){
 80011e2:	b924      	cbnz	r4, 80011ee <HAL_SYSTICK_Callback+0x4e>
 80011e4:	4b83      	ldr	r3, [pc, #524]	; (80013f4 <HAL_SYSTICK_Callback+0x254>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	429c      	cmp	r4, r3
 80011ea:	f040 80c4 	bne.w	8001376 <HAL_SYSTICK_Callback+0x1d6>
		PID_TurnOff(&speed_regulator);
		PID_TurnOff(&current_regulator);
	}else if((control_loop == 1) && (control_loop != last_control_loop)){
 80011ee:	2c01      	cmp	r4, #1
 80011f0:	f000 80c8 	beq.w	8001384 <HAL_SYSTICK_Callback+0x1e4>
		PID_TurnOn(&current_regulator);
		PID_TurnOff(&speed_regulator);
	}else if((control_loop == 2) && (last_control_loop != control_loop)){
 80011f4:	2c02      	cmp	r4, #2
 80011f6:	f000 80d1 	beq.w	800139c <HAL_SYSTICK_Callback+0x1fc>
		PID_TurnOn(&speed_regulator);
		PID_TurnOn(&current_regulator);
	}
	last_control_loop = control_loop;
 80011fa:	4b7b      	ldr	r3, [pc, #492]	; (80013e8 <HAL_SYSTICK_Callback+0x248>)
 80011fc:	781a      	ldrb	r2, [r3, #0]
 80011fe:	4b7d      	ldr	r3, [pc, #500]	; (80013f4 <HAL_SYSTICK_Callback+0x254>)
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	ecbd 8b02 	vpop	{d8}
 8001206:	bd38      	pop	{r3, r4, r5, pc}
		current_regulator.reference = ref_ramp * 2048.0;
 8001208:	4a7b      	ldr	r2, [pc, #492]	; (80013f8 <HAL_SYSTICK_Callback+0x258>)
 800120a:	edd2 7a00 	vldr	s15, [r2]
 800120e:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80013fc <HAL_SYSTICK_Callback+0x25c>
 8001212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001216:	4a75      	ldr	r2, [pc, #468]	; (80013ec <HAL_SYSTICK_Callback+0x24c>)
 8001218:	edc2 7a07 	vstr	s15, [r2, #28]
 800121c:	e7cf      	b.n	80011be <HAL_SYSTICK_Callback+0x1e>
		if(ref_normalized - ref_ramp > RAMP_STEP) ref_ramp += RAMP_STEP;
 800121e:	4b78      	ldr	r3, [pc, #480]	; (8001400 <HAL_SYSTICK_Callback+0x260>)
 8001220:	edd3 8a00 	vldr	s17, [r3]
 8001224:	4b74      	ldr	r3, [pc, #464]	; (80013f8 <HAL_SYSTICK_Callback+0x258>)
 8001226:	ed93 8a00 	vldr	s16, [r3]
 800122a:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800122e:	ee17 0a90 	vmov	r0, s15
 8001232:	f7ff f935 	bl	80004a0 <__aeabi_f2d>
 8001236:	4604      	mov	r4, r0
 8001238:	460d      	mov	r5, r1
 800123a:	a35f      	add	r3, pc, #380	; (adr r3, 80013b8 <HAL_SYSTICK_Callback+0x218>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff fc16 	bl	8000a70 <__aeabi_dcmpgt>
 8001244:	2800      	cmp	r0, #0
 8001246:	d048      	beq.n	80012da <HAL_SYSTICK_Callback+0x13a>
 8001248:	ee18 0a10 	vmov	r0, s16
 800124c:	f7ff f928 	bl	80004a0 <__aeabi_f2d>
 8001250:	a359      	add	r3, pc, #356	; (adr r3, 80013b8 <HAL_SYSTICK_Callback+0x218>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7fe ffc5 	bl	80001e4 <__adddf3>
 800125a:	f7ff fc33 	bl	8000ac4 <__aeabi_d2f>
 800125e:	4b66      	ldr	r3, [pc, #408]	; (80013f8 <HAL_SYSTICK_Callback+0x258>)
 8001260:	6018      	str	r0, [r3, #0]
		cyclespeed = 0;
 8001262:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <HAL_SYSTICK_Callback+0x240>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
		speed_raw = htim3.Instance->CNT - position_diff;
 8001268:	4b66      	ldr	r3, [pc, #408]	; (8001404 <HAL_SYSTICK_Callback+0x264>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800126e:	4966      	ldr	r1, [pc, #408]	; (8001408 <HAL_SYSTICK_Callback+0x268>)
 8001270:	880a      	ldrh	r2, [r1, #0]
 8001272:	1a9b      	subs	r3, r3, r2
 8001274:	b21b      	sxth	r3, r3
 8001276:	4a65      	ldr	r2, [pc, #404]	; (800140c <HAL_SYSTICK_Callback+0x26c>)
 8001278:	8013      	strh	r3, [r2, #0]
		position_diff = htim3.Instance->CNT;
 800127a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800127c:	b29b      	uxth	r3, r3
 800127e:	800b      	strh	r3, [r1, #0]
		speed = ((float)speed_raw)/8000.0 * 6000.0;
 8001280:	8810      	ldrh	r0, [r2, #0]
 8001282:	b200      	sxth	r0, r0
 8001284:	ee07 0a90 	vmov	s15, r0
 8001288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128c:	ee17 0a90 	vmov	r0, s15
 8001290:	f7ff f906 	bl	80004a0 <__aeabi_f2d>
 8001294:	2200      	movs	r2, #0
 8001296:	4b5e      	ldr	r3, [pc, #376]	; (8001410 <HAL_SYSTICK_Callback+0x270>)
 8001298:	f7ff fa84 	bl	80007a4 <__aeabi_ddiv>
 800129c:	a348      	add	r3, pc, #288	; (adr r3, 80013c0 <HAL_SYSTICK_Callback+0x220>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f955 	bl	8000550 <__aeabi_dmul>
 80012a6:	f7ff fc0d 	bl	8000ac4 <__aeabi_d2f>
 80012aa:	4b5a      	ldr	r3, [pc, #360]	; (8001414 <HAL_SYSTICK_Callback+0x274>)
 80012ac:	6018      	str	r0, [r3, #0]
		speed_regulator.input_raw = speed;
 80012ae:	4b5a      	ldr	r3, [pc, #360]	; (8001418 <HAL_SYSTICK_Callback+0x278>)
 80012b0:	6258      	str	r0, [r3, #36]	; 0x24
		if(!ref_ramp) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012b2:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <HAL_SYSTICK_Callback+0x258>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	d025      	beq.n	800130e <HAL_SYSTICK_Callback+0x16e>
			if(!speed_raw){
 80012c2:	4b52      	ldr	r3, [pc, #328]	; (800140c <HAL_SYSTICK_Callback+0x26c>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	b343      	cbz	r3, 800131c <HAL_SYSTICK_Callback+0x17c>
		if(control_loop == 2){
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <HAL_SYSTICK_Callback+0x248>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d030      	beq.n	8001334 <HAL_SYSTICK_Callback+0x194>
		PID_Controller(&speed_regulator);
 80012d2:	4851      	ldr	r0, [pc, #324]	; (8001418 <HAL_SYSTICK_Callback+0x278>)
 80012d4:	f000 f8b8 	bl	8001448 <PID_Controller>
 80012d8:	e773      	b.n	80011c2 <HAL_SYSTICK_Callback+0x22>
		else if(ref_normalized - ref_ramp < -RAMP_STEP) ref_ramp -= RAMP_STEP;
 80012da:	a33b      	add	r3, pc, #236	; (adr r3, 80013c8 <HAL_SYSTICK_Callback+0x228>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	4620      	mov	r0, r4
 80012e2:	4629      	mov	r1, r5
 80012e4:	f7ff fba6 	bl	8000a34 <__aeabi_dcmplt>
 80012e8:	b168      	cbz	r0, 8001306 <HAL_SYSTICK_Callback+0x166>
 80012ea:	ee18 0a10 	vmov	r0, s16
 80012ee:	f7ff f8d7 	bl	80004a0 <__aeabi_f2d>
 80012f2:	a331      	add	r3, pc, #196	; (adr r3, 80013b8 <HAL_SYSTICK_Callback+0x218>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7fe ff72 	bl	80001e0 <__aeabi_dsub>
 80012fc:	f7ff fbe2 	bl	8000ac4 <__aeabi_d2f>
 8001300:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <HAL_SYSTICK_Callback+0x258>)
 8001302:	6018      	str	r0, [r3, #0]
 8001304:	e7ad      	b.n	8001262 <HAL_SYSTICK_Callback+0xc2>
		else ref_ramp = ref_normalized;
 8001306:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <HAL_SYSTICK_Callback+0x258>)
 8001308:	edc3 8a00 	vstr	s17, [r3]
 800130c:	e7a9      	b.n	8001262 <HAL_SYSTICK_Callback+0xc2>
		if(!ref_ramp) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2120      	movs	r1, #32
 8001312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001316:	f001 fcdb 	bl	8002cd0 <HAL_GPIO_WritePin>
 800131a:	e7d6      	b.n	80012ca <HAL_SYSTICK_Callback+0x12a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	2120      	movs	r1, #32
 8001320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001324:	f001 fcd4 	bl	8002cd0 <HAL_GPIO_WritePin>
				current_regulator.I = 0.0;
 8001328:	2300      	movs	r3, #0
 800132a:	4a30      	ldr	r2, [pc, #192]	; (80013ec <HAL_SYSTICK_Callback+0x24c>)
 800132c:	6193      	str	r3, [r2, #24]
				speed_regulator.I = 0.0;
 800132e:	4a3a      	ldr	r2, [pc, #232]	; (8001418 <HAL_SYSTICK_Callback+0x278>)
 8001330:	6193      	str	r3, [r2, #24]
 8001332:	e7ca      	b.n	80012ca <HAL_SYSTICK_Callback+0x12a>
			speed_regulator.reference = ref_ramp * MAX_SPEED;
 8001334:	4b38      	ldr	r3, [pc, #224]	; (8001418 <HAL_SYSTICK_Callback+0x278>)
 8001336:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <HAL_SYSTICK_Callback+0x258>)
 8001338:	edd2 7a00 	vldr	s15, [r2]
 800133c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800141c <HAL_SYSTICK_Callback+0x27c>
 8001340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001344:	edc3 7a07 	vstr	s15, [r3, #28]
			current_regulator.reference = speed_regulator.output;
 8001348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <HAL_SYSTICK_Callback+0x24c>)
 800134c:	61da      	str	r2, [r3, #28]
 800134e:	e7c0      	b.n	80012d2 <HAL_SYSTICK_Callback+0x132>
		TIM1 -> CCR1 = (uint32_t)(7200.0 + ref_ramp * 6480.0);
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <HAL_SYSTICK_Callback+0x258>)
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	f7ff f8a4 	bl	80004a0 <__aeabi_f2d>
 8001358:	a31d      	add	r3, pc, #116	; (adr r3, 80013d0 <HAL_SYSTICK_Callback+0x230>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f8f7 	bl	8000550 <__aeabi_dmul>
 8001362:	a31d      	add	r3, pc, #116	; (adr r3, 80013d8 <HAL_SYSTICK_Callback+0x238>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7fe ff3c 	bl	80001e4 <__adddf3>
 800136c:	f7ff fb8a 	bl	8000a84 <__aeabi_d2uiz>
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <HAL_SYSTICK_Callback+0x250>)
 8001372:	6358      	str	r0, [r3, #52]	; 0x34
 8001374:	e735      	b.n	80011e2 <HAL_SYSTICK_Callback+0x42>
		PID_TurnOff(&speed_regulator);
 8001376:	4828      	ldr	r0, [pc, #160]	; (8001418 <HAL_SYSTICK_Callback+0x278>)
 8001378:	f000 f8e8 	bl	800154c <PID_TurnOff>
		PID_TurnOff(&current_regulator);
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <HAL_SYSTICK_Callback+0x24c>)
 800137e:	f000 f8e5 	bl	800154c <PID_TurnOff>
 8001382:	e73a      	b.n	80011fa <HAL_SYSTICK_Callback+0x5a>
	}else if((control_loop == 1) && (control_loop != last_control_loop)){
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_SYSTICK_Callback+0x254>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	429c      	cmp	r4, r3
 800138a:	f43f af33 	beq.w	80011f4 <HAL_SYSTICK_Callback+0x54>
		PID_TurnOn(&current_regulator);
 800138e:	4817      	ldr	r0, [pc, #92]	; (80013ec <HAL_SYSTICK_Callback+0x24c>)
 8001390:	f000 f8d9 	bl	8001546 <PID_TurnOn>
		PID_TurnOff(&speed_regulator);
 8001394:	4820      	ldr	r0, [pc, #128]	; (8001418 <HAL_SYSTICK_Callback+0x278>)
 8001396:	f000 f8d9 	bl	800154c <PID_TurnOff>
 800139a:	e72e      	b.n	80011fa <HAL_SYSTICK_Callback+0x5a>
	}else if((control_loop == 2) && (last_control_loop != control_loop)){
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_SYSTICK_Callback+0x254>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	429c      	cmp	r4, r3
 80013a2:	f43f af2a 	beq.w	80011fa <HAL_SYSTICK_Callback+0x5a>
		PID_TurnOn(&speed_regulator);
 80013a6:	481c      	ldr	r0, [pc, #112]	; (8001418 <HAL_SYSTICK_Callback+0x278>)
 80013a8:	f000 f8cd 	bl	8001546 <PID_TurnOn>
		PID_TurnOn(&current_regulator);
 80013ac:	480f      	ldr	r0, [pc, #60]	; (80013ec <HAL_SYSTICK_Callback+0x24c>)
 80013ae:	f000 f8ca 	bl	8001546 <PID_TurnOn>
 80013b2:	e722      	b.n	80011fa <HAL_SYSTICK_Callback+0x5a>
 80013b4:	f3af 8000 	nop.w
 80013b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013bc:	3f60624d 	.word	0x3f60624d
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40b77000 	.word	0x40b77000
 80013c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013cc:	bf60624d 	.word	0xbf60624d
 80013d0:	00000000 	.word	0x00000000
 80013d4:	40b95000 	.word	0x40b95000
 80013d8:	00000000 	.word	0x00000000
 80013dc:	40bc2000 	.word	0x40bc2000
 80013e0:	2000002d 	.word	0x2000002d
 80013e4:	20000030 	.word	0x20000030
 80013e8:	20000000 	.word	0x20000000
 80013ec:	200000a0 	.word	0x200000a0
 80013f0:	40012c00 	.word	0x40012c00
 80013f4:	2000002e 	.word	0x2000002e
 80013f8:	200001d4 	.word	0x200001d4
 80013fc:	45000000 	.word	0x45000000
 8001400:	200000f4 	.word	0x200000f4
 8001404:	20000100 	.word	0x20000100
 8001408:	20000034 	.word	0x20000034
 800140c:	20000078 	.word	0x20000078
 8001410:	40bf4000 	.word	0x40bf4000
 8001414:	200002dc 	.word	0x200002dc
 8001418:	20000260 	.word	0x20000260
 800141c:	43d20000 	.word	0x43d20000

08001420 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001420:	4770      	bx	lr

08001422 <PID_Init>:
  */
void PID_Init (PID_Data *pid,
				float P, float I, float Kb, float Ts,
				float deadzone, float min, float max,
				float output_offset, float input_offset){
	pid -> Kp = P;
 8001422:	ed80 0a01 	vstr	s0, [r0, #4]
	pid -> Ti = I;
 8001426:	edc0 0a02 	vstr	s1, [r0, #8]
	pid -> Ts = Ts;
 800142a:	edc0 1a03 	vstr	s3, [r0, #12]
	pid -> output_min = min;
 800142e:	edc0 2a10 	vstr	s5, [r0, #64]	; 0x40
	pid -> output_max = max;
 8001432:	ed80 3a11 	vstr	s6, [r0, #68]	; 0x44
	pid -> Kb = Kb;
 8001436:	ed80 1a04 	vstr	s2, [r0, #16]
	pid -> output_offset = output_offset;
 800143a:	edc0 3a14 	vstr	s7, [r0, #80]	; 0x50
	pid -> input_offset = input_offset;
 800143e:	ed80 4a0f 	vstr	s8, [r0, #60]	; 0x3c
	pid -> error_deadzone = deadzone;
 8001442:	ed80 2a12 	vstr	s4, [r0, #72]	; 0x48
}
 8001446:	4770      	bx	lr

08001448 <PID_Controller>:

void PID_Controller (PID_Data *pid){
	pid->input = pid->input_raw - pid->input_offset;
 8001448:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 800144c:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
 8001450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001454:	edc0 7a08 	vstr	s15, [r0, #32]
	if(pid->run){
 8001458:	7803      	ldrb	r3, [r0, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d05e      	beq.n	800151c <PID_Controller+0xd4>
		//Obliczenie uchybu sterowania
		pid->error_dz = pid->reference - (pid->input);
 800145e:	ed90 7a07 	vldr	s14, [r0, #28]
 8001462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001466:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
		if(pid->error_deadzone){
 800146a:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
 800146e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	d010      	beq.n	800149a <PID_Controller+0x52>
			if((pid->error_dz < pid->error_deadzone) && (pid->error_dz > -pid->error_deadzone)){
 8001478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001480:	d509      	bpl.n	8001496 <PID_Controller+0x4e>
 8001482:	eeb1 7a47 	vneg.f32	s14, s14
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	dd02      	ble.n	8001496 <PID_Controller+0x4e>
				pid->error = 0.0;
 8001490:	2300      	movs	r3, #0
 8001492:	6283      	str	r3, [r0, #40]	; 0x28
 8001494:	e001      	b.n	800149a <PID_Controller+0x52>
			}else pid->error = pid->error_dz;
 8001496:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
		}
		pid->P = pid->Kp * pid->error;
 800149a:	edd0 7a01 	vldr	s15, [r0, #4]
 800149e:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	edc0 7a05 	vstr	s15, [r0, #20]
		if(pid->Ti){
 80014aa:	edd0 6a02 	vldr	s13, [r0, #8]
 80014ae:	eef5 6a40 	vcmp.f32	s13, #0.0
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d02e      	beq.n	8001516 <PID_Controller+0xce>
			pid->I += (pid->error + pid->antiwindup_correction)*pid->Ts*pid->Ti;
 80014b8:	ed90 6a13 	vldr	s12, [r0, #76]	; 0x4c
 80014bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80014c0:	ed90 6a03 	vldr	s12, [r0, #12]
 80014c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80014c8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80014cc:	edd0 6a06 	vldr	s13, [r0, #24]
 80014d0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80014d4:	ed80 7a06 	vstr	s14, [r0, #24]
		}else{
			pid->I = 0;
		}
		//obliczenie wyjścia
		pid->output_sat = pid->P + pid->I;
 80014d8:	ed90 7a06 	vldr	s14, [r0, #24]
 80014dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014e0:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34

	}else{
		pid->output_sat = 0;
	}
	//Dodanie przesunięcia do wyjścia
	pid -> output_sat += pid -> output_offset;
 80014e4:	edd0 7a14 	vldr	s15, [r0, #80]	; 0x50
 80014e8:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 80014ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014f0:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34
	//Saturacja wyjścia, jeśli istnieją ograniczenia
	if(pid->output_sat < pid->output_min) pid->output = pid->output_min;
 80014f4:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 80014f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	d40f      	bmi.n	8001522 <PID_Controller+0xda>
	else if(pid->output_sat > pid->output_max) pid->output = pid->output_max;
 8001502:	ed90 7a11 	vldr	s14, [r0, #68]	; 0x44
 8001506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150e:	dc17      	bgt.n	8001540 <PID_Controller+0xf8>
	else pid->output = pid->output_sat;
 8001510:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8001514:	e007      	b.n	8001526 <PID_Controller+0xde>
			pid->I = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	6183      	str	r3, [r0, #24]
 800151a:	e7dd      	b.n	80014d8 <PID_Controller+0x90>
		pid->output_sat = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	6343      	str	r3, [r0, #52]	; 0x34
 8001520:	e7e0      	b.n	80014e4 <PID_Controller+0x9c>
	if(pid->output_sat < pid->output_min) pid->output = pid->output_min;
 8001522:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
	//Zapamiętanie poprzednich wartości
	pid->antiwindup_correction = pid->Kb * (pid->output - pid->output_sat);
 8001526:	ed90 7a04 	vldr	s14, [r0, #16]
 800152a:	edd0 6a0e 	vldr	s13, [r0, #56]	; 0x38
 800152e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001536:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
	pid->last_error = pid->error_dz;
 800153a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800153c:	6303      	str	r3, [r0, #48]	; 0x30
}
 800153e:	4770      	bx	lr
	else if(pid->output_sat > pid->output_max) pid->output = pid->output_max;
 8001540:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
 8001544:	e7ef      	b.n	8001526 <PID_Controller+0xde>

08001546 <PID_TurnOn>:

void PID_TurnOn (PID_Data *pid){
	pid->run = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	7003      	strb	r3, [r0, #0]
}
 800154a:	4770      	bx	lr

0800154c <PID_TurnOff>:

void PID_TurnOff (PID_Data *pid){
	pid->I = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	6183      	str	r3, [r0, #24]
	pid->antiwindup_correction = 0;
 8001550:	64c3      	str	r3, [r0, #76]	; 0x4c
	pid->error = 0;
 8001552:	6283      	str	r3, [r0, #40]	; 0x28
	pid->error_dz = 0;
 8001554:	62c3      	str	r3, [r0, #44]	; 0x2c
	pid->last_error = 0;
 8001556:	6303      	str	r3, [r0, #48]	; 0x30
	pid->reference = 0;
 8001558:	61c3      	str	r3, [r0, #28]
	pid->output_sat = 0;
 800155a:	6343      	str	r3, [r0, #52]	; 0x34
	pid->output = pid->output_offset;
 800155c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800155e:	6383      	str	r3, [r0, #56]	; 0x38
	pid->run = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	7003      	strb	r3, [r0, #0]
}
 8001564:	4770      	bx	lr
	...

08001568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b500      	push	{lr}
 800156a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_MspInit+0x3c>)
 800156e:	699a      	ldr	r2, [r3, #24]
 8001570:	f042 0201 	orr.w	r2, r2, #1
 8001574:	619a      	str	r2, [r3, #24]
 8001576:	699a      	ldr	r2, [r3, #24]
 8001578:	f002 0201 	and.w	r2, r2, #1
 800157c:	9200      	str	r2, [sp, #0]
 800157e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001586:	61da      	str	r2, [r3, #28]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	210f      	movs	r1, #15
 8001596:	f06f 0001 	mvn.w	r0, #1
 800159a:	f001 f973 	bl	8002884 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	b003      	add	sp, #12
 80015a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a8:	b510      	push	{r4, lr}
 80015aa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	2300      	movs	r3, #0
 80015ae:	9303      	str	r3, [sp, #12]
 80015b0:	9304      	str	r3, [sp, #16]
 80015b2:	9305      	str	r3, [sp, #20]
 80015b4:	9306      	str	r3, [sp, #24]
 80015b6:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80015b8:	6803      	ldr	r3, [r0, #0]
 80015ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015be:	d001      	beq.n	80015c4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015c0:	b008      	add	sp, #32
 80015c2:	bd10      	pop	{r4, pc}
 80015c4:	4604      	mov	r4, r0
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015c6:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80015ca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015d4:	615a      	str	r2, [r3, #20]
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80015dc:	9201      	str	r2, [sp, #4]
 80015de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015e6:	615a      	str	r2, [r3, #20]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015f2:	2303      	movs	r3, #3
 80015f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	a903      	add	r1, sp, #12
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f001 fa91 	bl	8002b24 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001602:	4812      	ldr	r0, [pc, #72]	; (800164c <HAL_ADC_MspInit+0xa4>)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_ADC_MspInit+0xa8>)
 8001606:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001608:	2300      	movs	r3, #0
 800160a:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800160c:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001616:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001618:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800161c:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800161e:	2320      	movs	r3, #32
 8001620:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001628:	f001 f9c0 	bl	80029ac <HAL_DMA_Init>
 800162c:	b958      	cbnz	r0, 8001646 <HAL_ADC_MspInit+0x9e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <HAL_ADC_MspInit+0xa4>)
 8001630:	63a3      	str	r3, [r4, #56]	; 0x38
 8001632:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2101      	movs	r1, #1
 8001638:	2012      	movs	r0, #18
 800163a:	f001 f923 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800163e:	2012      	movs	r0, #18
 8001640:	f001 f954 	bl	80028ec <HAL_NVIC_EnableIRQ>
}
 8001644:	e7bc      	b.n	80015c0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001646:	f7ff feeb 	bl	8001420 <Error_Handler>
 800164a:	e7f0      	b.n	800162e <HAL_ADC_MspInit+0x86>
 800164c:	200001dc 	.word	0x200001dc
 8001650:	40020008 	.word	0x40020008

08001654 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001654:	6802      	ldr	r2, [r0, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_TIM_PWM_MspInit+0x28>)
 8001658:	429a      	cmp	r2, r3
 800165a:	d000      	beq.n	800165e <HAL_TIM_PWM_MspInit+0xa>
 800165c:	4770      	bx	lr
{
 800165e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001660:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001664:	699a      	ldr	r2, [r3, #24]
 8001666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800166a:	619a      	str	r2, [r3, #24]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001676:	b002      	add	sp, #8
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40012c00 	.word	0x40012c00

08001680 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001680:	b500      	push	{lr}
 8001682:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	2300      	movs	r3, #0
 8001686:	9303      	str	r3, [sp, #12]
 8001688:	9304      	str	r3, [sp, #16]
 800168a:	9305      	str	r3, [sp, #20]
 800168c:	9306      	str	r3, [sp, #24]
 800168e:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM3)
 8001690:	6802      	ldr	r2, [r0, #0]
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_TIM_Encoder_MspInit+0x5c>)
 8001694:	429a      	cmp	r2, r3
 8001696:	d002      	beq.n	800169e <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001698:	b009      	add	sp, #36	; 0x24
 800169a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169e:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	f042 0202 	orr.w	r2, r2, #2
 80016a8:	61da      	str	r2, [r3, #28]
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	f002 0202 	and.w	r2, r2, #2
 80016b0:	9201      	str	r2, [sp, #4]
 80016b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016ba:	615a      	str	r2, [r3, #20]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80016c6:	2350      	movs	r3, #80	; 0x50
 80016c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	a903      	add	r1, sp, #12
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f001 fa25 	bl	8002b24 <HAL_GPIO_Init>
}
 80016da:	e7dd      	b.n	8001698 <HAL_TIM_Encoder_MspInit+0x18>
 80016dc:	40000400 	.word	0x40000400

080016e0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 80016e0:	6802      	ldr	r2, [r0, #0]
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_TIM_Base_MspInit+0x28>)
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d000      	beq.n	80016ea <HAL_TIM_Base_MspInit+0xa>
 80016e8:	4770      	bx	lr
{
 80016ea:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ec:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80016f0:	69da      	ldr	r2, [r3, #28]
 80016f2:	f042 0204 	orr.w	r2, r2, #4
 80016f6:	61da      	str	r2, [r3, #28]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001702:	b002      	add	sp, #8
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40000800 	.word	0x40000800

0800170c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800170c:	b510      	push	{r4, lr}
 800170e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	2300      	movs	r3, #0
 8001712:	9303      	str	r3, [sp, #12]
 8001714:	9304      	str	r3, [sp, #16]
 8001716:	9305      	str	r3, [sp, #20]
 8001718:	9306      	str	r3, [sp, #24]
 800171a:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 800171c:	6802      	ldr	r2, [r0, #0]
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_TIM_MspPostInit+0x74>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001724:	b008      	add	sp, #32
 8001726:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800173a:	9201      	str	r2, [sp, #4]
 800173c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001744:	615a      	str	r2, [r3, #20]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	9302      	str	r3, [sp, #8]
 800174e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001750:	2301      	movs	r3, #1
 8001752:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2402      	movs	r4, #2
 8001756:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001758:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	a903      	add	r1, sp, #12
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <HAL_TIM_MspPostInit+0x78>)
 800175e:	f001 f9e1 	bl	8002b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800176e:	2306      	movs	r3, #6
 8001770:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	a903      	add	r1, sp, #12
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f001 f9d4 	bl	8002b24 <HAL_GPIO_Init>
}
 800177c:	e7d2      	b.n	8001724 <HAL_TIM_MspPostInit+0x18>
 800177e:	bf00      	nop
 8001780:	40012c00 	.word	0x40012c00
 8001784:	48000800 	.word	0x48000800

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b510      	push	{r4, lr}
 800178a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	2300      	movs	r3, #0
 800178e:	9303      	str	r3, [sp, #12]
 8001790:	9304      	str	r3, [sp, #16]
 8001792:	9305      	str	r3, [sp, #20]
 8001794:	9306      	str	r3, [sp, #24]
 8001796:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8001798:	6802      	ldr	r2, [r0, #0]
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HAL_UART_MspInit+0x90>)
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017a0:	b008      	add	sp, #32
 80017a2:	bd10      	pop	{r4, pc}
 80017a4:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a6:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80017aa:	69da      	ldr	r2, [r3, #28]
 80017ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017b0:	61da      	str	r2, [r3, #28]
 80017b2:	69da      	ldr	r2, [r3, #28]
 80017b4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80017b8:	9201      	str	r2, [sp, #4]
 80017ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ce:	230c      	movs	r3, #12
 80017d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017da:	2307      	movs	r3, #7
 80017dc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	a903      	add	r1, sp, #12
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e4:	f001 f99e 	bl	8002b24 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <HAL_UART_MspInit+0x94>)
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017ec:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ee:	2310      	movs	r3, #16
 80017f0:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	60c2      	str	r2, [r0, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017fa:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017fc:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017fe:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001800:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001802:	f001 f8d3 	bl	80029ac <HAL_DMA_Init>
 8001806:	b918      	cbnz	r0, 8001810 <HAL_UART_MspInit+0x88>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <HAL_UART_MspInit+0x94>)
 800180a:	66a3      	str	r3, [r4, #104]	; 0x68
 800180c:	625c      	str	r4, [r3, #36]	; 0x24
}
 800180e:	e7c7      	b.n	80017a0 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8001810:	f7ff fe06 	bl	8001420 <Error_Handler>
 8001814:	e7f8      	b.n	8001808 <HAL_UART_MspInit+0x80>
 8001816:	bf00      	nop
 8001818:	40004400 	.word	0x40004400
 800181c:	20000190 	.word	0x20000190
 8001820:	40020080 	.word	0x40020080

08001824 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001824:	4770      	bx	lr

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	2120      	movs	r1, #32
 800182c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001830:	f001 fa4e 	bl	8002cd0 <HAL_GPIO_WritePin>
 8001834:	e7fe      	b.n	8001834 <HardFault_Handler+0xe>

08001836 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001836:	e7fe      	b.n	8001836 <MemManage_Handler>

08001838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001838:	e7fe      	b.n	8001838 <BusFault_Handler>

0800183a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183a:	e7fe      	b.n	800183a <UsageFault_Handler>

0800183c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183c:	4770      	bx	lr

0800183e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183e:	4770      	bx	lr

08001840 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001840:	4770      	bx	lr

08001842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001842:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001844:	f000 f892 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8001848:	f7ff fcaa 	bl	80011a0 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 800184c:	bd08      	pop	{r3, pc}
	...

08001850 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001850:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001852:	4802      	ldr	r0, [pc, #8]	; (800185c <DMA1_Channel1_IRQHandler+0xc>)
 8001854:	f001 f90c 	bl	8002a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001858:	bd08      	pop	{r3, pc}
 800185a:	bf00      	nop
 800185c:	200001dc 	.word	0x200001dc

08001860 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001862:	4802      	ldr	r0, [pc, #8]	; (800186c <DMA1_Channel7_IRQHandler+0xc>)
 8001864:	f001 f904 	bl	8002a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001868:	bd08      	pop	{r3, pc}
 800186a:	bf00      	nop
 800186c:	20000190 	.word	0x20000190

08001870 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001872:	4802      	ldr	r0, [pc, #8]	; (800187c <ADC1_2_IRQHandler+0xc>)
 8001874:	f000 fb66 	bl	8001f44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001878:	bd08      	pop	{r3, pc}
 800187a:	bf00      	nop
 800187c:	20000140 	.word	0x20000140

08001880 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001880:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001882:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001886:	f001 fa29 	bl	8002cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800188a:	bd08      	pop	{r3, pc}

0800188c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <SystemInit+0x18>)
 800188e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001892:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800189a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800189e:	609a      	str	r2, [r3, #8]
#endif
}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018ae:	e003      	b.n	80018b8 <LoopCopyDataInit>

080018b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018b6:	3104      	adds	r1, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80018bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018c0:	d3f6      	bcc.n	80018b0 <CopyDataInit>
	ldr	r2, =_sbss
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018c4:	e002      	b.n	80018cc <LoopFillZerobss>

080018c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018c8:	f842 3b04 	str.w	r3, [r2], #4

080018cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <LoopForever+0x16>)
	cmp	r2, r3
 80018ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018d0:	d3f9      	bcc.n	80018c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018d2:	f7ff ffdb 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d6:	f002 ff6d 	bl	80047b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018da:	f7ff fb17 	bl	8000f0c <main>

080018de <LoopForever>:

LoopForever:
    b LoopForever
 80018de:	e7fe      	b.n	80018de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018e0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80018e4:	08004864 	.word	0x08004864
	ldr	r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018ec:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80018f0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80018f4:	20000368 	.word	0x20000368

080018f8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC3_IRQHandler>
	...

080018fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b510      	push	{r4, lr}
 80018fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_InitTick+0x40>)
 8001902:	7818      	ldrb	r0, [r3, #0]
 8001904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001908:	fbb3 f3f0 	udiv	r3, r3, r0
 800190c:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <HAL_InitTick+0x44>)
 800190e:	6810      	ldr	r0, [r2, #0]
 8001910:	fbb0 f0f3 	udiv	r0, r0, r3
 8001914:	f000 fff8 	bl	8002908 <HAL_SYSTICK_Config>
 8001918:	b968      	cbnz	r0, 8001936 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	2c0f      	cmp	r4, #15
 800191c:	d901      	bls.n	8001922 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800191e:	2001      	movs	r0, #1
 8001920:	e00a      	b.n	8001938 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001922:	2200      	movs	r2, #0
 8001924:	4621      	mov	r1, r4
 8001926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800192a:	f000 ffab 	bl	8002884 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_InitTick+0x48>)
 8001930:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8001932:	2000      	movs	r0, #0
 8001934:	e000      	b.n	8001938 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001936:	2001      	movs	r0, #1
}
 8001938:	bd10      	pop	{r4, pc}
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008
 8001940:	20000004 	.word	0x20000004
 8001944:	2000000c 	.word	0x2000000c

08001948 <HAL_Init>:
{
 8001948:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_Init+0x20>)
 800194c:	6813      	ldr	r3, [r2, #0]
 800194e:	f043 0310 	orr.w	r3, r3, #16
 8001952:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 ff83 	bl	8002860 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff ffce 	bl	80018fc <HAL_InitTick>
  HAL_MspInit();
 8001960:	f7ff fe02 	bl	8001568 <HAL_MspInit>
}
 8001964:	2000      	movs	r0, #0
 8001966:	bd08      	pop	{r3, pc}
 8001968:	40022000 	.word	0x40022000

0800196c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800196c:	4a03      	ldr	r2, [pc, #12]	; (800197c <HAL_IncTick+0x10>)
 800196e:	6811      	ldr	r1, [r2, #0]
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_IncTick+0x14>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	440b      	add	r3, r1
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000364 	.word	0x20000364
 8001980:	20000008 	.word	0x20000008

08001984 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001984:	4b01      	ldr	r3, [pc, #4]	; (800198c <HAL_GetTick+0x8>)
 8001986:	6818      	ldr	r0, [r3, #0]
}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000364 	.word	0x20000364

08001990 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001990:	4770      	bx	lr

08001992 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001992:	4770      	bx	lr

08001994 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001994:	4770      	bx	lr

08001996 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001996:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001998:	6802      	ldr	r2, [r0, #0]
 800199a:	6893      	ldr	r3, [r2, #8]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d001      	beq.n	80019a8 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019a4:	2000      	movs	r0, #0
}
 80019a6:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019a8:	6813      	ldr	r3, [r2, #0]
 80019aa:	f013 0f01 	tst.w	r3, #1
 80019ae:	d02f      	beq.n	8001a10 <ADC_Disable+0x7a>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019b0:	6893      	ldr	r3, [r2, #8]
 80019b2:	f003 030d 	and.w	r3, r3, #13
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d009      	beq.n	80019ce <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80019bc:	f043 0310 	orr.w	r3, r3, #16
 80019c0:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 80019ca:	2001      	movs	r0, #1
 80019cc:	e7eb      	b.n	80019a6 <ADC_Disable+0x10>
 80019ce:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 80019d0:	6893      	ldr	r3, [r2, #8]
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	6093      	str	r3, [r2, #8]
 80019d8:	6803      	ldr	r3, [r0, #0]
 80019da:	2203      	movs	r2, #3
 80019dc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80019de:	f7ff ffd1 	bl	8001984 <HAL_GetTick>
 80019e2:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f013 0f01 	tst.w	r3, #1
 80019ec:	d00e      	beq.n	8001a0c <ADC_Disable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019ee:	f7ff ffc9 	bl	8001984 <HAL_GetTick>
 80019f2:	1b40      	subs	r0, r0, r5
 80019f4:	2802      	cmp	r0, #2
 80019f6:	d9f5      	bls.n	80019e4 <ADC_Disable+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
 8001a0a:	e7cc      	b.n	80019a6 <ADC_Disable+0x10>
  return HAL_OK;
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e7ca      	b.n	80019a6 <ADC_Disable+0x10>
 8001a10:	2000      	movs	r0, #0
 8001a12:	e7c8      	b.n	80019a6 <ADC_Disable+0x10>

08001a14 <ADC_Enable>:
{
 8001a14:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a16:	6802      	ldr	r2, [r0, #0]
 8001a18:	6893      	ldr	r3, [r2, #8]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d00d      	beq.n	8001a3e <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a22:	6891      	ldr	r1, [r2, #8]
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <ADC_Enable+0x74>)
 8001a26:	4219      	tst	r1, r3
 8001a28:	d00f      	beq.n	8001a4a <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a32:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 8001a3a:	2001      	movs	r0, #1
}
 8001a3c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a3e:	6813      	ldr	r3, [r2, #0]
 8001a40:	f013 0f01 	tst.w	r3, #1
 8001a44:	d0ed      	beq.n	8001a22 <ADC_Enable+0xe>
  return HAL_OK;
 8001a46:	2000      	movs	r0, #0
 8001a48:	e7f8      	b.n	8001a3c <ADC_Enable+0x28>
 8001a4a:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8001a4c:	6893      	ldr	r3, [r2, #8]
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001a54:	f7ff ff96 	bl	8001984 <HAL_GetTick>
 8001a58:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f013 0f01 	tst.w	r3, #1
 8001a62:	d10e      	bne.n	8001a82 <ADC_Enable+0x6e>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a64:	f7ff ff8e 	bl	8001984 <HAL_GetTick>
 8001a68:	1b40      	subs	r0, r0, r5
 8001a6a:	2802      	cmp	r0, #2
 8001a6c:	d9f5      	bls.n	8001a5a <ADC_Enable+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8001a7e:	2001      	movs	r0, #1
 8001a80:	e7dc      	b.n	8001a3c <ADC_Enable+0x28>
  return HAL_OK;
 8001a82:	2000      	movs	r0, #0
 8001a84:	e7da      	b.n	8001a3c <ADC_Enable+0x28>
 8001a86:	bf00      	nop
 8001a88:	8000003f 	.word	0x8000003f

08001a8c <ADC_DMAError>:
{
 8001a8c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a8e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a90:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a96:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001aa0:	f7ff ff78 	bl	8001994 <HAL_ADC_ErrorCallback>
}
 8001aa4:	bd08      	pop	{r3, pc}

08001aa6 <ADC_DMAHalfConvCplt>:
{
 8001aa6:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001aa8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001aaa:	f7ff ff71 	bl	8001990 <HAL_ADC_ConvHalfCpltCallback>
}
 8001aae:	bd08      	pop	{r3, pc}

08001ab0 <ADC_DMAConvCplt>:
{
 8001ab0:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab6:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001aba:	d003      	beq.n	8001ac4 <ADC_DMAConvCplt+0x14>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4798      	blx	r3
}
 8001ac2:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aca:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68d2      	ldr	r2, [r2, #12]
 8001ad0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001ad4:	d10d      	bne.n	8001af2 <ADC_DMAConvCplt+0x42>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ad6:	7e5a      	ldrb	r2, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ad8:	b95a      	cbnz	r2, 8001af2 <ADC_DMAConvCplt+0x42>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae4:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001ae8:	d103      	bne.n	8001af2 <ADC_DMAConvCplt+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aec:	f042 0201 	orr.w	r2, r2, #1
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fb40 	bl	8001178 <HAL_ADC_ConvCpltCallback>
 8001af8:	e7e3      	b.n	8001ac2 <ADC_DMAConvCplt+0x12>
	...

08001afc <HAL_ADC_Init>:
{
 8001afc:	b530      	push	{r4, r5, lr}
 8001afe:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001b04:	2800      	cmp	r0, #0
 8001b06:	f000 8144 	beq.w	8001d92 <HAL_ADC_Init+0x296>
 8001b0a:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b0c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b0e:	f013 0f10 	tst.w	r3, #16
 8001b12:	d152      	bne.n	8001bba <HAL_ADC_Init+0xbe>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b14:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b16:	b1ab      	cbz	r3, 8001b44 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b18:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001b22:	d003      	beq.n	8001b2c <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b24:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b26:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001b2a:	d047      	beq.n	8001bbc <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 8001b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b2e:	f023 0312 	bic.w	r3, r3, #18
 8001b32:	f043 0310 	orr.w	r3, r3, #16
 8001b36:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 8001b40:	2001      	movs	r0, #1
 8001b42:	e03b      	b.n	8001bbc <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 8001b44:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 8001b46:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b48:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 8001b4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001b4e:	f7ff fd2b 	bl	80015a8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001b5a:	d001      	beq.n	8001b60 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	e7dc      	b.n	8001b1a <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8001b60:	4620      	mov	r0, r4
 8001b62:	f7ff ff18 	bl	8001996 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b68:	f013 0f10 	tst.w	r3, #16
 8001b6c:	d1d5      	bne.n	8001b1a <HAL_ADC_Init+0x1e>
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	d1d3      	bne.n	8001b1a <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8001b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b78:	f023 0302 	bic.w	r3, r3, #2
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b82:	6822      	ldr	r2, [r4, #0]
 8001b84:	6893      	ldr	r3, [r2, #8]
 8001b86:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001b8a:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b8c:	6822      	ldr	r2, [r4, #0]
 8001b8e:	6893      	ldr	r3, [r2, #8]
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b96:	4b80      	ldr	r3, [pc, #512]	; (8001d98 <HAL_ADC_Init+0x29c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a80      	ldr	r2, [pc, #512]	; (8001d9c <HAL_ADC_Init+0x2a0>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	0c9b      	lsrs	r3, r3, #18
 8001ba2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ba6:	005a      	lsls	r2, r3, #1
 8001ba8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001baa:	e002      	b.n	8001bb2 <HAL_ADC_Init+0xb6>
            wait_loop_index--;
 8001bac:	9b01      	ldr	r3, [sp, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001bb2:	9b01      	ldr	r3, [sp, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f9      	bne.n	8001bac <HAL_ADC_Init+0xb0>
 8001bb8:	e7af      	b.n	8001b1a <HAL_ADC_Init+0x1e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bba:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bbe:	f013 0f10 	tst.w	r3, #16
 8001bc2:	f040 80dd 	bne.w	8001d80 <HAL_ADC_Init+0x284>
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	f040 80da 	bne.w	8001d80 <HAL_ADC_Init+0x284>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001bd0:	f012 0204 	ands.w	r2, r2, #4
 8001bd4:	f040 80d4 	bne.w	8001d80 <HAL_ADC_Init+0x284>
    ADC_STATE_CLR_SET(hadc->State,
 8001bd8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001bda:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8001bde:	f041 0102 	orr.w	r1, r1, #2
 8001be2:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be8:	d015      	beq.n	8001c16 <HAL_ADC_Init+0x11a>
 8001bea:	496d      	ldr	r1, [pc, #436]	; (8001da0 <HAL_ADC_Init+0x2a4>)
 8001bec:	428b      	cmp	r3, r1
 8001bee:	d00f      	beq.n	8001c10 <HAL_ADC_Init+0x114>
 8001bf0:	496c      	ldr	r1, [pc, #432]	; (8001da4 <HAL_ADC_Init+0x2a8>)
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf6:	d010      	beq.n	8001c1a <HAL_ADC_Init+0x11e>
 8001bf8:	4d69      	ldr	r5, [pc, #420]	; (8001da0 <HAL_ADC_Init+0x2a4>)
 8001bfa:	42ab      	cmp	r3, r5
 8001bfc:	d06c      	beq.n	8001cd8 <HAL_ADC_Init+0x1dc>
 8001bfe:	4d6a      	ldr	r5, [pc, #424]	; (8001da8 <HAL_ADC_Init+0x2ac>)
 8001c00:	42ab      	cmp	r3, r5
 8001c02:	d06d      	beq.n	8001ce0 <HAL_ADC_Init+0x1e4>
 8001c04:	4d69      	ldr	r5, [pc, #420]	; (8001dac <HAL_ADC_Init+0x2b0>)
 8001c06:	42ab      	cmp	r3, r5
 8001c08:	d06d      	beq.n	8001ce6 <HAL_ADC_Init+0x1ea>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	e007      	b.n	8001c20 <HAL_ADC_Init+0x124>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c10:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8001c14:	e7ed      	b.n	8001bf2 <HAL_ADC_Init+0xf6>
 8001c16:	4966      	ldr	r1, [pc, #408]	; (8001db0 <HAL_ADC_Init+0x2b4>)
 8001c18:	e7eb      	b.n	8001bf2 <HAL_ADC_Init+0xf6>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c1e:	9302      	str	r3, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c20:	6825      	ldr	r5, [r4, #0]
 8001c22:	68ab      	ldr	r3, [r5, #8]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d05f      	beq.n	8001cec <HAL_ADC_Init+0x1f0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c2c:	9b02      	ldr	r3, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c2e:	b123      	cbz	r3, 8001c3a <HAL_ADC_Init+0x13e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c30:	689d      	ldr	r5, [r3, #8]
 8001c32:	f005 0503 	and.w	r5, r5, #3
 8001c36:	2d01      	cmp	r5, #1
 8001c38:	d05d      	beq.n	8001cf6 <HAL_ADC_Init+0x1fa>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c3a:	688b      	ldr	r3, [r1, #8]
 8001c3c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c40:	6865      	ldr	r5, [r4, #4]
 8001c42:	432b      	orrs	r3, r5
 8001c44:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c46:	7e61      	ldrb	r1, [r4, #25]
 8001c48:	034b      	lsls	r3, r1, #13
 8001c4a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001c4c:	2d01      	cmp	r5, #1
 8001c4e:	d001      	beq.n	8001c54 <HAL_ADC_Init+0x158>
 8001c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c54:	4313      	orrs	r3, r2
 8001c56:	68e2      	ldr	r2, [r4, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	68a2      	ldr	r2, [r4, #8]
 8001c5c:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c5e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001c62:	2a01      	cmp	r2, #1
 8001c64:	d04c      	beq.n	8001d00 <HAL_ADC_Init+0x204>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c68:	2a01      	cmp	r2, #1
 8001c6a:	d00c      	beq.n	8001c86 <HAL_ADC_Init+0x18a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c6c:	6821      	ldr	r1, [r4, #0]
 8001c6e:	4d4e      	ldr	r5, [pc, #312]	; (8001da8 <HAL_ADC_Init+0x2ac>)
 8001c70:	42a9      	cmp	r1, r5
 8001c72:	d058      	beq.n	8001d26 <HAL_ADC_Init+0x22a>
 8001c74:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8001c78:	42a9      	cmp	r1, r5
 8001c7a:	d054      	beq.n	8001d26 <HAL_ADC_Init+0x22a>
 8001c7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c82:	430a      	orrs	r2, r1
 8001c84:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c86:	6822      	ldr	r2, [r4, #0]
 8001c88:	6891      	ldr	r1, [r2, #8]
 8001c8a:	f011 0f0c 	tst.w	r1, #12
 8001c8e:	d10c      	bne.n	8001caa <HAL_ADC_Init+0x1ae>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c90:	68d1      	ldr	r1, [r2, #12]
 8001c92:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001c96:	f021 0102 	bic.w	r1, r1, #2
 8001c9a:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001c9c:	7e21      	ldrb	r1, [r4, #24]
 8001c9e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8001ca2:	0052      	lsls	r2, r2, #1
 8001ca4:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001ca8:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8001caa:	6821      	ldr	r1, [r4, #0]
 8001cac:	68cd      	ldr	r5, [r1, #12]
 8001cae:	4a41      	ldr	r2, [pc, #260]	; (8001db4 <HAL_ADC_Init+0x2b8>)
 8001cb0:	402a      	ands	r2, r5
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cb6:	6923      	ldr	r3, [r4, #16]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d058      	beq.n	8001d6e <HAL_ADC_Init+0x272>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cbc:	6822      	ldr	r2, [r4, #0]
 8001cbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001cc0:	f023 030f 	bic.w	r3, r3, #15
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ccc:	f023 0303 	bic.w	r3, r3, #3
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6423      	str	r3, [r4, #64]	; 0x40
 8001cd6:	e05a      	b.n	8001d8e <HAL_ADC_Init+0x292>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cdc:	9302      	str	r3, [sp, #8]
 8001cde:	e79f      	b.n	8001c20 <HAL_ADC_Init+0x124>
 8001ce0:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_ADC_Init+0x2b0>)
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	e79c      	b.n	8001c20 <HAL_ADC_Init+0x124>
 8001ce6:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <HAL_ADC_Init+0x2ac>)
 8001ce8:	9302      	str	r3, [sp, #8]
 8001cea:	e799      	b.n	8001c20 <HAL_ADC_Init+0x124>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	f013 0f01 	tst.w	r3, #1
 8001cf2:	d1a8      	bne.n	8001c46 <HAL_ADC_Init+0x14a>
 8001cf4:	e79a      	b.n	8001c2c <HAL_ADC_Init+0x130>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f013 0f01 	tst.w	r3, #1
 8001cfc:	d1a3      	bne.n	8001c46 <HAL_ADC_Init+0x14a>
 8001cfe:	e79c      	b.n	8001c3a <HAL_ADC_Init+0x13e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d00:	b931      	cbnz	r1, 8001d10 <HAL_ADC_Init+0x214>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d04:	3a01      	subs	r2, #1
 8001d06:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0e:	e7aa      	b.n	8001c66 <HAL_ADC_Init+0x16a>
        ADC_STATE_CLR_SET(hadc->State,
 8001d10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d12:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	6462      	str	r2, [r4, #68]	; 0x44
 8001d24:	e79f      	b.n	8001c66 <HAL_ADC_Init+0x16a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d26:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8001d2a:	d011      	beq.n	8001d50 <HAL_ADC_Init+0x254>
 8001d2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001d30:	d011      	beq.n	8001d56 <HAL_ADC_Init+0x25a>
 8001d32:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 8001d36:	d011      	beq.n	8001d5c <HAL_ADC_Init+0x260>
 8001d38:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 8001d3c:	d011      	beq.n	8001d62 <HAL_ADC_Init+0x266>
 8001d3e:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 8001d42:	d011      	beq.n	8001d68 <HAL_ADC_Init+0x26c>
 8001d44:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 8001d48:	d19a      	bne.n	8001c80 <HAL_ADC_Init+0x184>
 8001d4a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001d4e:	e797      	b.n	8001c80 <HAL_ADC_Init+0x184>
 8001d50:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001d54:	e794      	b.n	8001c80 <HAL_ADC_Init+0x184>
 8001d56:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8001d5a:	e791      	b.n	8001c80 <HAL_ADC_Init+0x184>
 8001d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d60:	e78e      	b.n	8001c80 <HAL_ADC_Init+0x184>
 8001d62:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001d66:	e78b      	b.n	8001c80 <HAL_ADC_Init+0x184>
 8001d68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d6c:	e788      	b.n	8001c80 <HAL_ADC_Init+0x184>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d6e:	6821      	ldr	r1, [r4, #0]
 8001d70:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001d72:	f023 030f 	bic.w	r3, r3, #15
 8001d76:	69e2      	ldr	r2, [r4, #28]
 8001d78:	3a01      	subs	r2, #1
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	630b      	str	r3, [r1, #48]	; 0x30
 8001d7e:	e7a2      	b.n	8001cc6 <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8001d80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d82:	f023 0312 	bic.w	r3, r3, #18
 8001d86:	f043 0310 	orr.w	r3, r3, #16
 8001d8a:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 8001d8c:	2001      	movs	r0, #1
}
 8001d8e:	b017      	add	sp, #92	; 0x5c
 8001d90:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001d92:	2001      	movs	r0, #1
 8001d94:	e7fb      	b.n	8001d8e <HAL_ADC_Init+0x292>
 8001d96:	bf00      	nop
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	431bde83 	.word	0x431bde83
 8001da0:	50000100 	.word	0x50000100
 8001da4:	50000700 	.word	0x50000700
 8001da8:	50000400 	.word	0x50000400
 8001dac:	50000500 	.word	0x50000500
 8001db0:	50000300 	.word	0x50000300
 8001db4:	fff0c007 	.word	0xfff0c007

08001db8 <HAL_ADC_Start_DMA>:
{
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dba:	6804      	ldr	r4, [r0, #0]
 8001dbc:	68a5      	ldr	r5, [r4, #8]
 8001dbe:	f015 0f04 	tst.w	r5, #4
 8001dc2:	f040 80a8 	bne.w	8001f16 <HAL_ADC_Start_DMA+0x15e>
    __HAL_LOCK(hadc);
 8001dc6:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8001dca:	2d01      	cmp	r5, #1
 8001dcc:	f000 80a5 	beq.w	8001f1a <HAL_ADC_Start_DMA+0x162>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001dd6:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001dda:	d00a      	beq.n	8001df2 <HAL_ADC_Start_DMA+0x3a>
 8001ddc:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_ADC_Start_DMA+0x168>)
 8001dde:	429c      	cmp	r4, r3
 8001de0:	d007      	beq.n	8001df2 <HAL_ADC_Start_DMA+0x3a>
 8001de2:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <HAL_ADC_Start_DMA+0x16c>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f013 0f1f 	tst.w	r3, #31
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	e006      	b.n	8001e00 <HAL_ADC_Start_DMA+0x48>
 8001df2:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <HAL_ADC_Start_DMA+0x170>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f013 0f1f 	tst.w	r3, #31
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b92b      	cbnz	r3, 8001e0e <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8001e02:	2300      	movs	r3, #0
 8001e04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8001e08:	2501      	movs	r5, #1
}
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e0e:	4616      	mov	r6, r2
 8001e10:	460f      	mov	r7, r1
 8001e12:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 8001e14:	f7ff fdfe 	bl	8001a14 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001e18:	4605      	mov	r5, r0
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d177      	bne.n	8001f0e <HAL_ADC_Start_DMA+0x156>
        ADC_STATE_CLR_SET(hadc->State,
 8001e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e34:	d043      	beq.n	8001ebe <HAL_ADC_Start_DMA+0x106>
 8001e36:	4a3a      	ldr	r2, [pc, #232]	; (8001f20 <HAL_ADC_Start_DMA+0x168>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d040      	beq.n	8001ebe <HAL_ADC_Start_DMA+0x106>
 8001e3c:	4a39      	ldr	r2, [pc, #228]	; (8001f24 <HAL_ADC_Start_DMA+0x16c>)
 8001e3e:	6892      	ldr	r2, [r2, #8]
 8001e40:	f012 0f1f 	tst.w	r2, #31
 8001e44:	d140      	bne.n	8001ec8 <HAL_ADC_Start_DMA+0x110>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e48:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001e4c:	6422      	str	r2, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e54:	d005      	beq.n	8001e62 <HAL_ADC_Start_DMA+0xaa>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e60:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e64:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001e68:	d04e      	beq.n	8001f08 <HAL_ADC_Start_DMA+0x150>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e6c:	f023 0306 	bic.w	r3, r3, #6
 8001e70:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001e72:	2300      	movs	r3, #0
 8001e74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e7a:	4a2c      	ldr	r2, [pc, #176]	; (8001f2c <HAL_ADC_Start_DMA+0x174>)
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e80:	4a2b      	ldr	r2, [pc, #172]	; (8001f30 <HAL_ADC_Start_DMA+0x178>)
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e86:	4a2b      	ldr	r2, [pc, #172]	; (8001f34 <HAL_ADC_Start_DMA+0x17c>)
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	221c      	movs	r2, #28
 8001e8e:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e90:	6822      	ldr	r2, [r4, #0]
 8001e92:	6853      	ldr	r3, [r2, #4]
 8001e94:	f043 0310 	orr.w	r3, r3, #16
 8001e98:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e9a:	6822      	ldr	r2, [r4, #0]
 8001e9c:	68d3      	ldr	r3, [r2, #12]
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ea4:	6821      	ldr	r1, [r4, #0]
 8001ea6:	4633      	mov	r3, r6
 8001ea8:	463a      	mov	r2, r7
 8001eaa:	3140      	adds	r1, #64	; 0x40
 8001eac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001eae:	f000 fda5 	bl	80029fc <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001eb2:	6822      	ldr	r2, [r4, #0]
 8001eb4:	6893      	ldr	r3, [r2, #8]
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	6093      	str	r3, [r2, #8]
 8001ebc:	e7a5      	b.n	8001e0a <HAL_ADC_Start_DMA+0x52>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ebe:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <HAL_ADC_Start_DMA+0x170>)
 8001ec0:	6892      	ldr	r2, [r2, #8]
 8001ec2:	f012 0f1f 	tst.w	r2, #31
 8001ec6:	d0be      	beq.n	8001e46 <HAL_ADC_Start_DMA+0x8e>
 8001ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ecc:	d0bb      	beq.n	8001e46 <HAL_ADC_Start_DMA+0x8e>
 8001ece:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <HAL_ADC_Start_DMA+0x180>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d0b8      	beq.n	8001e46 <HAL_ADC_Start_DMA+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ed4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ed6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001eda:	6422      	str	r2, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001edc:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <HAL_ADC_Start_DMA+0x168>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00c      	beq.n	8001efc <HAL_ADC_Start_DMA+0x144>
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_ADC_Start_DMA+0x180>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0b9      	beq.n	8001e62 <HAL_ADC_Start_DMA+0xaa>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ef0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ef8:	6423      	str	r3, [r4, #64]	; 0x40
 8001efa:	e7b2      	b.n	8001e62 <HAL_ADC_Start_DMA+0xaa>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001efc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8001f06:	e7f0      	b.n	8001eea <HAL_ADC_Start_DMA+0x132>
          ADC_CLEAR_ERRORCODE(hadc);
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6463      	str	r3, [r4, #68]	; 0x44
 8001f0c:	e7b1      	b.n	8001e72 <HAL_ADC_Start_DMA+0xba>
        __HAL_UNLOCK(hadc);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001f14:	e779      	b.n	8001e0a <HAL_ADC_Start_DMA+0x52>
    tmp_hal_status = HAL_BUSY;
 8001f16:	2502      	movs	r5, #2
 8001f18:	e777      	b.n	8001e0a <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 8001f1a:	2502      	movs	r5, #2
 8001f1c:	e775      	b.n	8001e0a <HAL_ADC_Start_DMA+0x52>
 8001f1e:	bf00      	nop
 8001f20:	50000100 	.word	0x50000100
 8001f24:	50000700 	.word	0x50000700
 8001f28:	50000300 	.word	0x50000300
 8001f2c:	08001ab1 	.word	0x08001ab1
 8001f30:	08001aa7 	.word	0x08001aa7
 8001f34:	08001a8d 	.word	0x08001a8d
 8001f38:	50000400 	.word	0x50000400

08001f3c <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8001f3c:	4770      	bx	lr

08001f3e <HAL_ADCEx_InjectedQueueOverflowCallback>:
}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
}
 8001f40:	4770      	bx	lr

08001f42 <HAL_ADCEx_LevelOutOfWindow3Callback>:
}
 8001f42:	4770      	bx	lr

08001f44 <HAL_ADC_IRQHandler>:
{
 8001f44:	b510      	push	{r4, lr}
 8001f46:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001f48:	6803      	ldr	r3, [r0, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	f012 0f04 	tst.w	r2, #4
 8001f50:	d003      	beq.n	8001f5a <HAL_ADC_IRQHandler+0x16>
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	f012 0f04 	tst.w	r2, #4
 8001f58:	d107      	bne.n	8001f6a <HAL_ADC_IRQHandler+0x26>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001f5a:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001f5c:	f012 0f08 	tst.w	r2, #8
 8001f60:	d07f      	beq.n	8002062 <HAL_ADC_IRQHandler+0x11e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	f012 0f08 	tst.w	r2, #8
 8001f68:	d07b      	beq.n	8002062 <HAL_ADC_IRQHandler+0x11e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f6c:	f012 0f10 	tst.w	r2, #16
 8001f70:	d103      	bne.n	8001f7a <HAL_ADC_IRQHandler+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f78:	6422      	str	r2, [r4, #64]	; 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f7e:	d028      	beq.n	8001fd2 <HAL_ADC_IRQHandler+0x8e>
 8001f80:	4aa3      	ldr	r2, [pc, #652]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d025      	beq.n	8001fd2 <HAL_ADC_IRQHandler+0x8e>
 8001f86:	4aa3      	ldr	r2, [pc, #652]	; (8002214 <HAL_ADC_IRQHandler+0x2d0>)
 8001f88:	6892      	ldr	r2, [r2, #8]
 8001f8a:	f012 0f1f 	tst.w	r2, #31
 8001f8e:	d125      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x98>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f90:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001f98:	d15d      	bne.n	8002056 <HAL_ADC_IRQHandler+0x112>
 8001f9a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8001f9e:	d15a      	bne.n	8002056 <HAL_ADC_IRQHandler+0x112>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	f012 0f08 	tst.w	r2, #8
 8001fa6:	d056      	beq.n	8002056 <HAL_ADC_IRQHandler+0x112>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	f012 0f04 	tst.w	r2, #4
 8001fae:	d14a      	bne.n	8002046 <HAL_ADC_IRQHandler+0x102>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	f022 020c 	bic.w	r2, r2, #12
 8001fb6:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fbe:	6423      	str	r3, [r4, #64]	; 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fc2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001fc6:	d146      	bne.n	8002056 <HAL_ADC_IRQHandler+0x112>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6423      	str	r3, [r4, #64]	; 0x40
 8001fd0:	e041      	b.n	8002056 <HAL_ADC_IRQHandler+0x112>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001fd2:	4a91      	ldr	r2, [pc, #580]	; (8002218 <HAL_ADC_IRQHandler+0x2d4>)
 8001fd4:	6892      	ldr	r2, [r2, #8]
 8001fd6:	f012 0f1f 	tst.w	r2, #31
 8001fda:	d0d9      	beq.n	8001f90 <HAL_ADC_IRQHandler+0x4c>
 8001fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fe0:	d009      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0xb2>
 8001fe2:	4a8b      	ldr	r2, [pc, #556]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d006      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0xb2>
 8001fe8:	4a8a      	ldr	r2, [pc, #552]	; (8002214 <HAL_ADC_IRQHandler+0x2d0>)
 8001fea:	6892      	ldr	r2, [r2, #8]
 8001fec:	f002 021f 	and.w	r2, r2, #31
 8001ff0:	2a05      	cmp	r2, #5
 8001ff2:	d106      	bne.n	8002002 <HAL_ADC_IRQHandler+0xbe>
 8001ff4:	e7cc      	b.n	8001f90 <HAL_ADC_IRQHandler+0x4c>
 8001ff6:	4a88      	ldr	r2, [pc, #544]	; (8002218 <HAL_ADC_IRQHandler+0x2d4>)
 8001ff8:	6892      	ldr	r2, [r2, #8]
 8001ffa:	f002 021f 	and.w	r2, r2, #31
 8001ffe:	2a05      	cmp	r2, #5
 8002000:	d0c6      	beq.n	8001f90 <HAL_ADC_IRQHandler+0x4c>
 8002002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002006:	d009      	beq.n	800201c <HAL_ADC_IRQHandler+0xd8>
 8002008:	4a81      	ldr	r2, [pc, #516]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d006      	beq.n	800201c <HAL_ADC_IRQHandler+0xd8>
 800200e:	4a81      	ldr	r2, [pc, #516]	; (8002214 <HAL_ADC_IRQHandler+0x2d0>)
 8002010:	6892      	ldr	r2, [r2, #8]
 8002012:	f002 021f 	and.w	r2, r2, #31
 8002016:	2a09      	cmp	r2, #9
 8002018:	d106      	bne.n	8002028 <HAL_ADC_IRQHandler+0xe4>
 800201a:	e7b9      	b.n	8001f90 <HAL_ADC_IRQHandler+0x4c>
 800201c:	4a7e      	ldr	r2, [pc, #504]	; (8002218 <HAL_ADC_IRQHandler+0x2d4>)
 800201e:	6892      	ldr	r2, [r2, #8]
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2a09      	cmp	r2, #9
 8002026:	d0b3      	beq.n	8001f90 <HAL_ADC_IRQHandler+0x4c>
 8002028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800202c:	d0b0      	beq.n	8001f90 <HAL_ADC_IRQHandler+0x4c>
 800202e:	4a7b      	ldr	r2, [pc, #492]	; (800221c <HAL_ADC_IRQHandler+0x2d8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d0ad      	beq.n	8001f90 <HAL_ADC_IRQHandler+0x4c>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002034:	4a76      	ldr	r2, [pc, #472]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d002      	beq.n	8002040 <HAL_ADC_IRQHandler+0xfc>
 800203a:	4a78      	ldr	r2, [pc, #480]	; (800221c <HAL_ADC_IRQHandler+0x2d8>)
 800203c:	68d1      	ldr	r1, [r2, #12]
 800203e:	e7a8      	b.n	8001f92 <HAL_ADC_IRQHandler+0x4e>
 8002040:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002044:	e7fa      	b.n	800203c <HAL_ADC_IRQHandler+0xf8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002048:	f043 0310 	orr.w	r3, r3, #16
 800204c:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8002056:	4620      	mov	r0, r4
 8002058:	f7ff f88e 	bl	8001178 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	220c      	movs	r2, #12
 8002060:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	f012 0f20 	tst.w	r2, #32
 800206a:	d003      	beq.n	8002074 <HAL_ADC_IRQHandler+0x130>
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	f012 0f20 	tst.w	r2, #32
 8002072:	d109      	bne.n	8002088 <HAL_ADC_IRQHandler+0x144>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002074:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002076:	f012 0f40 	tst.w	r2, #64	; 0x40
 800207a:	f000 80df 	beq.w	800223c <HAL_ADC_IRQHandler+0x2f8>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002084:	f000 80da 	beq.w	800223c <HAL_ADC_IRQHandler+0x2f8>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002088:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800208a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800208e:	6422      	str	r2, [r4, #64]	; 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002094:	d045      	beq.n	8002122 <HAL_ADC_IRQHandler+0x1de>
 8002096:	4a5e      	ldr	r2, [pc, #376]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d042      	beq.n	8002122 <HAL_ADC_IRQHandler+0x1de>
 800209c:	4a5d      	ldr	r2, [pc, #372]	; (8002214 <HAL_ADC_IRQHandler+0x2d0>)
 800209e:	6892      	ldr	r2, [r2, #8]
 80020a0:	f012 0f1f 	tst.w	r2, #31
 80020a4:	d142      	bne.n	800212c <HAL_ADC_IRQHandler+0x1e8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80020a6:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80020a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020aa:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80020ae:	d00c      	beq.n	80020ca <HAL_ADC_IRQHandler+0x186>
 80020b0:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80020b4:	f040 80bc 	bne.w	8002230 <HAL_ADC_IRQHandler+0x2ec>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80020b8:	68da      	ldr	r2, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80020ba:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80020be:	f040 80b7 	bne.w	8002230 <HAL_ADC_IRQHandler+0x2ec>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80020c2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80020c6:	f040 80b3 	bne.w	8002230 <HAL_ADC_IRQHandler+0x2ec>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020d0:	f000 80ae 	beq.w	8002230 <HAL_ADC_IRQHandler+0x2ec>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80020d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020d8:	d05d      	beq.n	8002196 <HAL_ADC_IRQHandler+0x252>
 80020da:	4a4d      	ldr	r2, [pc, #308]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d05a      	beq.n	8002196 <HAL_ADC_IRQHandler+0x252>
 80020e0:	4a4c      	ldr	r2, [pc, #304]	; (8002214 <HAL_ADC_IRQHandler+0x2d0>)
 80020e2:	6892      	ldr	r2, [r2, #8]
 80020e4:	f012 0f1f 	tst.w	r2, #31
 80020e8:	d15a      	bne.n	80021a0 <HAL_ADC_IRQHandler+0x25c>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80020ea:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80020ec:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80020f0:	f040 809e 	bne.w	8002230 <HAL_ADC_IRQHandler+0x2ec>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	f012 0f08 	tst.w	r2, #8
 80020fa:	f040 8091 	bne.w	8002220 <HAL_ADC_IRQHandler+0x2dc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002104:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800210c:	6423      	str	r3, [r4, #64]	; 0x40
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800210e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002110:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002114:	f040 808c 	bne.w	8002230 <HAL_ADC_IRQHandler+0x2ec>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002118:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6423      	str	r3, [r4, #64]	; 0x40
 8002120:	e086      	b.n	8002230 <HAL_ADC_IRQHandler+0x2ec>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <HAL_ADC_IRQHandler+0x2d4>)
 8002124:	6892      	ldr	r2, [r2, #8]
 8002126:	f012 0f1f 	tst.w	r2, #31
 800212a:	d0bc      	beq.n	80020a6 <HAL_ADC_IRQHandler+0x162>
 800212c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002130:	d009      	beq.n	8002146 <HAL_ADC_IRQHandler+0x202>
 8002132:	4a37      	ldr	r2, [pc, #220]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d006      	beq.n	8002146 <HAL_ADC_IRQHandler+0x202>
 8002138:	4a36      	ldr	r2, [pc, #216]	; (8002214 <HAL_ADC_IRQHandler+0x2d0>)
 800213a:	6892      	ldr	r2, [r2, #8]
 800213c:	f002 021f 	and.w	r2, r2, #31
 8002140:	2a05      	cmp	r2, #5
 8002142:	d106      	bne.n	8002152 <HAL_ADC_IRQHandler+0x20e>
 8002144:	e7af      	b.n	80020a6 <HAL_ADC_IRQHandler+0x162>
 8002146:	4a34      	ldr	r2, [pc, #208]	; (8002218 <HAL_ADC_IRQHandler+0x2d4>)
 8002148:	6892      	ldr	r2, [r2, #8]
 800214a:	f002 021f 	and.w	r2, r2, #31
 800214e:	2a05      	cmp	r2, #5
 8002150:	d0a9      	beq.n	80020a6 <HAL_ADC_IRQHandler+0x162>
 8002152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002156:	d009      	beq.n	800216c <HAL_ADC_IRQHandler+0x228>
 8002158:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d006      	beq.n	800216c <HAL_ADC_IRQHandler+0x228>
 800215e:	4a2d      	ldr	r2, [pc, #180]	; (8002214 <HAL_ADC_IRQHandler+0x2d0>)
 8002160:	6892      	ldr	r2, [r2, #8]
 8002162:	f002 021f 	and.w	r2, r2, #31
 8002166:	2a09      	cmp	r2, #9
 8002168:	d106      	bne.n	8002178 <HAL_ADC_IRQHandler+0x234>
 800216a:	e79c      	b.n	80020a6 <HAL_ADC_IRQHandler+0x162>
 800216c:	4a2a      	ldr	r2, [pc, #168]	; (8002218 <HAL_ADC_IRQHandler+0x2d4>)
 800216e:	6892      	ldr	r2, [r2, #8]
 8002170:	f002 021f 	and.w	r2, r2, #31
 8002174:	2a09      	cmp	r2, #9
 8002176:	d096      	beq.n	80020a6 <HAL_ADC_IRQHandler+0x162>
 8002178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217c:	d093      	beq.n	80020a6 <HAL_ADC_IRQHandler+0x162>
 800217e:	4a27      	ldr	r2, [pc, #156]	; (800221c <HAL_ADC_IRQHandler+0x2d8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d090      	beq.n	80020a6 <HAL_ADC_IRQHandler+0x162>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002184:	4a22      	ldr	r2, [pc, #136]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d002      	beq.n	8002190 <HAL_ADC_IRQHandler+0x24c>
 800218a:	4a24      	ldr	r2, [pc, #144]	; (800221c <HAL_ADC_IRQHandler+0x2d8>)
 800218c:	68d1      	ldr	r1, [r2, #12]
 800218e:	e78b      	b.n	80020a8 <HAL_ADC_IRQHandler+0x164>
 8002190:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002194:	e7fa      	b.n	800218c <HAL_ADC_IRQHandler+0x248>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002196:	4a20      	ldr	r2, [pc, #128]	; (8002218 <HAL_ADC_IRQHandler+0x2d4>)
 8002198:	6892      	ldr	r2, [r2, #8]
 800219a:	f012 0f1f 	tst.w	r2, #31
 800219e:	d0a4      	beq.n	80020ea <HAL_ADC_IRQHandler+0x1a6>
 80021a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a4:	d009      	beq.n	80021ba <HAL_ADC_IRQHandler+0x276>
 80021a6:	4a1a      	ldr	r2, [pc, #104]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d006      	beq.n	80021ba <HAL_ADC_IRQHandler+0x276>
 80021ac:	4a19      	ldr	r2, [pc, #100]	; (8002214 <HAL_ADC_IRQHandler+0x2d0>)
 80021ae:	6892      	ldr	r2, [r2, #8]
 80021b0:	f002 021f 	and.w	r2, r2, #31
 80021b4:	2a06      	cmp	r2, #6
 80021b6:	d106      	bne.n	80021c6 <HAL_ADC_IRQHandler+0x282>
 80021b8:	e797      	b.n	80020ea <HAL_ADC_IRQHandler+0x1a6>
 80021ba:	4a17      	ldr	r2, [pc, #92]	; (8002218 <HAL_ADC_IRQHandler+0x2d4>)
 80021bc:	6892      	ldr	r2, [r2, #8]
 80021be:	f002 021f 	and.w	r2, r2, #31
 80021c2:	2a06      	cmp	r2, #6
 80021c4:	d091      	beq.n	80020ea <HAL_ADC_IRQHandler+0x1a6>
 80021c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021ca:	d009      	beq.n	80021e0 <HAL_ADC_IRQHandler+0x29c>
 80021cc:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d006      	beq.n	80021e0 <HAL_ADC_IRQHandler+0x29c>
 80021d2:	4a10      	ldr	r2, [pc, #64]	; (8002214 <HAL_ADC_IRQHandler+0x2d0>)
 80021d4:	6892      	ldr	r2, [r2, #8]
 80021d6:	f002 021f 	and.w	r2, r2, #31
 80021da:	2a07      	cmp	r2, #7
 80021dc:	d107      	bne.n	80021ee <HAL_ADC_IRQHandler+0x2aa>
 80021de:	e784      	b.n	80020ea <HAL_ADC_IRQHandler+0x1a6>
 80021e0:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <HAL_ADC_IRQHandler+0x2d4>)
 80021e2:	6892      	ldr	r2, [r2, #8]
 80021e4:	f002 021f 	and.w	r2, r2, #31
 80021e8:	2a07      	cmp	r2, #7
 80021ea:	f43f af7e 	beq.w	80020ea <HAL_ADC_IRQHandler+0x1a6>
 80021ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f2:	f43f af7a 	beq.w	80020ea <HAL_ADC_IRQHandler+0x1a6>
 80021f6:	4a09      	ldr	r2, [pc, #36]	; (800221c <HAL_ADC_IRQHandler+0x2d8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	f43f af76 	beq.w	80020ea <HAL_ADC_IRQHandler+0x1a6>
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80021fe:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_ADC_IRQHandler+0x2cc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d002      	beq.n	800220a <HAL_ADC_IRQHandler+0x2c6>
 8002204:	4a05      	ldr	r2, [pc, #20]	; (800221c <HAL_ADC_IRQHandler+0x2d8>)
 8002206:	68d2      	ldr	r2, [r2, #12]
 8002208:	e770      	b.n	80020ec <HAL_ADC_IRQHandler+0x1a8>
 800220a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800220e:	e7fa      	b.n	8002206 <HAL_ADC_IRQHandler+0x2c2>
 8002210:	50000100 	.word	0x50000100
 8002214:	50000700 	.word	0x50000700
 8002218:	50000300 	.word	0x50000300
 800221c:	50000400 	.word	0x50000400
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6423      	str	r3, [r4, #64]	; 0x40
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002228:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff fe83 	bl	8001f3c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	2260      	movs	r2, #96	; 0x60
 800223a:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002244:	d003      	beq.n	800224e <HAL_ADC_IRQHandler+0x30a>
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f013 0f80 	tst.w	r3, #128	; 0x80
 800224c:	d144      	bne.n	80022d8 <HAL_ADC_IRQHandler+0x394>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002256:	d003      	beq.n	8002260 <HAL_ADC_IRQHandler+0x31c>
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800225e:	d146      	bne.n	80022ee <HAL_ADC_IRQHandler+0x3aa>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002268:	d003      	beq.n	8002272 <HAL_ADC_IRQHandler+0x32e>
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002270:	d149      	bne.n	8002306 <HAL_ADC_IRQHandler+0x3c2>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	f012 0f10 	tst.w	r2, #16
 800227a:	d023      	beq.n	80022c4 <HAL_ADC_IRQHandler+0x380>
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	f012 0f10 	tst.w	r2, #16
 8002282:	d01f      	beq.n	80022c4 <HAL_ADC_IRQHandler+0x380>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002284:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002286:	2a01      	cmp	r2, #1
 8002288:	d00e      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x364>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800228a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800228e:	d049      	beq.n	8002324 <HAL_ADC_IRQHandler+0x3e0>
 8002290:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <HAL_ADC_IRQHandler+0x40c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d043      	beq.n	800231e <HAL_ADC_IRQHandler+0x3da>
 8002296:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <HAL_ADC_IRQHandler+0x410>)
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002298:	6891      	ldr	r1, [r2, #8]
 800229a:	f011 0f1f 	tst.w	r1, #31
 800229e:	d143      	bne.n	8002328 <HAL_ADC_IRQHandler+0x3e4>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f013 0f01 	tst.w	r3, #1
 80022a6:	d00a      	beq.n	80022be <HAL_ADC_IRQHandler+0x37a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ae:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022b2:	f043 0302 	orr.w	r3, r3, #2
 80022b6:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fb6b 	bl	8001994 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	2210      	movs	r2, #16
 80022c2:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80022cc:	d003      	beq.n	80022d6 <HAL_ADC_IRQHandler+0x392>
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80022d4:	d12d      	bne.n	8002332 <HAL_ADC_IRQHandler+0x3ee>
}
 80022d6:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022de:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff fb56 	bl	8001992 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	e7af      	b.n	800224e <HAL_ADC_IRQHandler+0x30a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80022ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f4:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff fe22 	bl	8001f40 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e7ac      	b.n	8002260 <HAL_ADC_IRQHandler+0x31c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800230c:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800230e:	4620      	mov	r0, r4
 8002310:	f7ff fe17 	bl	8001f42 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e7a9      	b.n	8002272 <HAL_ADC_IRQHandler+0x32e>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002322:	e7b9      	b.n	8002298 <HAL_ADC_IRQHandler+0x354>
 8002324:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <HAL_ADC_IRQHandler+0x414>)
 8002326:	e7b7      	b.n	8002298 <HAL_ADC_IRQHandler+0x354>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002328:	6893      	ldr	r3, [r2, #8]
 800232a:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800232e:	d0c6      	beq.n	80022be <HAL_ADC_IRQHandler+0x37a>
 8002330:	e7ba      	b.n	80022a8 <HAL_ADC_IRQHandler+0x364>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002332:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002334:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002338:	6422      	str	r2, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800233a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800233c:	f042 0208 	orr.w	r2, r2, #8
 8002340:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002346:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff fdf8 	bl	8001f3e <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 800234e:	e7c2      	b.n	80022d6 <HAL_ADC_IRQHandler+0x392>
 8002350:	50000100 	.word	0x50000100
 8002354:	50000700 	.word	0x50000700
 8002358:	50000300 	.word	0x50000300

0800235c <HAL_ADC_ConfigChannel>:
{
 800235c:	b430      	push	{r4, r5}
 800235e:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8002360:	2200      	movs	r2, #0
 8002362:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002364:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002368:	2a01      	cmp	r2, #1
 800236a:	f000 81bb 	beq.w	80026e4 <HAL_ADC_ConfigChannel+0x388>
 800236e:	4603      	mov	r3, r0
 8002370:	2201      	movs	r2, #1
 8002372:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002376:	6800      	ldr	r0, [r0, #0]
 8002378:	6882      	ldr	r2, [r0, #8]
 800237a:	f012 0f04 	tst.w	r2, #4
 800237e:	f040 81a6 	bne.w	80026ce <HAL_ADC_ConfigChannel+0x372>
    if (sConfig->Rank < 5U)
 8002382:	684a      	ldr	r2, [r1, #4]
 8002384:	2a04      	cmp	r2, #4
 8002386:	d831      	bhi.n	80023ec <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8002388:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800238a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800238e:	0055      	lsls	r5, r2, #1
 8002390:	221f      	movs	r2, #31
 8002392:	40aa      	lsls	r2, r5
 8002394:	ea24 0202 	bic.w	r2, r4, r2
 8002398:	680c      	ldr	r4, [r1, #0]
 800239a:	40ac      	lsls	r4, r5
 800239c:	4322      	orrs	r2, r4
 800239e:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	6882      	ldr	r2, [r0, #8]
 80023a4:	f012 0f0c 	tst.w	r2, #12
 80023a8:	d168      	bne.n	800247c <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80023aa:	680a      	ldr	r2, [r1, #0]
 80023ac:	2a09      	cmp	r2, #9
 80023ae:	d94e      	bls.n	800244e <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023b0:	6984      	ldr	r4, [r0, #24]
 80023b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80023b6:	3a1e      	subs	r2, #30
 80023b8:	2507      	movs	r5, #7
 80023ba:	4095      	lsls	r5, r2
 80023bc:	ea24 0405 	bic.w	r4, r4, r5
 80023c0:	688d      	ldr	r5, [r1, #8]
 80023c2:	fa05 f202 	lsl.w	r2, r5, r2
 80023c6:	4322      	orrs	r2, r4
 80023c8:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80023ca:	6948      	ldr	r0, [r1, #20]
 80023cc:	681c      	ldr	r4, [r3, #0]
 80023ce:	68e2      	ldr	r2, [r4, #12]
 80023d0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80023d4:	0052      	lsls	r2, r2, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 80023da:	6908      	ldr	r0, [r1, #16]
 80023dc:	3801      	subs	r0, #1
 80023de:	2803      	cmp	r0, #3
 80023e0:	f200 8095 	bhi.w	800250e <HAL_ADC_ConfigChannel+0x1b2>
 80023e4:	e8df f000 	tbb	[pc, r0]
 80023e8:	887d7240 	.word	0x887d7240
    else if (sConfig->Rank < 10U)
 80023ec:	2a09      	cmp	r2, #9
 80023ee:	d80e      	bhi.n	800240e <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80023f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80023f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80023f6:	0055      	lsls	r5, r2, #1
 80023f8:	3d1e      	subs	r5, #30
 80023fa:	221f      	movs	r2, #31
 80023fc:	40aa      	lsls	r2, r5
 80023fe:	ea24 0202 	bic.w	r2, r4, r2
 8002402:	680c      	ldr	r4, [r1, #0]
 8002404:	fa04 f505 	lsl.w	r5, r4, r5
 8002408:	432a      	orrs	r2, r5
 800240a:	6342      	str	r2, [r0, #52]	; 0x34
 800240c:	e7c8      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 800240e:	2a0e      	cmp	r2, #14
 8002410:	d80e      	bhi.n	8002430 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002412:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002414:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002418:	0055      	lsls	r5, r2, #1
 800241a:	3d3c      	subs	r5, #60	; 0x3c
 800241c:	221f      	movs	r2, #31
 800241e:	40aa      	lsls	r2, r5
 8002420:	ea24 0202 	bic.w	r2, r4, r2
 8002424:	680c      	ldr	r4, [r1, #0]
 8002426:	fa04 f505 	lsl.w	r5, r4, r5
 800242a:	432a      	orrs	r2, r5
 800242c:	6382      	str	r2, [r0, #56]	; 0x38
 800242e:	e7b7      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002430:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002432:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002436:	0055      	lsls	r5, r2, #1
 8002438:	3d5a      	subs	r5, #90	; 0x5a
 800243a:	221f      	movs	r2, #31
 800243c:	40aa      	lsls	r2, r5
 800243e:	ea24 0202 	bic.w	r2, r4, r2
 8002442:	680c      	ldr	r4, [r1, #0]
 8002444:	fa04 f505 	lsl.w	r5, r4, r5
 8002448:	432a      	orrs	r2, r5
 800244a:	63c2      	str	r2, [r0, #60]	; 0x3c
 800244c:	e7a8      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800244e:	6944      	ldr	r4, [r0, #20]
 8002450:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002454:	2507      	movs	r5, #7
 8002456:	4095      	lsls	r5, r2
 8002458:	ea24 0405 	bic.w	r4, r4, r5
 800245c:	688d      	ldr	r5, [r1, #8]
 800245e:	fa05 f202 	lsl.w	r2, r5, r2
 8002462:	4322      	orrs	r2, r4
 8002464:	6142      	str	r2, [r0, #20]
 8002466:	e7b0      	b.n	80023ca <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002468:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800246a:	4d9f      	ldr	r5, [pc, #636]	; (80026e8 <HAL_ADC_ConfigChannel+0x38c>)
 800246c:	4005      	ands	r5, r0
 800246e:	6808      	ldr	r0, [r1, #0]
 8002470:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8002474:	4315      	orrs	r5, r2
 8002476:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800247a:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	6882      	ldr	r2, [r0, #8]
 8002480:	f002 0203 	and.w	r2, r2, #3
 8002484:	2a01      	cmp	r2, #1
 8002486:	d075      	beq.n	8002574 <HAL_ADC_ConfigChannel+0x218>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002488:	68ca      	ldr	r2, [r1, #12]
 800248a:	2a01      	cmp	r2, #1
 800248c:	d078      	beq.n	8002580 <HAL_ADC_ConfigChannel+0x224>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800248e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8002492:	680d      	ldr	r5, [r1, #0]
 8002494:	2401      	movs	r4, #1
 8002496:	40ac      	lsls	r4, r5
 8002498:	ea22 0204 	bic.w	r2, r2, r4
 800249c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80024a6:	f000 8096 	beq.w	80025d6 <HAL_ADC_ConfigChannel+0x27a>
 80024aa:	4890      	ldr	r0, [pc, #576]	; (80026ec <HAL_ADC_ConfigChannel+0x390>)
 80024ac:	4282      	cmp	r2, r0
 80024ae:	f000 8090 	beq.w	80025d2 <HAL_ADC_ConfigChannel+0x276>
 80024b2:	4c8f      	ldr	r4, [pc, #572]	; (80026f0 <HAL_ADC_ConfigChannel+0x394>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024b4:	6808      	ldr	r0, [r1, #0]
 80024b6:	2810      	cmp	r0, #16
 80024b8:	f000 808f 	beq.w	80025da <HAL_ADC_ConfigChannel+0x27e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024bc:	2811      	cmp	r0, #17
 80024be:	f000 80a0 	beq.w	8002602 <HAL_ADC_ConfigChannel+0x2a6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024c2:	2812      	cmp	r0, #18
 80024c4:	f000 80a2 	beq.w	800260c <HAL_ADC_ConfigChannel+0x2b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c8:	2000      	movs	r0, #0
 80024ca:	e105      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x37c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80024cc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80024ce:	4d86      	ldr	r5, [pc, #536]	; (80026e8 <HAL_ADC_ConfigChannel+0x38c>)
 80024d0:	4005      	ands	r5, r0
 80024d2:	6808      	ldr	r0, [r1, #0]
 80024d4:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80024d8:	4315      	orrs	r5, r2
 80024da:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80024de:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 80024e0:	e7cc      	b.n	800247c <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80024e2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80024e4:	4d80      	ldr	r5, [pc, #512]	; (80026e8 <HAL_ADC_ConfigChannel+0x38c>)
 80024e6:	4005      	ands	r5, r0
 80024e8:	6808      	ldr	r0, [r1, #0]
 80024ea:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80024ee:	4315      	orrs	r5, r2
 80024f0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80024f4:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 80024f6:	e7c1      	b.n	800247c <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80024f8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80024fa:	487b      	ldr	r0, [pc, #492]	; (80026e8 <HAL_ADC_ConfigChannel+0x38c>)
 80024fc:	4028      	ands	r0, r5
 80024fe:	680d      	ldr	r5, [r1, #0]
 8002500:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8002504:	4302      	orrs	r2, r0
 8002506:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800250a:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 800250c:	e7b6      	b.n	800247c <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800250e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002510:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002514:	6808      	ldr	r0, [r1, #0]
 8002516:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 800251a:	d01c      	beq.n	8002556 <HAL_ADC_ConfigChannel+0x1fa>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8002520:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002524:	680c      	ldr	r4, [r1, #0]
 8002526:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800252a:	d019      	beq.n	8002560 <HAL_ADC_ConfigChannel+0x204>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002530:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002534:	680c      	ldr	r4, [r1, #0]
 8002536:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800253a:	d016      	beq.n	800256a <HAL_ADC_ConfigChannel+0x20e>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002540:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002544:	680c      	ldr	r4, [r1, #0]
 8002546:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800254a:	d197      	bne.n	800247c <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800254c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800254e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002552:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002554:	e792      	b.n	800247c <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002556:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002558:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800255c:	6622      	str	r2, [r4, #96]	; 0x60
 800255e:	e7dd      	b.n	800251c <HAL_ADC_ConfigChannel+0x1c0>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002560:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8002562:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002566:	6642      	str	r2, [r0, #100]	; 0x64
 8002568:	e7e0      	b.n	800252c <HAL_ADC_ConfigChannel+0x1d0>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800256a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800256c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002570:	6682      	str	r2, [r0, #104]	; 0x68
 8002572:	e7e3      	b.n	800253c <HAL_ADC_ConfigChannel+0x1e0>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002574:	6802      	ldr	r2, [r0, #0]
 8002576:	f012 0f01 	tst.w	r2, #1
 800257a:	d085      	beq.n	8002488 <HAL_ADC_ConfigChannel+0x12c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800257c:	2000      	movs	r0, #0
 800257e:	e0ab      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x37c>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002580:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8002584:	680d      	ldr	r5, [r1, #0]
 8002586:	2401      	movs	r4, #1
 8002588:	40ac      	lsls	r4, r5
 800258a:	4322      	orrs	r2, r4
 800258c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002590:	680a      	ldr	r2, [r1, #0]
 8002592:	2a09      	cmp	r2, #9
 8002594:	d90e      	bls.n	80025b4 <HAL_ADC_ConfigChannel+0x258>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002596:	681d      	ldr	r5, [r3, #0]
 8002598:	69a8      	ldr	r0, [r5, #24]
 800259a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800259e:	3a1b      	subs	r2, #27
 80025a0:	2407      	movs	r4, #7
 80025a2:	4094      	lsls	r4, r2
 80025a4:	ea20 0004 	bic.w	r0, r0, r4
 80025a8:	688c      	ldr	r4, [r1, #8]
 80025aa:	fa04 f202 	lsl.w	r2, r4, r2
 80025ae:	4302      	orrs	r2, r0
 80025b0:	61aa      	str	r2, [r5, #24]
 80025b2:	e775      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x144>
        MODIFY_REG(hadc->Instance->SMPR1,
 80025b4:	681d      	ldr	r5, [r3, #0]
 80025b6:	6968      	ldr	r0, [r5, #20]
 80025b8:	3201      	adds	r2, #1
 80025ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80025be:	2407      	movs	r4, #7
 80025c0:	4094      	lsls	r4, r2
 80025c2:	ea20 0004 	bic.w	r0, r0, r4
 80025c6:	688c      	ldr	r4, [r1, #8]
 80025c8:	fa04 f202 	lsl.w	r2, r4, r2
 80025cc:	4302      	orrs	r2, r0
 80025ce:	616a      	str	r2, [r5, #20]
 80025d0:	e766      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x144>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d2:	4c48      	ldr	r4, [pc, #288]	; (80026f4 <HAL_ADC_ConfigChannel+0x398>)
 80025d4:	e76e      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x158>
 80025d6:	4c47      	ldr	r4, [pc, #284]	; (80026f4 <HAL_ADC_ConfigChannel+0x398>)
 80025d8:	e76c      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x158>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80025da:	68a5      	ldr	r5, [r4, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025dc:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80025e0:	f47f af6c 	bne.w	80024bc <HAL_ADC_ConfigChannel+0x160>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80025e4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80025e8:	d016      	beq.n	8002618 <HAL_ADC_ConfigChannel+0x2bc>
 80025ea:	4840      	ldr	r0, [pc, #256]	; (80026ec <HAL_ADC_ConfigChannel+0x390>)
 80025ec:	4282      	cmp	r2, r0
 80025ee:	d02c      	beq.n	800264a <HAL_ADC_ConfigChannel+0x2ee>
 80025f0:	4841      	ldr	r0, [pc, #260]	; (80026f8 <HAL_ADC_ConfigChannel+0x39c>)
 80025f2:	4282      	cmp	r2, r0
 80025f4:	d02d      	beq.n	8002652 <HAL_ADC_ConfigChannel+0x2f6>
 80025f6:	4841      	ldr	r0, [pc, #260]	; (80026fc <HAL_ADC_ConfigChannel+0x3a0>)
 80025f8:	4282      	cmp	r2, r0
 80025fa:	d02d      	beq.n	8002658 <HAL_ADC_ConfigChannel+0x2fc>
 80025fc:	2200      	movs	r2, #0
 80025fe:	9202      	str	r2, [sp, #8]
 8002600:	e00d      	b.n	800261e <HAL_ADC_ConfigChannel+0x2c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002602:	68a5      	ldr	r5, [r4, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002604:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 8002608:	d0ec      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x288>
 800260a:	e75a      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x166>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800260c:	68a0      	ldr	r0, [r4, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800260e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002612:	d0e7      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x288>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002614:	2000      	movs	r0, #0
 8002616:	e05f      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x37c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002618:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800261c:	9202      	str	r2, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	6882      	ldr	r2, [r0, #8]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	2a01      	cmp	r2, #1
 8002628:	d019      	beq.n	800265e <HAL_ADC_ConfigChannel+0x302>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800262a:	9a02      	ldr	r2, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800262c:	b122      	cbz	r2, 8002638 <HAL_ADC_ConfigChannel+0x2dc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800262e:	6895      	ldr	r5, [r2, #8]
 8002630:	f005 0503 	and.w	r5, r5, #3
 8002634:	2d01      	cmp	r5, #1
 8002636:	d01c      	beq.n	8002672 <HAL_ADC_ConfigChannel+0x316>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002638:	680a      	ldr	r2, [r1, #0]
 800263a:	2a10      	cmp	r2, #16
 800263c:	d01e      	beq.n	800267c <HAL_ADC_ConfigChannel+0x320>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800263e:	2a11      	cmp	r2, #17
 8002640:	d036      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x354>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002642:	2a12      	cmp	r2, #18
 8002644:	d03d      	beq.n	80026c2 <HAL_ADC_ConfigChannel+0x366>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002646:	2000      	movs	r0, #0
 8002648:	e046      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x37c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800264a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800264e:	9202      	str	r2, [sp, #8]
 8002650:	e7e5      	b.n	800261e <HAL_ADC_ConfigChannel+0x2c2>
 8002652:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <HAL_ADC_ConfigChannel+0x3a0>)
 8002654:	9202      	str	r2, [sp, #8]
 8002656:	e7e2      	b.n	800261e <HAL_ADC_ConfigChannel+0x2c2>
 8002658:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <HAL_ADC_ConfigChannel+0x39c>)
 800265a:	9202      	str	r2, [sp, #8]
 800265c:	e7df      	b.n	800261e <HAL_ADC_ConfigChannel+0x2c2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800265e:	6802      	ldr	r2, [r0, #0]
 8002660:	f012 0f01 	tst.w	r2, #1
 8002664:	d0e1      	beq.n	800262a <HAL_ADC_ConfigChannel+0x2ce>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002668:	f042 0220 	orr.w	r2, r2, #32
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 800266e:	2001      	movs	r0, #1
 8002670:	e032      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x37c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	f012 0f01 	tst.w	r2, #1
 8002678:	d1f5      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x30a>
 800267a:	e7dd      	b.n	8002638 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800267c:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002680:	d1dd      	bne.n	800263e <HAL_ADC_ConfigChannel+0x2e2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002682:	68a2      	ldr	r2, [r4, #8]
 8002684:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002688:	60a2      	str	r2, [r4, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800268a:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <HAL_ADC_ConfigChannel+0x3a4>)
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	491d      	ldr	r1, [pc, #116]	; (8002704 <HAL_ADC_ConfigChannel+0x3a8>)
 8002690:	fba1 1202 	umull	r1, r2, r1, r2
 8002694:	0c92      	lsrs	r2, r2, #18
 8002696:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800269a:	0051      	lsls	r1, r2, #1
 800269c:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800269e:	e002      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x34a>
            wait_loop_index--;
 80026a0:	9a01      	ldr	r2, [sp, #4]
 80026a2:	3a01      	subs	r2, #1
 80026a4:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80026a6:	9a01      	ldr	r2, [sp, #4]
 80026a8:	2a00      	cmp	r2, #0
 80026aa:	d1f9      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x344>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ac:	2000      	movs	r0, #0
 80026ae:	e013      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x37c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80026b0:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80026b4:	d1c5      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x2e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80026b6:	68a2      	ldr	r2, [r4, #8]
 80026b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80026bc:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026be:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80026c0:	e00a      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x37c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80026c2:	68a2      	ldr	r2, [r4, #8]
 80026c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80026c8:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ca:	2000      	movs	r0, #0
 80026cc:	e004      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x37c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d0:	f042 0220 	orr.w	r2, r2, #32
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80026d6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80026de:	b016      	add	sp, #88	; 0x58
 80026e0:	bc30      	pop	{r4, r5}
 80026e2:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80026e4:	2002      	movs	r0, #2
 80026e6:	e7fa      	b.n	80026de <HAL_ADC_ConfigChannel+0x382>
 80026e8:	83fff000 	.word	0x83fff000
 80026ec:	50000100 	.word	0x50000100
 80026f0:	50000700 	.word	0x50000700
 80026f4:	50000300 	.word	0x50000300
 80026f8:	50000400 	.word	0x50000400
 80026fc:	50000500 	.word	0x50000500
 8002700:	20000004 	.word	0x20000004
 8002704:	431bde83 	.word	0x431bde83

08002708 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8002708:	b470      	push	{r4, r5, r6}
 800270a:	b095      	sub	sp, #84	; 0x54
 800270c:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800270e:	6802      	ldr	r2, [r0, #0]
 8002710:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002714:	d00b      	beq.n	800272e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002716:	484d      	ldr	r0, [pc, #308]	; (800284c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002718:	4282      	cmp	r2, r0
 800271a:	d04b      	beq.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800271c:	484c      	ldr	r0, [pc, #304]	; (8002850 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800271e:	4282      	cmp	r2, r0
 8002720:	d04c      	beq.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8002722:	484c      	ldr	r0, [pc, #304]	; (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002724:	4282      	cmp	r2, r0
 8002726:	d04c      	beq.n	80027c2 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8002728:	2200      	movs	r2, #0
 800272a:	9200      	str	r2, [sp, #0]
 800272c:	e002      	b.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 800272e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002732:	9200      	str	r2, [sp, #0]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002734:	9a00      	ldr	r2, [sp, #0]
 8002736:	2a00      	cmp	r2, #0
 8002738:	f000 8084 	beq.w	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
  __HAL_LOCK(hadc);
 800273c:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
 8002740:	2801      	cmp	r0, #1
 8002742:	f000 8081 	beq.w	8002848 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8002746:	2001      	movs	r0, #1
 8002748:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	6884      	ldr	r4, [r0, #8]
 8002750:	f014 0f04 	tst.w	r4, #4
 8002754:	d16b      	bne.n	800282e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002756:	6894      	ldr	r4, [r2, #8]
 8002758:	f014 0f04 	tst.w	r4, #4
 800275c:	d167      	bne.n	800282e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800275e:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002762:	d033      	beq.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8002764:	4c39      	ldr	r4, [pc, #228]	; (800284c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002766:	42a0      	cmp	r0, r4
 8002768:	d02e      	beq.n	80027c8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 800276a:	483b      	ldr	r0, [pc, #236]	; (8002858 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800276c:	680c      	ldr	r4, [r1, #0]
 800276e:	2c00      	cmp	r4, #0
 8002770:	d03a      	beq.n	80027e8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002772:	6884      	ldr	r4, [r0, #8]
 8002774:	f424 4460 	bic.w	r4, r4, #57344	; 0xe000
 8002778:	684d      	ldr	r5, [r1, #4]
 800277a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
 800277e:	ea45 3546 	orr.w	r5, r5, r6, lsl #13
 8002782:	432c      	orrs	r4, r5
 8002784:	6084      	str	r4, [r0, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002786:	681d      	ldr	r5, [r3, #0]
 8002788:	68ac      	ldr	r4, [r5, #8]
 800278a:	f004 0403 	and.w	r4, r4, #3
 800278e:	2c01      	cmp	r4, #1
 8002790:	d01e      	beq.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002792:	6894      	ldr	r4, [r2, #8]
 8002794:	f004 0403 	and.w	r4, r4, #3
 8002798:	2c01      	cmp	r4, #1
 800279a:	d01f      	beq.n	80027dc <HAL_ADCEx_MultiModeConfigChannel+0xd4>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800279c:	6882      	ldr	r2, [r0, #8]
 800279e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80027a2:	f022 020f 	bic.w	r2, r2, #15
 80027a6:	680c      	ldr	r4, [r1, #0]
 80027a8:	6889      	ldr	r1, [r1, #8]
 80027aa:	4321      	orrs	r1, r4
 80027ac:	430a      	orrs	r2, r1
 80027ae:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b0:	2000      	movs	r0, #0
 80027b2:	e041      	b.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80027b8:	9200      	str	r2, [sp, #0]
 80027ba:	e7bb      	b.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 80027bc:	4a25      	ldr	r2, [pc, #148]	; (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80027be:	9200      	str	r2, [sp, #0]
 80027c0:	e7b8      	b.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 80027c2:	4a23      	ldr	r2, [pc, #140]	; (8002850 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80027c4:	9200      	str	r2, [sp, #0]
 80027c6:	e7b5      	b.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027c8:	4824      	ldr	r0, [pc, #144]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80027ca:	e7cf      	b.n	800276c <HAL_ADCEx_MultiModeConfigChannel+0x64>
 80027cc:	4823      	ldr	r0, [pc, #140]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80027ce:	e7cd      	b.n	800276c <HAL_ADCEx_MultiModeConfigChannel+0x64>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027d0:	682c      	ldr	r4, [r5, #0]
 80027d2:	f014 0f01 	tst.w	r4, #1
 80027d6:	d0dc      	beq.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d8:	2000      	movs	r0, #0
 80027da:	e02d      	b.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x130>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	f012 0f01 	tst.w	r2, #1
 80027e2:	d0db      	beq.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0x94>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e4:	2000      	movs	r0, #0
 80027e6:	e027      	b.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027e8:	6881      	ldr	r1, [r0, #8]
 80027ea:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80027ee:	6081      	str	r1, [r0, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027f0:	681c      	ldr	r4, [r3, #0]
 80027f2:	68a1      	ldr	r1, [r4, #8]
 80027f4:	f001 0103 	and.w	r1, r1, #3
 80027f8:	2901      	cmp	r1, #1
 80027fa:	d00c      	beq.n	8002816 <HAL_ADCEx_MultiModeConfigChannel+0x10e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027fc:	6891      	ldr	r1, [r2, #8]
 80027fe:	f001 0103 	and.w	r1, r1, #3
 8002802:	2901      	cmp	r1, #1
 8002804:	d00d      	beq.n	8002822 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002806:	6882      	ldr	r2, [r0, #8]
 8002808:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800280c:	f022 020f 	bic.w	r2, r2, #15
 8002810:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002812:	2000      	movs	r0, #0
 8002814:	e010      	b.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002816:	6821      	ldr	r1, [r4, #0]
 8002818:	f011 0f01 	tst.w	r1, #1
 800281c:	d0ee      	beq.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281e:	2000      	movs	r0, #0
 8002820:	e00a      	b.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x130>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	f012 0f01 	tst.w	r2, #1
 8002828:	d0ed      	beq.n	8002806 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282a:	2000      	movs	r0, #0
 800282c:	e004      	b.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x130>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800282e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002830:	f042 0220 	orr.w	r2, r2, #32
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8002836:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 800283e:	b015      	add	sp, #84	; 0x54
 8002840:	bc70      	pop	{r4, r5, r6}
 8002842:	4770      	bx	lr
    return HAL_ERROR;
 8002844:	2001      	movs	r0, #1
 8002846:	e7fa      	b.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  __HAL_LOCK(hadc);
 8002848:	2002      	movs	r0, #2
 800284a:	e7f8      	b.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800284c:	50000100 	.word	0x50000100
 8002850:	50000400 	.word	0x50000400
 8002854:	50000500 	.word	0x50000500
 8002858:	50000700 	.word	0x50000700
 800285c:	50000300 	.word	0x50000300

08002860 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002862:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002864:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	0200      	lsls	r0, r0, #8
 800286e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002872:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002874:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002878:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800287c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002884:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002886:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <HAL_NVIC_SetPriority+0x60>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288e:	f1c3 0407 	rsb	r4, r3, #7
 8002892:	2c04      	cmp	r4, #4
 8002894:	bf28      	it	cs
 8002896:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002898:	1d1d      	adds	r5, r3, #4
 800289a:	2d06      	cmp	r5, #6
 800289c:	d918      	bls.n	80028d0 <HAL_NVIC_SetPriority+0x4c>
 800289e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80028a4:	fa05 f404 	lsl.w	r4, r5, r4
 80028a8:	ea21 0104 	bic.w	r1, r1, r4
 80028ac:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ae:	fa05 f303 	lsl.w	r3, r5, r3
 80028b2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80028b8:	2800      	cmp	r0, #0
 80028ba:	db0b      	blt.n	80028d4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	0109      	lsls	r1, r1, #4
 80028be:	b2c9      	uxtb	r1, r1
 80028c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80028c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80028c8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80028cc:	bc30      	pop	{r4, r5}
 80028ce:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d0:	2300      	movs	r3, #0
 80028d2:	e7e5      	b.n	80028a0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	f000 000f 	and.w	r0, r0, #15
 80028d8:	0109      	lsls	r1, r1, #4
 80028da:	b2c9      	uxtb	r1, r1
 80028dc:	4b02      	ldr	r3, [pc, #8]	; (80028e8 <HAL_NVIC_SetPriority+0x64>)
 80028de:	5419      	strb	r1, [r3, r0]
 80028e0:	e7f4      	b.n	80028cc <HAL_NVIC_SetPriority+0x48>
 80028e2:	bf00      	nop
 80028e4:	e000ed00 	.word	0xe000ed00
 80028e8:	e000ed14 	.word	0xe000ed14

080028ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80028ec:	2800      	cmp	r0, #0
 80028ee:	db07      	blt.n	8002900 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f0:	f000 021f 	and.w	r2, r0, #31
 80028f4:	0940      	lsrs	r0, r0, #5
 80028f6:	2301      	movs	r3, #1
 80028f8:	4093      	lsls	r3, r2
 80028fa:	4a02      	ldr	r2, [pc, #8]	; (8002904 <HAL_NVIC_EnableIRQ+0x18>)
 80028fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000e100 	.word	0xe000e100

08002908 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	3801      	subs	r0, #1
 800290a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800290e:	d20a      	bcs.n	8002926 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_SYSTICK_Config+0x24>)
 8002912:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <HAL_SYSTICK_Config+0x28>)
 8002916:	21f0      	movs	r1, #240	; 0xf0
 8002918:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800291c:	2000      	movs	r0, #0
 800291e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002920:	2207      	movs	r2, #7
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002926:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002934:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002936:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002938:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800293a:	2401      	movs	r4, #1
 800293c:	40b4      	lsls	r4, r6
 800293e:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002940:	6804      	ldr	r4, [r0, #0]
 8002942:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002944:	6843      	ldr	r3, [r0, #4]
 8002946:	2b10      	cmp	r3, #16
 8002948:	d005      	beq.n	8002956 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800294a:	6803      	ldr	r3, [r0, #0]
 800294c:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800294e:	6803      	ldr	r3, [r0, #0]
 8002950:	60da      	str	r2, [r3, #12]
  }
}
 8002952:	bc70      	pop	{r4, r5, r6}
 8002954:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002956:	6803      	ldr	r3, [r0, #0]
 8002958:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800295a:	6803      	ldr	r3, [r0, #0]
 800295c:	60d9      	str	r1, [r3, #12]
 800295e:	e7f8      	b.n	8002952 <DMA_SetConfig+0x1e>

08002960 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002960:	6802      	ldr	r2, [r0, #0]
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <DMA_CalcBaseAndBitshift+0x34>)
 8002964:	429a      	cmp	r2, r3
 8002966:	d90a      	bls.n	800297e <DMA_CalcBaseAndBitshift+0x1e>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <DMA_CalcBaseAndBitshift+0x38>)
 800296a:	4413      	add	r3, r2
 800296c:	4a0b      	ldr	r2, [pc, #44]	; (800299c <DMA_CalcBaseAndBitshift+0x3c>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <DMA_CalcBaseAndBitshift+0x40>)
 800297a:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800297c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <DMA_CalcBaseAndBitshift+0x44>)
 8002980:	4413      	add	r3, r2
 8002982:	4a06      	ldr	r2, [pc, #24]	; (800299c <DMA_CalcBaseAndBitshift+0x3c>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <DMA_CalcBaseAndBitshift+0x48>)
 8002990:	63c3      	str	r3, [r0, #60]	; 0x3c
 8002992:	4770      	bx	lr
 8002994:	40020407 	.word	0x40020407
 8002998:	bffdfbf8 	.word	0xbffdfbf8
 800299c:	cccccccd 	.word	0xcccccccd
 80029a0:	40020400 	.word	0x40020400
 80029a4:	bffdfff8 	.word	0xbffdfff8
 80029a8:	40020000 	.word	0x40020000

080029ac <HAL_DMA_Init>:
  if(NULL == hdma)
 80029ac:	b320      	cbz	r0, 80029f8 <HAL_DMA_Init+0x4c>
{ 
 80029ae:	b510      	push	{r4, lr}
 80029b0:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80029b2:	2302      	movs	r3, #2
 80029b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80029b8:	6801      	ldr	r1, [r0, #0]
 80029ba:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029bc:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80029c0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80029c4:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c6:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 80029c8:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ca:	68e0      	ldr	r0, [r4, #12]
 80029cc:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ce:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d2:	6960      	ldr	r0, [r4, #20]
 80029d4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d6:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80029da:	69e0      	ldr	r0, [r4, #28]
 80029dc:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80029de:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80029e0:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80029e2:	4620      	mov	r0, r4
 80029e4:	f7ff ffbc 	bl	8002960 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e8:	2000      	movs	r0, #0
 80029ea:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80029f2:	f884 0020 	strb.w	r0, [r4, #32]
}  
 80029f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029f8:	2001      	movs	r0, #1
}  
 80029fa:	4770      	bx	lr

080029fc <HAL_DMA_Start_IT>:
{
 80029fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 80029fe:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002a02:	2c01      	cmp	r4, #1
 8002a04:	d032      	beq.n	8002a6c <HAL_DMA_Start_IT+0x70>
 8002a06:	2401      	movs	r4, #1
 8002a08:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a0c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8002a10:	2c01      	cmp	r4, #1
 8002a12:	d004      	beq.n	8002a1e <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8002a14:	2300      	movs	r3, #0
 8002a16:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8002a1a:	2002      	movs	r0, #2
} 
 8002a1c:	bd38      	pop	{r3, r4, r5, pc}
 8002a1e:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002a20:	2002      	movs	r0, #2
 8002a22:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a26:	2000      	movs	r0, #0
 8002a28:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a2a:	6825      	ldr	r5, [r4, #0]
 8002a2c:	6828      	ldr	r0, [r5, #0]
 8002a2e:	f020 0001 	bic.w	r0, r0, #1
 8002a32:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff ff7d 	bl	8002934 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8002a3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a3c:	b15b      	cbz	r3, 8002a56 <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a3e:	6822      	ldr	r2, [r4, #0]
 8002a40:	6813      	ldr	r3, [r2, #0]
 8002a42:	f043 030e 	orr.w	r3, r3, #14
 8002a46:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002a48:	6822      	ldr	r2, [r4, #0]
 8002a4a:	6813      	ldr	r3, [r2, #0]
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2000      	movs	r0, #0
 8002a54:	e7e2      	b.n	8002a1c <HAL_DMA_Start_IT+0x20>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	6813      	ldr	r3, [r2, #0]
 8002a5a:	f043 030a 	orr.w	r3, r3, #10
 8002a5e:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a60:	6822      	ldr	r2, [r4, #0]
 8002a62:	6813      	ldr	r3, [r2, #0]
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e7ed      	b.n	8002a48 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002a6c:	2002      	movs	r0, #2
 8002a6e:	e7d5      	b.n	8002a1c <HAL_DMA_Start_IT+0x20>

08002a70 <HAL_DMA_IRQHandler>:
{
 8002a70:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a72:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002a74:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002a76:	6804      	ldr	r4, [r0, #0]
 8002a78:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002a7a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	408b      	lsls	r3, r1
 8002a80:	4213      	tst	r3, r2
 8002a82:	d013      	beq.n	8002aac <HAL_DMA_IRQHandler+0x3c>
 8002a84:	f015 0f04 	tst.w	r5, #4
 8002a88:	d010      	beq.n	8002aac <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	f013 0f20 	tst.w	r3, #32
 8002a90:	d103      	bne.n	8002a9a <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	f023 0304 	bic.w	r3, r3, #4
 8002a98:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002a9a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002a9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	408b      	lsls	r3, r1
 8002aa2:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002aa4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002aa6:	b103      	cbz	r3, 8002aaa <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 8002aa8:	4798      	blx	r3
}  
 8002aaa:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002aac:	2302      	movs	r3, #2
 8002aae:	408b      	lsls	r3, r1
 8002ab0:	4213      	tst	r3, r2
 8002ab2:	d01a      	beq.n	8002aea <HAL_DMA_IRQHandler+0x7a>
 8002ab4:	f015 0f02 	tst.w	r5, #2
 8002ab8:	d017      	beq.n	8002aea <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	f013 0f20 	tst.w	r3, #32
 8002ac0:	d106      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	f023 030a 	bic.w	r3, r3, #10
 8002ac8:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002ad0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002ad2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	408b      	lsls	r3, r1
 8002ad8:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8002ada:	2300      	movs	r3, #0
 8002adc:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8002ae0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0e1      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8002ae6:	4798      	blx	r3
 8002ae8:	e7df      	b.n	8002aaa <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002aea:	2308      	movs	r3, #8
 8002aec:	fa03 f101 	lsl.w	r1, r3, r1
 8002af0:	4211      	tst	r1, r2
 8002af2:	d0da      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x3a>
 8002af4:	f015 0f08 	tst.w	r5, #8
 8002af8:	d0d7      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	f023 030e 	bic.w	r3, r3, #14
 8002b00:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b02:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002b04:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002b06:	2301      	movs	r3, #1
 8002b08:	fa03 f202 	lsl.w	r2, r3, r2
 8002b0c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b0e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002b10:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8002b14:	2300      	movs	r3, #0
 8002b16:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8002b1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0c4      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8002b20:	4798      	blx	r3
}  
 8002b22:	e7c2      	b.n	8002aaa <HAL_DMA_IRQHandler+0x3a>

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b4f0      	push	{r4, r5, r6, r7}
 8002b26:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8002b28:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b2a:	e036      	b.n	8002b9a <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b2c:	2406      	movs	r4, #6
 8002b2e:	e000      	b.n	8002b32 <HAL_GPIO_Init+0xe>
 8002b30:	2400      	movs	r4, #0
 8002b32:	40b4      	lsls	r4, r6
 8002b34:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b36:	3502      	adds	r5, #2
 8002b38:	4e61      	ldr	r6, [pc, #388]	; (8002cc0 <HAL_GPIO_Init+0x19c>)
 8002b3a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b3e:	4c61      	ldr	r4, [pc, #388]	; (8002cc4 <HAL_GPIO_Init+0x1a0>)
 8002b40:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002b42:	43d4      	mvns	r4, r2
 8002b44:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b48:	684f      	ldr	r7, [r1, #4]
 8002b4a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002b4e:	d001      	beq.n	8002b54 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002b50:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8002b54:	4d5b      	ldr	r5, [pc, #364]	; (8002cc4 <HAL_GPIO_Init+0x1a0>)
 8002b56:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8002b58:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002b5a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b5e:	684f      	ldr	r7, [r1, #4]
 8002b60:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002b64:	d001      	beq.n	8002b6a <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8002b66:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8002b6a:	4d56      	ldr	r5, [pc, #344]	; (8002cc4 <HAL_GPIO_Init+0x1a0>)
 8002b6c:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b6e:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8002b70:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b74:	684f      	ldr	r7, [r1, #4]
 8002b76:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002b7a:	d001      	beq.n	8002b80 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8002b7c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8002b80:	4d50      	ldr	r5, [pc, #320]	; (8002cc4 <HAL_GPIO_Init+0x1a0>)
 8002b82:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8002b84:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002b86:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b88:	684e      	ldr	r6, [r1, #4]
 8002b8a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002b8e:	d001      	beq.n	8002b94 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8002b90:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8002b94:	4a4b      	ldr	r2, [pc, #300]	; (8002cc4 <HAL_GPIO_Init+0x1a0>)
 8002b96:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8002b98:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9a:	680a      	ldr	r2, [r1, #0]
 8002b9c:	fa32 f403 	lsrs.w	r4, r2, r3
 8002ba0:	f000 808b 	beq.w	8002cba <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ba4:	2401      	movs	r4, #1
 8002ba6:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8002ba8:	4022      	ands	r2, r4
 8002baa:	d0f5      	beq.n	8002b98 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bac:	684d      	ldr	r5, [r1, #4]
 8002bae:	2d02      	cmp	r5, #2
 8002bb0:	d001      	beq.n	8002bb6 <HAL_GPIO_Init+0x92>
 8002bb2:	2d12      	cmp	r5, #18
 8002bb4:	d110      	bne.n	8002bd8 <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3u];
 8002bb6:	08de      	lsrs	r6, r3, #3
 8002bb8:	3608      	adds	r6, #8
 8002bba:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bbe:	f003 0507 	and.w	r5, r3, #7
 8002bc2:	00af      	lsls	r7, r5, #2
 8002bc4:	250f      	movs	r5, #15
 8002bc6:	40bd      	lsls	r5, r7
 8002bc8:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bcc:	690d      	ldr	r5, [r1, #16]
 8002bce:	40bd      	lsls	r5, r7
 8002bd0:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002bd4:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002bd8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bda:	005f      	lsls	r7, r3, #1
 8002bdc:	2503      	movs	r5, #3
 8002bde:	40bd      	lsls	r5, r7
 8002be0:	43ed      	mvns	r5, r5
 8002be2:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002be6:	684e      	ldr	r6, [r1, #4]
 8002be8:	f006 0603 	and.w	r6, r6, #3
 8002bec:	40be      	lsls	r6, r7
 8002bee:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8002bf2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bf4:	684e      	ldr	r6, [r1, #4]
 8002bf6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8002bfa:	f1bc 0f01 	cmp.w	ip, #1
 8002bfe:	d903      	bls.n	8002c08 <HAL_GPIO_Init+0xe4>
 8002c00:	2e11      	cmp	r6, #17
 8002c02:	d001      	beq.n	8002c08 <HAL_GPIO_Init+0xe4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c04:	2e12      	cmp	r6, #18
 8002c06:	d110      	bne.n	8002c2a <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR;
 8002c08:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c0a:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c0e:	68ce      	ldr	r6, [r1, #12]
 8002c10:	40be      	lsls	r6, r7
 8002c12:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8002c16:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002c18:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c1a:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c1e:	684e      	ldr	r6, [r1, #4]
 8002c20:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8002c24:	409e      	lsls	r6, r3
 8002c26:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8002c28:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8002c2a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c2c:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c2e:	688c      	ldr	r4, [r1, #8]
 8002c30:	40bc      	lsls	r4, r7
 8002c32:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002c34:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c36:	684c      	ldr	r4, [r1, #4]
 8002c38:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002c3c:	d0ac      	beq.n	8002b98 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3e:	4c22      	ldr	r4, [pc, #136]	; (8002cc8 <HAL_GPIO_Init+0x1a4>)
 8002c40:	69a5      	ldr	r5, [r4, #24]
 8002c42:	f045 0501 	orr.w	r5, r5, #1
 8002c46:	61a5      	str	r5, [r4, #24]
 8002c48:	69a4      	ldr	r4, [r4, #24]
 8002c4a:	f004 0401 	and.w	r4, r4, #1
 8002c4e:	9401      	str	r4, [sp, #4]
 8002c50:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c52:	089d      	lsrs	r5, r3, #2
 8002c54:	1cae      	adds	r6, r5, #2
 8002c56:	4c1a      	ldr	r4, [pc, #104]	; (8002cc0 <HAL_GPIO_Init+0x19c>)
 8002c58:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c5c:	f003 0403 	and.w	r4, r3, #3
 8002c60:	00a6      	lsls	r6, r4, #2
 8002c62:	240f      	movs	r4, #15
 8002c64:	40b4      	lsls	r4, r6
 8002c66:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c6a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002c6e:	f43f af5f 	beq.w	8002b30 <HAL_GPIO_Init+0xc>
 8002c72:	4c16      	ldr	r4, [pc, #88]	; (8002ccc <HAL_GPIO_Init+0x1a8>)
 8002c74:	42a0      	cmp	r0, r4
 8002c76:	d016      	beq.n	8002ca6 <HAL_GPIO_Init+0x182>
 8002c78:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c7c:	42a0      	cmp	r0, r4
 8002c7e:	d014      	beq.n	8002caa <HAL_GPIO_Init+0x186>
 8002c80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c84:	42a0      	cmp	r0, r4
 8002c86:	d012      	beq.n	8002cae <HAL_GPIO_Init+0x18a>
 8002c88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c8c:	42a0      	cmp	r0, r4
 8002c8e:	d010      	beq.n	8002cb2 <HAL_GPIO_Init+0x18e>
 8002c90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c94:	42a0      	cmp	r0, r4
 8002c96:	d00e      	beq.n	8002cb6 <HAL_GPIO_Init+0x192>
 8002c98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c9c:	42a0      	cmp	r0, r4
 8002c9e:	f43f af45 	beq.w	8002b2c <HAL_GPIO_Init+0x8>
 8002ca2:	2407      	movs	r4, #7
 8002ca4:	e745      	b.n	8002b32 <HAL_GPIO_Init+0xe>
 8002ca6:	2401      	movs	r4, #1
 8002ca8:	e743      	b.n	8002b32 <HAL_GPIO_Init+0xe>
 8002caa:	2402      	movs	r4, #2
 8002cac:	e741      	b.n	8002b32 <HAL_GPIO_Init+0xe>
 8002cae:	2403      	movs	r4, #3
 8002cb0:	e73f      	b.n	8002b32 <HAL_GPIO_Init+0xe>
 8002cb2:	2404      	movs	r4, #4
 8002cb4:	e73d      	b.n	8002b32 <HAL_GPIO_Init+0xe>
 8002cb6:	2405      	movs	r4, #5
 8002cb8:	e73b      	b.n	8002b32 <HAL_GPIO_Init+0xe>
  }
}
 8002cba:	b002      	add	sp, #8
 8002cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40010000 	.word	0x40010000
 8002cc4:	40010400 	.word	0x40010400
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	48000400 	.word	0x48000400

08002cd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd0:	b90a      	cbnz	r2, 8002cd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cd2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002cd4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cd6:	6181      	str	r1, [r0, #24]
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cdc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	4203      	tst	r3, r0
 8002ce4:	d100      	bne.n	8002ce8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002ce6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ce8:	4b02      	ldr	r3, [pc, #8]	; (8002cf4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002cea:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cec:	f7fe fa3a 	bl	8001164 <HAL_GPIO_EXTI_Callback>
}
 8002cf0:	e7f9      	b.n	8002ce6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002cf2:	bf00      	nop
 8002cf4:	40010400 	.word	0x40010400

08002cf8 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	f000 8319 	beq.w	8003330 <HAL_RCC_OscConfig+0x638>
{
 8002cfe:	b570      	push	{r4, r5, r6, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d04:	6803      	ldr	r3, [r0, #0]
 8002d06:	f013 0f01 	tst.w	r3, #1
 8002d0a:	d03d      	beq.n	8002d88 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d0c:	4bb4      	ldr	r3, [pc, #720]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d18:	4bb1      	ldr	r3, [pc, #708]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d24:	6863      	ldr	r3, [r4, #4]
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2a:	d06a      	beq.n	8002e02 <HAL_RCC_OscConfig+0x10a>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 808d 	bne.w	8002e4c <HAL_RCC_OscConfig+0x154>
 8002d32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d36:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e05f      	b.n	8002e0c <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d4c:	4ba4      	ldr	r3, [pc, #656]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d1e4      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d5e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d62:	4b9f      	ldr	r3, [pc, #636]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2201      	movs	r2, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	420b      	tst	r3, r1
 8002d7e:	d003      	beq.n	8002d88 <HAL_RCC_OscConfig+0x90>
 8002d80:	6863      	ldr	r3, [r4, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 82d6 	beq.w	8003334 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	f013 0f02 	tst.w	r3, #2
 8002d8e:	f000 80c1 	beq.w	8002f14 <HAL_RCC_OscConfig+0x21c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d92:	4b93      	ldr	r3, [pc, #588]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f013 0f0c 	tst.w	r3, #12
 8002d9a:	f000 8097 	beq.w	8002ecc <HAL_RCC_OscConfig+0x1d4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d9e:	4b90      	ldr	r3, [pc, #576]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	f000 8088 	beq.w	8002ebc <HAL_RCC_OscConfig+0x1c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dac:	68e3      	ldr	r3, [r4, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80ee 	beq.w	8002f90 <HAL_RCC_OscConfig+0x298>
 8002db4:	2201      	movs	r2, #1
 8002db6:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe fddb 	bl	8001984 <HAL_GetTick>
 8002dce:	4605      	mov	r5, r0
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	2302      	movs	r3, #2
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2201      	movs	r2, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	420b      	tst	r3, r1
 8002df0:	f040 80bf 	bne.w	8002f72 <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df4:	f7fe fdc6 	bl	8001984 <HAL_GetTick>
 8002df8:	1b40      	subs	r0, r0, r5
 8002dfa:	2802      	cmp	r0, #2
 8002dfc:	d9e8      	bls.n	8002dd0 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8002dfe:	2003      	movs	r0, #3
 8002e00:	e29f      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e02:	4a77      	ldr	r2, [pc, #476]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002e04:	6813      	ldr	r3, [r2, #0]
 8002e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e0c:	6863      	ldr	r3, [r4, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d036      	beq.n	8002e80 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 8002e12:	f7fe fdb7 	bl	8001984 <HAL_GetTick>
 8002e16:	4605      	mov	r5, r0
 8002e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e20:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	2201      	movs	r2, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	420b      	tst	r3, r1
 8002e3c:	d1a4      	bne.n	8002d88 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e3e:	f7fe fda1 	bl	8001984 <HAL_GetTick>
 8002e42:	1b40      	subs	r0, r0, r5
 8002e44:	2864      	cmp	r0, #100	; 0x64
 8002e46:	d9e7      	bls.n	8002e18 <HAL_RCC_OscConfig+0x120>
            return HAL_TIMEOUT;
 8002e48:	2003      	movs	r0, #3
 8002e4a:	e27a      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_OscConfig+0x16e>
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e7d2      	b.n	8002e0c <HAL_RCC_OscConfig+0x114>
 8002e66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e6a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e7c5      	b.n	8002e0c <HAL_RCC_OscConfig+0x114>
        tickstart = HAL_GetTick();
 8002e80:	f7fe fd80 	bl	8001984 <HAL_GetTick>
 8002e84:	4605      	mov	r5, r0
 8002e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e8a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8e:	4b54      	ldr	r3, [pc, #336]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	420b      	tst	r3, r1
 8002eaa:	f43f af6d 	beq.w	8002d88 <HAL_RCC_OscConfig+0x90>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eae:	f7fe fd69 	bl	8001984 <HAL_GetTick>
 8002eb2:	1b40      	subs	r0, r0, r5
 8002eb4:	2864      	cmp	r0, #100	; 0x64
 8002eb6:	d9e6      	bls.n	8002e86 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002eb8:	2003      	movs	r0, #3
 8002eba:	e242      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ebc:	4b48      	ldr	r3, [pc, #288]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec8:	f47f af70 	bne.w	8002dac <HAL_RCC_OscConfig+0xb4>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	420b      	tst	r3, r1
 8002eec:	d004      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x200>
 8002eee:	68e3      	ldr	r3, [r4, #12]
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x200>
        return HAL_ERROR;
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	e224      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4839      	ldr	r0, [pc, #228]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002efa:	6803      	ldr	r3, [r0, #0]
 8002efc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f00:	6921      	ldr	r1, [r4, #16]
 8002f02:	22f8      	movs	r2, #248	; 0xf8
 8002f04:	fa92 f2a2 	rbit	r2, r2
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f10:	4313      	orrs	r3, r2
 8002f12:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	f013 0f08 	tst.w	r3, #8
 8002f1a:	f000 808d 	beq.w	8003038 <HAL_RCC_OscConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f1e:	6963      	ldr	r3, [r4, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d061      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x2f0>
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	fab2 f282 	clz	r2, r2
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <HAL_RCC_OscConfig+0x2ec>)
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe fd25 	bl	8001984 <HAL_GetTick>
 8002f3a:	4605      	mov	r5, r0
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	fa93 f2a3 	rbit	r2, r3
 8002f42:	fa93 f2a3 	rbit	r2, r3
 8002f46:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002f4c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	420b      	tst	r3, r1
 8002f62:	d169      	bne.n	8003038 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fe fd0e 	bl	8001984 <HAL_GetTick>
 8002f68:	1b40      	subs	r0, r0, r5
 8002f6a:	2802      	cmp	r0, #2
 8002f6c:	d9e6      	bls.n	8002f3c <HAL_RCC_OscConfig+0x244>
        {
          return HAL_TIMEOUT;
 8002f6e:	2003      	movs	r0, #3
 8002f70:	e1e7      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f72:	481b      	ldr	r0, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002f74:	6803      	ldr	r3, [r0, #0]
 8002f76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f7a:	6921      	ldr	r1, [r4, #16]
 8002f7c:	22f8      	movs	r2, #248	; 0xf8
 8002f7e:	fa92 f2a2 	rbit	r2, r2
 8002f82:	fab2 f282 	clz	r2, r2
 8002f86:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	6003      	str	r3, [r0, #0]
 8002f8e:	e7c1      	b.n	8002f14 <HAL_RCC_OscConfig+0x21c>
 8002f90:	2301      	movs	r3, #1
 8002f92:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fcec 	bl	8001984 <HAL_GetTick>
 8002fac:	4605      	mov	r5, r0
 8002fae:	2302      	movs	r3, #2
 8002fb0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_RCC_OscConfig+0x2e8>)
 8002fb6:	6819      	ldr	r1, [r3, #0]
 8002fb8:	2302      	movs	r3, #2
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	420b      	tst	r3, r1
 8002fce:	d0a1      	beq.n	8002f14 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fcd8 	bl	8001984 <HAL_GetTick>
 8002fd4:	1b40      	subs	r0, r0, r5
 8002fd6:	2802      	cmp	r0, #2
 8002fd8:	d9e9      	bls.n	8002fae <HAL_RCC_OscConfig+0x2b6>
            return HAL_TIMEOUT;
 8002fda:	2003      	movs	r0, #3
 8002fdc:	e1b1      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	10908120 	.word	0x10908120
 8002fe8:	2201      	movs	r2, #1
 8002fea:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fee:	fab2 f282 	clz	r2, r2
 8002ff2:	4bbf      	ldr	r3, [pc, #764]	; (80032f0 <HAL_RCC_OscConfig+0x5f8>)
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffc:	f7fe fcc2 	bl	8001984 <HAL_GetTick>
 8003000:	4605      	mov	r5, r0
 8003002:	2302      	movs	r3, #2
 8003004:	fa93 f2a3 	rbit	r2, r3
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003010:	4ab8      	ldr	r2, [pc, #736]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 8003012:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2201      	movs	r2, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	420b      	tst	r3, r1
 8003028:	d006      	beq.n	8003038 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302a:	f7fe fcab 	bl	8001984 <HAL_GetTick>
 800302e:	1b40      	subs	r0, r0, r5
 8003030:	2802      	cmp	r0, #2
 8003032:	d9e6      	bls.n	8003002 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003034:	2003      	movs	r0, #3
 8003036:	e184      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	f013 0f04 	tst.w	r3, #4
 800303e:	f000 80b3 	beq.w	80031a8 <HAL_RCC_OscConfig+0x4b0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003042:	4bac      	ldr	r3, [pc, #688]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800304a:	d120      	bne.n	800308e <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304c:	4ba9      	ldr	r3, [pc, #676]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003054:	61da      	str	r2, [r3, #28]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003060:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003062:	4ba5      	ldr	r3, [pc, #660]	; (80032f8 <HAL_RCC_OscConfig+0x600>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f413 7f80 	tst.w	r3, #256	; 0x100
 800306a:	d012      	beq.n	8003092 <HAL_RCC_OscConfig+0x39a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306c:	68a3      	ldr	r3, [r4, #8]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d023      	beq.n	80030ba <HAL_RCC_OscConfig+0x3c2>
 8003072:	bb73      	cbnz	r3, 80030d2 <HAL_RCC_OscConfig+0x3da>
 8003074:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003078:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800307c:	6a1a      	ldr	r2, [r3, #32]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	621a      	str	r2, [r3, #32]
 8003084:	6a1a      	ldr	r2, [r3, #32]
 8003086:	f022 0204 	bic.w	r2, r2, #4
 800308a:	621a      	str	r2, [r3, #32]
 800308c:	e01a      	b.n	80030c4 <HAL_RCC_OscConfig+0x3cc>
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2500      	movs	r5, #0
 8003090:	e7e7      	b.n	8003062 <HAL_RCC_OscConfig+0x36a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003092:	4a99      	ldr	r2, [pc, #612]	; (80032f8 <HAL_RCC_OscConfig+0x600>)
 8003094:	6813      	ldr	r3, [r2, #0]
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800309c:	f7fe fc72 	bl	8001984 <HAL_GetTick>
 80030a0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	4b95      	ldr	r3, [pc, #596]	; (80032f8 <HAL_RCC_OscConfig+0x600>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80030aa:	d1df      	bne.n	800306c <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ac:	f7fe fc6a 	bl	8001984 <HAL_GetTick>
 80030b0:	1b80      	subs	r0, r0, r6
 80030b2:	2864      	cmp	r0, #100	; 0x64
 80030b4:	d9f5      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 80030b6:	2003      	movs	r0, #3
 80030b8:	e143      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ba:	4a8e      	ldr	r2, [pc, #568]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 80030bc:	6a13      	ldr	r3, [r2, #32]
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c4:	68a3      	ldr	r3, [r4, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d041      	beq.n	800314e <HAL_RCC_OscConfig+0x456>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fc5b 	bl	8001984 <HAL_GetTick>
 80030ce:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	e02b      	b.n	800312a <HAL_RCC_OscConfig+0x432>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d2:	2b05      	cmp	r3, #5
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_OscConfig+0x3f2>
 80030d6:	4b87      	ldr	r3, [pc, #540]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 80030d8:	6a1a      	ldr	r2, [r3, #32]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	621a      	str	r2, [r3, #32]
 80030e0:	6a1a      	ldr	r2, [r3, #32]
 80030e2:	f022 0204 	bic.w	r2, r2, #4
 80030e6:	621a      	str	r2, [r3, #32]
 80030e8:	e7ec      	b.n	80030c4 <HAL_RCC_OscConfig+0x3cc>
 80030ea:	4b82      	ldr	r3, [pc, #520]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	f042 0204 	orr.w	r2, r2, #4
 80030f2:	621a      	str	r2, [r3, #32]
 80030f4:	6a1a      	ldr	r2, [r3, #32]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	621a      	str	r2, [r3, #32]
 80030fc:	e7e2      	b.n	80030c4 <HAL_RCC_OscConfig+0x3cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fe:	4b7d      	ldr	r3, [pc, #500]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 8003100:	6a19      	ldr	r1, [r3, #32]
 8003102:	2302      	movs	r3, #2
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	2201      	movs	r2, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	4219      	tst	r1, r3
 8003118:	d145      	bne.n	80031a6 <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7fe fc33 	bl	8001984 <HAL_GetTick>
 800311e:	1b80      	subs	r0, r0, r6
 8003120:	f241 3388 	movw	r3, #5000	; 0x1388
 8003124:	4298      	cmp	r0, r3
 8003126:	f200 8107 	bhi.w	8003338 <HAL_RCC_OscConfig+0x640>
 800312a:	2302      	movs	r3, #2
 800312c:	fa93 f2a3 	rbit	r2, r3
 8003130:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	2b02      	cmp	r3, #2
 8003140:	d0dd      	beq.n	80030fe <HAL_RCC_OscConfig+0x406>
 8003142:	2302      	movs	r3, #2
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 800314a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800314c:	e7d9      	b.n	8003102 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314e:	f7fe fc19 	bl	8001984 <HAL_GetTick>
 8003152:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x48a>
 8003156:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 8003158:	6a19      	ldr	r1, [r3, #32]
 800315a:	2302      	movs	r3, #2
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	2201      	movs	r2, #1
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	4219      	tst	r1, r3
 8003170:	d019      	beq.n	80031a6 <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fe fc07 	bl	8001984 <HAL_GetTick>
 8003176:	1b80      	subs	r0, r0, r6
 8003178:	f241 3388 	movw	r3, #5000	; 0x1388
 800317c:	4298      	cmp	r0, r3
 800317e:	f200 80dd 	bhi.w	800333c <HAL_RCC_OscConfig+0x644>
 8003182:	2302      	movs	r3, #2
 8003184:	fa93 f2a3 	rbit	r2, r3
 8003188:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	2b02      	cmp	r3, #2
 8003198:	d0dd      	beq.n	8003156 <HAL_RCC_OscConfig+0x45e>
 800319a:	2302      	movs	r3, #2
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	4b54      	ldr	r3, [pc, #336]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 80031a2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031a4:	e7d9      	b.n	800315a <HAL_RCC_OscConfig+0x462>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031a6:	bbb5      	cbnz	r5, 8003216 <HAL_RCC_OscConfig+0x51e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a8:	69a3      	ldr	r3, [r4, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80c8 	beq.w	8003340 <HAL_RCC_OscConfig+0x648>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b0:	4a50      	ldr	r2, [pc, #320]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 80031b2:	6852      	ldr	r2, [r2, #4]
 80031b4:	f002 020c 	and.w	r2, r2, #12
 80031b8:	2a08      	cmp	r2, #8
 80031ba:	f000 809f 	beq.w	80032fc <HAL_RCC_OscConfig+0x604>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d02f      	beq.n	8003222 <HAL_RCC_OscConfig+0x52a>
 80031c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c6:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ca:	fab3 f383 	clz	r3, r3
 80031ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fbd2 	bl	8001984 <HAL_GetTick>
 80031e0:	4604      	mov	r4, r0
 80031e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ea:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 80031ec:	6819      	ldr	r1, [r3, #0]
 80031ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2201      	movs	r2, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	4219      	tst	r1, r3
 8003206:	d071      	beq.n	80032ec <HAL_RCC_OscConfig+0x5f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe fbbc 	bl	8001984 <HAL_GetTick>
 800320c:	1b00      	subs	r0, r0, r4
 800320e:	2802      	cmp	r0, #2
 8003210:	d9e7      	bls.n	80031e2 <HAL_RCC_OscConfig+0x4ea>
          {
            return HAL_TIMEOUT;
 8003212:	2003      	movs	r0, #3
 8003214:	e095      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003216:	4a37      	ldr	r2, [pc, #220]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 8003218:	69d3      	ldr	r3, [r2, #28]
 800321a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321e:	61d3      	str	r3, [r2, #28]
 8003220:	e7c2      	b.n	80031a8 <HAL_RCC_OscConfig+0x4b0>
 8003222:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003226:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003232:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800323c:	f7fe fba2 	bl	8001984 <HAL_GetTick>
 8003240:	4605      	mov	r5, r0
 8003242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003246:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324a:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 800324c:	6819      	ldr	r1, [r3, #0]
 800324e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2201      	movs	r2, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	4219      	tst	r1, r3
 8003266:	d006      	beq.n	8003276 <HAL_RCC_OscConfig+0x57e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fb8c 	bl	8001984 <HAL_GetTick>
 800326c:	1b40      	subs	r0, r0, r5
 800326e:	2802      	cmp	r0, #2
 8003270:	d9e7      	bls.n	8003242 <HAL_RCC_OscConfig+0x54a>
            return HAL_TIMEOUT;
 8003272:	2003      	movs	r0, #3
 8003274:	e065      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003276:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 8003278:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800327a:	f023 030f 	bic.w	r3, r3, #15
 800327e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003280:	430b      	orrs	r3, r1
 8003282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003284:	6853      	ldr	r3, [r2, #4]
 8003286:	f423 1376 	bic.w	r3, r3, #4030464	; 0x3d8000
 800328a:	6a21      	ldr	r1, [r4, #32]
 800328c:	69e0      	ldr	r0, [r4, #28]
 800328e:	4301      	orrs	r1, r0
 8003290:	430b      	orrs	r3, r1
 8003292:	6053      	str	r3, [r2, #4]
 8003294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003298:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80032ae:	f7fe fb69 	bl	8001984 <HAL_GetTick>
 80032b2:	4604      	mov	r4, r0
 80032b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032b8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032bc:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <HAL_RCC_OscConfig+0x5fc>)
 80032be:	6819      	ldr	r1, [r3, #0]
 80032c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	2201      	movs	r2, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	4219      	tst	r1, r3
 80032d8:	d106      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5f0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032da:	f7fe fb53 	bl	8001984 <HAL_GetTick>
 80032de:	1b00      	subs	r0, r0, r4
 80032e0:	2802      	cmp	r0, #2
 80032e2:	d9e7      	bls.n	80032b4 <HAL_RCC_OscConfig+0x5bc>
            return HAL_TIMEOUT;
 80032e4:	2003      	movs	r0, #3
 80032e6:	e02c      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
        }
      }
    }
  }

  return HAL_OK;
 80032e8:	2000      	movs	r0, #0
 80032ea:	e02a      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
 80032ec:	2000      	movs	r0, #0
 80032ee:	e028      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
 80032f0:	10908120 	.word	0x10908120
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d022      	beq.n	8003346 <HAL_RCC_OscConfig+0x64e>
        pll_config = RCC->CFGR;
 8003300:	4a13      	ldr	r2, [pc, #76]	; (8003350 <HAL_RCC_OscConfig+0x658>)
 8003302:	6853      	ldr	r3, [r2, #4]
        pll_config2 = RCC->CFGR2;
 8003304:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003306:	f403 31c0 	and.w	r1, r3, #98304	; 0x18000
 800330a:	69e2      	ldr	r2, [r4, #28]
 800330c:	4291      	cmp	r1, r2
 800330e:	d001      	beq.n	8003314 <HAL_RCC_OscConfig+0x61c>
          return HAL_ERROR;
 8003310:	2001      	movs	r0, #1
 8003312:	e016      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003314:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003318:	6a22      	ldr	r2, [r4, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800331a:	4293      	cmp	r3, r2
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x62a>
          return HAL_ERROR;
 800331e:	2001      	movs	r0, #1
 8003320:	e00f      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003322:	f000 000f 	and.w	r0, r0, #15
 8003326:	6a63      	ldr	r3, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003328:	4298      	cmp	r0, r3
 800332a:	d00e      	beq.n	800334a <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 800332c:	2001      	movs	r0, #1
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
    return HAL_ERROR;
 8003330:	2001      	movs	r0, #1
}
 8003332:	4770      	bx	lr
        return HAL_ERROR;
 8003334:	2001      	movs	r0, #1
 8003336:	e004      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
          return HAL_TIMEOUT;
 8003338:	2003      	movs	r0, #3
 800333a:	e002      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
          return HAL_TIMEOUT;
 800333c:	2003      	movs	r0, #3
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
  return HAL_OK;
 8003340:	2000      	movs	r0, #0
}
 8003342:	b002      	add	sp, #8
 8003344:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003346:	2001      	movs	r0, #1
 8003348:	e7fb      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
  return HAL_OK;
 800334a:	2000      	movs	r0, #0
 800334c:	e7f9      	b.n	8003342 <HAL_RCC_OscConfig+0x64a>
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000

08003354 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x60>)
 8003356:	6859      	ldr	r1, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003358:	f001 030c 	and.w	r3, r1, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d126      	bne.n	80033ae <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003360:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8003364:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	fab3 f383 	clz	r3, r3
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	4a10      	ldr	r2, [pc, #64]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x64>)
 8003376:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x60>)
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	220f      	movs	r2, #15
 8003382:	fa92 f2a2 	rbit	r2, r2
 8003386:	fab2 f282 	clz	r2, r2
 800338a:	40d3      	lsrs	r3, r2
 800338c:	4a0b      	ldr	r2, [pc, #44]	; (80033bc <HAL_RCC_GetSysClockFreq+0x68>)
 800338e:	5cd2      	ldrb	r2, [r2, r3]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003390:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8003394:	d105      	bne.n	80033a2 <HAL_RCC_GetSysClockFreq+0x4e>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003398:	fbb3 f3f2 	udiv	r3, r3, r2
 800339c:	fb00 f003 	mul.w	r0, r0, r3
 80033a0:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80033a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80033a8:	fb00 f003 	mul.w	r0, r0, r3
 80033ac:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80033ae:	4804      	ldr	r0, [pc, #16]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	0800483c 	.word	0x0800483c
 80033bc:	0800484c 	.word	0x0800484c
 80033c0:	007a1200 	.word	0x007a1200

080033c4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80033c4:	2800      	cmp	r0, #0
 80033c6:	f000 80c1 	beq.w	800354c <HAL_RCC_ClockConfig+0x188>
{
 80033ca:	b570      	push	{r4, r5, r6, lr}
 80033cc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ce:	4b61      	ldr	r3, [pc, #388]	; (8003554 <HAL_RCC_ClockConfig+0x190>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	428b      	cmp	r3, r1
 80033d8:	d20c      	bcs.n	80033f4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4a5e      	ldr	r2, [pc, #376]	; (8003554 <HAL_RCC_ClockConfig+0x190>)
 80033dc:	6813      	ldr	r3, [r2, #0]
 80033de:	f023 0307 	bic.w	r3, r3, #7
 80033e2:	430b      	orrs	r3, r1
 80033e4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	428b      	cmp	r3, r1
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80033f0:	2001      	movs	r0, #1
}
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	f013 0f02 	tst.w	r3, #2
 80033fa:	d006      	beq.n	800340a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4a56      	ldr	r2, [pc, #344]	; (8003558 <HAL_RCC_ClockConfig+0x194>)
 80033fe:	6853      	ldr	r3, [r2, #4]
 8003400:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003404:	68a0      	ldr	r0, [r4, #8]
 8003406:	4303      	orrs	r3, r0
 8003408:	6053      	str	r3, [r2, #4]
 800340a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	f013 0f01 	tst.w	r3, #1
 8003412:	d05a      	beq.n	80034ca <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003414:	6863      	ldr	r3, [r4, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d02d      	beq.n	8003476 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341a:	2b02      	cmp	r3, #2
 800341c:	d040      	beq.n	80034a0 <HAL_RCC_ClockConfig+0xdc>
 800341e:	2202      	movs	r2, #2
 8003420:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	4a4c      	ldr	r2, [pc, #304]	; (8003558 <HAL_RCC_ClockConfig+0x194>)
 8003426:	6810      	ldr	r0, [r2, #0]
 8003428:	2202      	movs	r2, #2
 800342a:	fa92 f2a2 	rbit	r2, r2
 800342e:	fab2 f282 	clz	r2, r2
 8003432:	f002 021f 	and.w	r2, r2, #31
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	4210      	tst	r0, r2
 800343e:	f000 8087 	beq.w	8003550 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003442:	4945      	ldr	r1, [pc, #276]	; (8003558 <HAL_RCC_ClockConfig+0x194>)
 8003444:	684a      	ldr	r2, [r1, #4]
 8003446:	f022 0203 	bic.w	r2, r2, #3
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800344e:	f7fe fa99 	bl	8001984 <HAL_GetTick>
 8003452:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003454:	4b40      	ldr	r3, [pc, #256]	; (8003558 <HAL_RCC_ClockConfig+0x194>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	6862      	ldr	r2, [r4, #4]
 800345e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003462:	d032      	beq.n	80034ca <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fe fa8e 	bl	8001984 <HAL_GetTick>
 8003468:	1b80      	subs	r0, r0, r6
 800346a:	f241 3388 	movw	r3, #5000	; 0x1388
 800346e:	4298      	cmp	r0, r3
 8003470:	d9f0      	bls.n	8003454 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8003472:	2003      	movs	r0, #3
 8003474:	e7bd      	b.n	80033f2 <HAL_RCC_ClockConfig+0x2e>
 8003476:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800347a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4a36      	ldr	r2, [pc, #216]	; (8003558 <HAL_RCC_ClockConfig+0x194>)
 8003480:	6810      	ldr	r0, [r2, #0]
 8003482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003486:	fa92 f2a2 	rbit	r2, r2
 800348a:	fab2 f282 	clz	r2, r2
 800348e:	f002 021f 	and.w	r2, r2, #31
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f202 	lsl.w	r2, r1, r2
 8003498:	4202      	tst	r2, r0
 800349a:	d1d2      	bne.n	8003442 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 800349c:	2001      	movs	r0, #1
 800349e:	e7a8      	b.n	80033f2 <HAL_RCC_ClockConfig+0x2e>
 80034a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a4:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a8:	4a2b      	ldr	r2, [pc, #172]	; (8003558 <HAL_RCC_ClockConfig+0x194>)
 80034aa:	6810      	ldr	r0, [r2, #0]
 80034ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034b0:	fa92 f2a2 	rbit	r2, r2
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	f002 021f 	and.w	r2, r2, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f202 	lsl.w	r2, r1, r2
 80034c2:	4210      	tst	r0, r2
 80034c4:	d1bd      	bne.n	8003442 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 80034c6:	2001      	movs	r0, #1
 80034c8:	e793      	b.n	80033f2 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_RCC_ClockConfig+0x190>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	42ab      	cmp	r3, r5
 80034d4:	d90c      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <HAL_RCC_ClockConfig+0x190>)
 80034d8:	6813      	ldr	r3, [r2, #0]
 80034da:	f023 0307 	bic.w	r3, r3, #7
 80034de:	432b      	orrs	r3, r5
 80034e0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	6813      	ldr	r3, [r2, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	42ab      	cmp	r3, r5
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 80034ec:	2001      	movs	r0, #1
 80034ee:	e780      	b.n	80033f2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	f013 0f04 	tst.w	r3, #4
 80034f6:	d006      	beq.n	8003506 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4a17      	ldr	r2, [pc, #92]	; (8003558 <HAL_RCC_ClockConfig+0x194>)
 80034fa:	6853      	ldr	r3, [r2, #4]
 80034fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003500:	68e1      	ldr	r1, [r4, #12]
 8003502:	430b      	orrs	r3, r1
 8003504:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	f013 0f08 	tst.w	r3, #8
 800350c:	d007      	beq.n	800351e <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350e:	4a12      	ldr	r2, [pc, #72]	; (8003558 <HAL_RCC_ClockConfig+0x194>)
 8003510:	6853      	ldr	r3, [r2, #4]
 8003512:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003516:	6921      	ldr	r1, [r4, #16]
 8003518:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800351c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800351e:	f7ff ff19 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <HAL_RCC_ClockConfig+0x194>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800352a:	22f0      	movs	r2, #240	; 0xf0
 800352c:	fa92 f2a2 	rbit	r2, r2
 8003530:	fab2 f282 	clz	r2, r2
 8003534:	40d3      	lsrs	r3, r2
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_RCC_ClockConfig+0x198>)
 8003538:	5cd3      	ldrb	r3, [r2, r3]
 800353a:	40d8      	lsrs	r0, r3
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_RCC_ClockConfig+0x19c>)
 800353e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_RCC_ClockConfig+0x1a0>)
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	f7fe f9da 	bl	80018fc <HAL_InitTick>
  return HAL_OK;
 8003548:	2000      	movs	r0, #0
 800354a:	e752      	b.n	80033f2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800354c:	2001      	movs	r0, #1
}
 800354e:	4770      	bx	lr
        return HAL_ERROR;
 8003550:	2001      	movs	r0, #1
 8003552:	e74e      	b.n	80033f2 <HAL_RCC_ClockConfig+0x2e>
 8003554:	40022000 	.word	0x40022000
 8003558:	40021000 	.word	0x40021000
 800355c:	08004824 	.word	0x08004824
 8003560:	20000004 	.word	0x20000004
 8003564:	2000000c 	.word	0x2000000c

08003568 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003568:	4b01      	ldr	r3, [pc, #4]	; (8003570 <HAL_RCC_GetHCLKFreq+0x8>)
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000004 	.word	0x20000004

08003574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003574:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003576:	f7ff fff7 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003582:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003586:	fa92 f2a2 	rbit	r2, r2
 800358a:	fab2 f282 	clz	r2, r2
 800358e:	40d3      	lsrs	r3, r2
 8003590:	4a02      	ldr	r2, [pc, #8]	; (800359c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003592:	5cd3      	ldrb	r3, [r2, r3]
}    
 8003594:	40d8      	lsrs	r0, r3
 8003596:	bd08      	pop	{r3, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	08004834 	.word	0x08004834

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035a2:	f7ff ffe1 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80035ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80035b2:	fa92 f2a2 	rbit	r2, r2
 80035b6:	fab2 f282 	clz	r2, r2
 80035ba:	40d3      	lsrs	r3, r2
 80035bc:	4a02      	ldr	r2, [pc, #8]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
} 
 80035c0:	40d8      	lsrs	r0, r3
 80035c2:	bd08      	pop	{r3, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08004834 	.word	0x08004834

080035cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ce:	b083      	sub	sp, #12
 80035d0:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035d2:	6803      	ldr	r3, [r0, #0]
 80035d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80035d8:	d048      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035da:	4ba1      	ldr	r3, [pc, #644]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80035e2:	f040 8122 	bne.w	800382a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	4b9e      	ldr	r3, [pc, #632]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035ee:	61da      	str	r2, [r3, #28]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80035fa:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	4b99      	ldr	r3, [pc, #612]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003604:	f000 8113 	beq.w	800382e <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003608:	4b95      	ldr	r3, [pc, #596]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800360a:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800360c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003610:	d022      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8003612:	6862      	ldr	r2, [r4, #4]
 8003614:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003618:	429a      	cmp	r2, r3
 800361a:	d01d      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800361c:	4890      	ldr	r0, [pc, #576]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800361e:	6a01      	ldr	r1, [r0, #32]
 8003620:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8003624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003628:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362c:	fab2 f282 	clz	r2, r2
 8003630:	4f8d      	ldr	r7, [pc, #564]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003632:	443a      	add	r2, r7
 8003634:	0092      	lsls	r2, r2, #2
 8003636:	f04f 0c01 	mov.w	ip, #1
 800363a:	f8c2 c000 	str.w	ip, [r2]
 800363e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	443b      	add	r3, r7
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800364e:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003650:	f011 0f01 	tst.w	r1, #1
 8003654:	f040 8100 	bne.w	8003858 <HAL_RCCEx_PeriphCLKConfig+0x28c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003658:	4a81      	ldr	r2, [pc, #516]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800365a:	6a13      	ldr	r3, [r2, #32]
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	6861      	ldr	r1, [r4, #4]
 8003662:	430b      	orrs	r3, r1
 8003664:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003666:	2d00      	cmp	r5, #0
 8003668:	f040 8128 	bne.w	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	f013 0f01 	tst.w	r3, #1
 8003672:	d006      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003674:	4a7a      	ldr	r2, [pc, #488]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003676:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003678:	f023 0303 	bic.w	r3, r3, #3
 800367c:	68a1      	ldr	r1, [r4, #8]
 800367e:	430b      	orrs	r3, r1
 8003680:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	f013 0f02 	tst.w	r3, #2
 8003688:	d006      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800368a:	4a75      	ldr	r2, [pc, #468]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800368c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800368e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003692:	68e1      	ldr	r1, [r4, #12]
 8003694:	430b      	orrs	r3, r1
 8003696:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	f013 0f04 	tst.w	r3, #4
 800369e:	d006      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036a0:	4a6f      	ldr	r2, [pc, #444]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80036a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80036a4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80036a8:	6921      	ldr	r1, [r4, #16]
 80036aa:	430b      	orrs	r3, r1
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	f013 0f20 	tst.w	r3, #32
 80036b4:	d006      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036b6:	4a6a      	ldr	r2, [pc, #424]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80036b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80036ba:	f023 0310 	bic.w	r3, r3, #16
 80036be:	69e1      	ldr	r1, [r4, #28]
 80036c0:	430b      	orrs	r3, r1
 80036c2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80036ca:	d006      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80036cc:	4a64      	ldr	r2, [pc, #400]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80036ce:	6853      	ldr	r3, [r2, #4]
 80036d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80036d6:	430b      	orrs	r3, r1
 80036d8:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036e0:	d006      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036e2:	4a5f      	ldr	r2, [pc, #380]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80036e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80036e6:	f023 0320 	bic.w	r3, r3, #32
 80036ea:	6a21      	ldr	r1, [r4, #32]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80036f6:	d006      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036f8:	4a59      	ldr	r2, [pc, #356]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80036fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80036fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003700:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003702:	430b      	orrs	r3, r1
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	f013 0f08 	tst.w	r3, #8
 800370c:	d006      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800370e:	4a54      	ldr	r2, [pc, #336]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003710:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003712:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003716:	6961      	ldr	r1, [r4, #20]
 8003718:	430b      	orrs	r3, r1
 800371a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	f013 0f10 	tst.w	r3, #16
 8003722:	d006      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003724:	4a4e      	ldr	r2, [pc, #312]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003726:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003728:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800372c:	69a1      	ldr	r1, [r4, #24]
 800372e:	430b      	orrs	r3, r1
 8003730:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003738:	d006      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800373a:	4a49      	ldr	r2, [pc, #292]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800373c:	6853      	ldr	r3, [r2, #4]
 800373e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003742:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003744:	430b      	orrs	r3, r1
 8003746:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800374e:	d006      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003750:	4a43      	ldr	r2, [pc, #268]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003752:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003754:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8003758:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800375a:	430b      	orrs	r3, r1
 800375c:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003764:	d006      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003766:	4a3e      	ldr	r2, [pc, #248]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003768:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800376a:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800376e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003770:	430b      	orrs	r3, r1
 8003772:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800377a:	d006      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800377c:	4a38      	ldr	r2, [pc, #224]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800377e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003786:	430b      	orrs	r3, r1
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003790:	d006      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003792:	4a33      	ldr	r2, [pc, #204]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003794:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003796:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800379a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800379c:	430b      	orrs	r3, r1
 800379e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80037a6:	d006      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80037a8:	4a2d      	ldr	r2, [pc, #180]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80037aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80037ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80037b2:	430b      	orrs	r3, r1
 80037b4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80037bc:	d006      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80037be:	4a28      	ldr	r2, [pc, #160]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80037c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80037c2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80037c6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80037d2:	d006      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80037d4:	4a22      	ldr	r2, [pc, #136]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80037d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80037d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80037de:	430b      	orrs	r3, r1
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80037e8:	d006      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80037ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80037ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037f2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80037f4:	430b      	orrs	r3, r1
 80037f6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80037fe:	d006      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003800:	4a17      	ldr	r2, [pc, #92]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003802:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003804:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003808:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800380a:	430b      	orrs	r3, r1
 800380c:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003814:	d059      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003818:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800381a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800381e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003820:	430b      	orrs	r3, r1
 8003822:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003824:	2000      	movs	r0, #0
}
 8003826:	b003      	add	sp, #12
 8003828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 800382a:	2500      	movs	r5, #0
 800382c:	e6e6      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382e:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003836:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003838:	f7fe f8a4 	bl	8001984 <HAL_GetTick>
 800383c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003846:	f47f aedf 	bne.w	8003608 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384a:	f7fe f89b 	bl	8001984 <HAL_GetTick>
 800384e:	1b80      	subs	r0, r0, r6
 8003850:	2864      	cmp	r0, #100	; 0x64
 8003852:	d9f4      	bls.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x272>
          return HAL_TIMEOUT;
 8003854:	2003      	movs	r0, #3
 8003856:	e7e6      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        tickstart = HAL_GetTick();
 8003858:	f7fe f894 	bl	8001984 <HAL_GetTick>
 800385c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	e01b      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003860:	40021000 	.word	0x40021000
 8003864:	40007000 	.word	0x40007000
 8003868:	10908100 	.word	0x10908100
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800386e:	6a19      	ldr	r1, [r3, #32]
 8003870:	2302      	movs	r3, #2
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2201      	movs	r2, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	420b      	tst	r3, r1
 8003886:	f47f aee7 	bne.w	8003658 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fe f87b 	bl	8001984 <HAL_GetTick>
 800388e:	1b80      	subs	r0, r0, r6
 8003890:	f241 3388 	movw	r3, #5000	; 0x1388
 8003894:	4298      	cmp	r0, r3
 8003896:	d816      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8003898:	2302      	movs	r3, #2
 800389a:	fa93 f2a3 	rbit	r2, r3
 800389e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d0dd      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 80038b0:	2302      	movs	r3, #2
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038ba:	e7d9      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80038bc:	69d3      	ldr	r3, [r2, #28]
 80038be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c2:	61d3      	str	r3, [r2, #28]
 80038c4:	e6d2      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 80038c6:	2003      	movs	r0, #3
 80038c8:	e7ad      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  return HAL_OK;
 80038ca:	2000      	movs	r0, #0
 80038cc:	e7ab      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000

080038d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d6:	6a03      	ldr	r3, [r0, #32]
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038e2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038e8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038ec:	680d      	ldr	r5, [r1, #0]
 80038ee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038f0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038f4:	688d      	ldr	r5, [r1, #8]
 80038f6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038f8:	4d20      	ldr	r5, [pc, #128]	; (800397c <TIM_OC1_SetConfig+0xa8>)
 80038fa:	42a8      	cmp	r0, r5
 80038fc:	d013      	beq.n	8003926 <TIM_OC1_SetConfig+0x52>
 80038fe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003902:	42a8      	cmp	r0, r5
 8003904:	d00f      	beq.n	8003926 <TIM_OC1_SetConfig+0x52>
 8003906:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800390a:	42a8      	cmp	r0, r5
 800390c:	d00b      	beq.n	8003926 <TIM_OC1_SetConfig+0x52>
 800390e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003912:	42a8      	cmp	r0, r5
 8003914:	d007      	beq.n	8003926 <TIM_OC1_SetConfig+0x52>
 8003916:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800391a:	42a8      	cmp	r0, r5
 800391c:	d003      	beq.n	8003926 <TIM_OC1_SetConfig+0x52>
 800391e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003922:	42a8      	cmp	r0, r5
 8003924:	d105      	bne.n	8003932 <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003926:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800392a:	68cd      	ldr	r5, [r1, #12]
 800392c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800392e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003932:	4d12      	ldr	r5, [pc, #72]	; (800397c <TIM_OC1_SetConfig+0xa8>)
 8003934:	42a8      	cmp	r0, r5
 8003936:	d013      	beq.n	8003960 <TIM_OC1_SetConfig+0x8c>
 8003938:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800393c:	42a8      	cmp	r0, r5
 800393e:	d00f      	beq.n	8003960 <TIM_OC1_SetConfig+0x8c>
 8003940:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003944:	42a8      	cmp	r0, r5
 8003946:	d00b      	beq.n	8003960 <TIM_OC1_SetConfig+0x8c>
 8003948:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800394c:	42a8      	cmp	r0, r5
 800394e:	d007      	beq.n	8003960 <TIM_OC1_SetConfig+0x8c>
 8003950:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003954:	42a8      	cmp	r0, r5
 8003956:	d003      	beq.n	8003960 <TIM_OC1_SetConfig+0x8c>
 8003958:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800395c:	42a8      	cmp	r0, r5
 800395e:	d105      	bne.n	800396c <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003960:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003964:	694c      	ldr	r4, [r1, #20]
 8003966:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003968:	698d      	ldr	r5, [r1, #24]
 800396a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800396e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003970:	684a      	ldr	r2, [r1, #4]
 8003972:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003974:	6203      	str	r3, [r0, #32]
}
 8003976:	bc30      	pop	{r4, r5}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40012c00 	.word	0x40012c00

08003980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003982:	6a03      	ldr	r3, [r0, #32]
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003990:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003994:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003998:	680d      	ldr	r5, [r1, #0]
 800399a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800399c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039a0:	688d      	ldr	r5, [r1, #8]
 80039a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039a6:	4d1c      	ldr	r5, [pc, #112]	; (8003a18 <TIM_OC3_SetConfig+0x98>)
 80039a8:	42a8      	cmp	r0, r5
 80039aa:	d007      	beq.n	80039bc <TIM_OC3_SetConfig+0x3c>
 80039ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80039b0:	42a8      	cmp	r0, r5
 80039b2:	d003      	beq.n	80039bc <TIM_OC3_SetConfig+0x3c>
 80039b4:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80039b8:	42a8      	cmp	r0, r5
 80039ba:	d106      	bne.n	80039ca <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039c0:	68cd      	ldr	r5, [r1, #12]
 80039c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ca:	4d13      	ldr	r5, [pc, #76]	; (8003a18 <TIM_OC3_SetConfig+0x98>)
 80039cc:	42a8      	cmp	r0, r5
 80039ce:	d013      	beq.n	80039f8 <TIM_OC3_SetConfig+0x78>
 80039d0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80039d4:	42a8      	cmp	r0, r5
 80039d6:	d00f      	beq.n	80039f8 <TIM_OC3_SetConfig+0x78>
 80039d8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80039dc:	42a8      	cmp	r0, r5
 80039de:	d00b      	beq.n	80039f8 <TIM_OC3_SetConfig+0x78>
 80039e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80039e4:	42a8      	cmp	r0, r5
 80039e6:	d007      	beq.n	80039f8 <TIM_OC3_SetConfig+0x78>
 80039e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80039ec:	42a8      	cmp	r0, r5
 80039ee:	d003      	beq.n	80039f8 <TIM_OC3_SetConfig+0x78>
 80039f0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80039f4:	42a8      	cmp	r0, r5
 80039f6:	d107      	bne.n	8003a08 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039f8:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039fc:	694d      	ldr	r5, [r1, #20]
 80039fe:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a02:	698d      	ldr	r5, [r1, #24]
 8003a04:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a08:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a0a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a0c:	684a      	ldr	r2, [r1, #4]
 8003a0e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a10:	6203      	str	r3, [r0, #32]
}
 8003a12:	bc30      	pop	{r4, r5}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40012c00 	.word	0x40012c00

08003a1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a1e:	6a03      	ldr	r3, [r0, #32]
 8003a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a2a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a2c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003a30:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a34:	680d      	ldr	r5, [r1, #0]
 8003a36:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a3e:	688d      	ldr	r5, [r1, #8]
 8003a40:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a44:	4d11      	ldr	r5, [pc, #68]	; (8003a8c <TIM_OC4_SetConfig+0x70>)
 8003a46:	42a8      	cmp	r0, r5
 8003a48:	d013      	beq.n	8003a72 <TIM_OC4_SetConfig+0x56>
 8003a4a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003a4e:	42a8      	cmp	r0, r5
 8003a50:	d00f      	beq.n	8003a72 <TIM_OC4_SetConfig+0x56>
 8003a52:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003a56:	42a8      	cmp	r0, r5
 8003a58:	d00b      	beq.n	8003a72 <TIM_OC4_SetConfig+0x56>
 8003a5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a5e:	42a8      	cmp	r0, r5
 8003a60:	d007      	beq.n	8003a72 <TIM_OC4_SetConfig+0x56>
 8003a62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a66:	42a8      	cmp	r0, r5
 8003a68:	d003      	beq.n	8003a72 <TIM_OC4_SetConfig+0x56>
 8003a6a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003a6e:	42a8      	cmp	r0, r5
 8003a70:	d104      	bne.n	8003a7c <TIM_OC4_SetConfig+0x60>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a72:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a76:	694d      	ldr	r5, [r1, #20]
 8003a78:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a80:	684a      	ldr	r2, [r1, #4]
 8003a82:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a84:	6203      	str	r3, [r0, #32]
}
 8003a86:	bc30      	pop	{r4, r5}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40012c00 	.word	0x40012c00

08003a90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a92:	6a03      	ldr	r3, [r0, #32]
 8003a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a98:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a9e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003aa0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003aa4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa8:	680d      	ldr	r5, [r1, #0]
 8003aaa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003aac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ab0:	688d      	ldr	r5, [r1, #8]
 8003ab2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab6:	4d11      	ldr	r5, [pc, #68]	; (8003afc <TIM_OC5_SetConfig+0x6c>)
 8003ab8:	42a8      	cmp	r0, r5
 8003aba:	d013      	beq.n	8003ae4 <TIM_OC5_SetConfig+0x54>
 8003abc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003ac0:	42a8      	cmp	r0, r5
 8003ac2:	d00f      	beq.n	8003ae4 <TIM_OC5_SetConfig+0x54>
 8003ac4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003ac8:	42a8      	cmp	r0, r5
 8003aca:	d00b      	beq.n	8003ae4 <TIM_OC5_SetConfig+0x54>
 8003acc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ad0:	42a8      	cmp	r0, r5
 8003ad2:	d007      	beq.n	8003ae4 <TIM_OC5_SetConfig+0x54>
 8003ad4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ad8:	42a8      	cmp	r0, r5
 8003ada:	d003      	beq.n	8003ae4 <TIM_OC5_SetConfig+0x54>
 8003adc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003ae0:	42a8      	cmp	r0, r5
 8003ae2:	d104      	bne.n	8003aee <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ae4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ae8:	694d      	ldr	r5, [r1, #20]
 8003aea:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aee:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003af0:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003af2:	684a      	ldr	r2, [r1, #4]
 8003af4:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af6:	6203      	str	r3, [r0, #32]
}
 8003af8:	bc30      	pop	{r4, r5}
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00

08003b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b00:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b02:	6a03      	ldr	r3, [r0, #32]
 8003b04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b0c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b0e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b10:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003b14:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b18:	680d      	ldr	r5, [r1, #0]
 8003b1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b22:	688d      	ldr	r5, [r1, #8]
 8003b24:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b28:	4d11      	ldr	r5, [pc, #68]	; (8003b70 <TIM_OC6_SetConfig+0x70>)
 8003b2a:	42a8      	cmp	r0, r5
 8003b2c:	d013      	beq.n	8003b56 <TIM_OC6_SetConfig+0x56>
 8003b2e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003b32:	42a8      	cmp	r0, r5
 8003b34:	d00f      	beq.n	8003b56 <TIM_OC6_SetConfig+0x56>
 8003b36:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003b3a:	42a8      	cmp	r0, r5
 8003b3c:	d00b      	beq.n	8003b56 <TIM_OC6_SetConfig+0x56>
 8003b3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b42:	42a8      	cmp	r0, r5
 8003b44:	d007      	beq.n	8003b56 <TIM_OC6_SetConfig+0x56>
 8003b46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b4a:	42a8      	cmp	r0, r5
 8003b4c:	d003      	beq.n	8003b56 <TIM_OC6_SetConfig+0x56>
 8003b4e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003b52:	42a8      	cmp	r0, r5
 8003b54:	d104      	bne.n	8003b60 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b56:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b5a:	694d      	ldr	r5, [r1, #20]
 8003b5c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b60:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b62:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b64:	684a      	ldr	r2, [r1, #4]
 8003b66:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b68:	6203      	str	r3, [r0, #32]
}
 8003b6a:	bc30      	pop	{r4, r5}
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40012c00 	.word	0x40012c00

08003b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b74:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b76:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b78:	6a04      	ldr	r4, [r0, #32]
 8003b7a:	f024 0401 	bic.w	r4, r4, #1
 8003b7e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b80:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b82:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b86:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b8a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003b8e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b90:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b92:	6203      	str	r3, [r0, #32]
}
 8003b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b9a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9c:	6a03      	ldr	r3, [r0, #32]
 8003b9e:	f023 0310 	bic.w	r3, r3, #16
 8003ba2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba4:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003ba6:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba8:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bac:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bb4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bb8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003bba:	6203      	str	r3, [r0, #32]
}
 8003bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003bc4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc6:	4a32      	ldr	r2, [pc, #200]	; (8003c90 <TIM_Base_SetConfig+0xcc>)
 8003bc8:	4290      	cmp	r0, r2
 8003bca:	d012      	beq.n	8003bf2 <TIM_Base_SetConfig+0x2e>
 8003bcc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003bd0:	d00f      	beq.n	8003bf2 <TIM_Base_SetConfig+0x2e>
 8003bd2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003bd6:	4290      	cmp	r0, r2
 8003bd8:	d00b      	beq.n	8003bf2 <TIM_Base_SetConfig+0x2e>
 8003bda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bde:	4290      	cmp	r0, r2
 8003be0:	d007      	beq.n	8003bf2 <TIM_Base_SetConfig+0x2e>
 8003be2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003be6:	4290      	cmp	r0, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_Base_SetConfig+0x2e>
 8003bea:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8003bee:	4290      	cmp	r0, r2
 8003bf0:	d103      	bne.n	8003bfa <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bf6:	684a      	ldr	r2, [r1, #4]
 8003bf8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfa:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <TIM_Base_SetConfig+0xcc>)
 8003bfc:	4290      	cmp	r0, r2
 8003bfe:	d01e      	beq.n	8003c3e <TIM_Base_SetConfig+0x7a>
 8003c00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c04:	d01b      	beq.n	8003c3e <TIM_Base_SetConfig+0x7a>
 8003c06:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003c0a:	4290      	cmp	r0, r2
 8003c0c:	d017      	beq.n	8003c3e <TIM_Base_SetConfig+0x7a>
 8003c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c12:	4290      	cmp	r0, r2
 8003c14:	d013      	beq.n	8003c3e <TIM_Base_SetConfig+0x7a>
 8003c16:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003c1a:	4290      	cmp	r0, r2
 8003c1c:	d00f      	beq.n	8003c3e <TIM_Base_SetConfig+0x7a>
 8003c1e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003c22:	4290      	cmp	r0, r2
 8003c24:	d00b      	beq.n	8003c3e <TIM_Base_SetConfig+0x7a>
 8003c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c2a:	4290      	cmp	r0, r2
 8003c2c:	d007      	beq.n	8003c3e <TIM_Base_SetConfig+0x7a>
 8003c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c32:	4290      	cmp	r0, r2
 8003c34:	d003      	beq.n	8003c3e <TIM_Base_SetConfig+0x7a>
 8003c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3a:	4290      	cmp	r0, r2
 8003c3c:	d103      	bne.n	8003c46 <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c42:	68ca      	ldr	r2, [r1, #12]
 8003c44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c4a:	694a      	ldr	r2, [r1, #20]
 8003c4c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003c4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c50:	688b      	ldr	r3, [r1, #8]
 8003c52:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c54:	680b      	ldr	r3, [r1, #0]
 8003c56:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c58:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <TIM_Base_SetConfig+0xcc>)
 8003c5a:	4298      	cmp	r0, r3
 8003c5c:	d013      	beq.n	8003c86 <TIM_Base_SetConfig+0xc2>
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	4298      	cmp	r0, r3
 8003c64:	d00f      	beq.n	8003c86 <TIM_Base_SetConfig+0xc2>
 8003c66:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003c6a:	4298      	cmp	r0, r3
 8003c6c:	d00b      	beq.n	8003c86 <TIM_Base_SetConfig+0xc2>
 8003c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c72:	4298      	cmp	r0, r3
 8003c74:	d007      	beq.n	8003c86 <TIM_Base_SetConfig+0xc2>
 8003c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c7a:	4298      	cmp	r0, r3
 8003c7c:	d003      	beq.n	8003c86 <TIM_Base_SetConfig+0xc2>
 8003c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c82:	4298      	cmp	r0, r3
 8003c84:	d101      	bne.n	8003c8a <TIM_Base_SetConfig+0xc6>
    TIMx->RCR = Structure->RepetitionCounter;
 8003c86:	690b      	ldr	r3, [r1, #16]
 8003c88:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	6143      	str	r3, [r0, #20]
}
 8003c8e:	4770      	bx	lr
 8003c90:	40012c00 	.word	0x40012c00

08003c94 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003c94:	b1a8      	cbz	r0, 8003cc2 <HAL_TIM_Base_Init+0x2e>
{
 8003c96:	b510      	push	{r4, lr}
 8003c98:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c9e:	b15b      	cbz	r3, 8003cb8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca6:	1d21      	adds	r1, r4, #4
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	f7ff ff8b 	bl	8003bc4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003cb4:	2000      	movs	r0, #0
}
 8003cb6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003cb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003cbc:	f7fd fd10 	bl	80016e0 <HAL_TIM_Base_MspInit>
 8003cc0:	e7ee      	b.n	8003ca0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003cc2:	2001      	movs	r0, #1
}
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003cc6:	b1a8      	cbz	r0, 8003cf4 <HAL_TIM_PWM_Init+0x2e>
{
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003ccc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cd0:	b15b      	cbz	r3, 8003cea <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd8:	1d21      	adds	r1, r4, #4
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	f7ff ff72 	bl	8003bc4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003ce6:	2000      	movs	r0, #0
}
 8003ce8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003cea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003cee:	f7fd fcb1 	bl	8001654 <HAL_TIM_PWM_MspInit>
 8003cf2:	e7ee      	b.n	8003cd2 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003cf4:	2001      	movs	r0, #1
}
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d049      	beq.n	8003d90 <HAL_TIM_Encoder_Init+0x98>
{
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	4605      	mov	r5, r0
 8003d00:	460c      	mov	r4, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d03d      	beq.n	8003d86 <HAL_TIM_Encoder_Init+0x8e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d10:	4629      	mov	r1, r5
 8003d12:	f851 2b04 	ldr.w	r2, [r1], #4
 8003d16:	6893      	ldr	r3, [r2, #8]
 8003d18:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003d1c:	f023 0307 	bic.w	r3, r3, #7
 8003d20:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d22:	6828      	ldr	r0, [r5, #0]
 8003d24:	f7ff ff4e 	bl	8003bc4 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003d28:	6829      	ldr	r1, [r5, #0]
 8003d2a:	688a      	ldr	r2, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003d2c:	698e      	ldr	r6, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8003d2e:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003d30:	6820      	ldr	r0, [r4, #0]
 8003d32:	4310      	orrs	r0, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d34:	f426 7640 	bic.w	r6, r6, #768	; 0x300
 8003d38:	f026 0603 	bic.w	r6, r6, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d3c:	68a2      	ldr	r2, [r4, #8]
 8003d3e:	69a3      	ldr	r3, [r4, #24]
 8003d40:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003d44:	4333      	orrs	r3, r6
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d46:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8003d4a:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d4e:	68e6      	ldr	r6, [r4, #12]
 8003d50:	69e2      	ldr	r2, [r4, #28]
 8003d52:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8003d56:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d58:	6a22      	ldr	r2, [r4, #32]
 8003d5a:	0313      	lsls	r3, r2, #12
 8003d5c:	6922      	ldr	r2, [r4, #16]
 8003d5e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003d62:	4333      	orrs	r3, r6
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d64:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d68:	6862      	ldr	r2, [r4, #4]
 8003d6a:	6964      	ldr	r4, [r4, #20]
 8003d6c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8003d70:	433a      	orrs	r2, r7
  htim->Instance->SMCR = tmpsmcr;
 8003d72:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8003d74:	6829      	ldr	r1, [r5, #0]
 8003d76:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	621a      	str	r2, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8003d82:	2000      	movs	r0, #0
}
 8003d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8003d8a:	f7fd fc79 	bl	8001680 <HAL_TIM_Encoder_MspInit>
 8003d8e:	e7bc      	b.n	8003d0a <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8003d90:	2001      	movs	r0, #1
}
 8003d92:	4770      	bx	lr

08003d94 <TIM_OC2_SetConfig>:
{
 8003d94:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d96:	6a03      	ldr	r3, [r0, #32]
 8003d98:	f023 0310 	bic.w	r3, r3, #16
 8003d9c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003d9e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003da0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003da2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003da4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003da8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dac:	680d      	ldr	r5, [r1, #0]
 8003dae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003db2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db6:	688d      	ldr	r5, [r1, #8]
 8003db8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dbc:	4d1b      	ldr	r5, [pc, #108]	; (8003e2c <TIM_OC2_SetConfig+0x98>)
 8003dbe:	42a8      	cmp	r0, r5
 8003dc0:	d007      	beq.n	8003dd2 <TIM_OC2_SetConfig+0x3e>
 8003dc2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003dc6:	42a8      	cmp	r0, r5
 8003dc8:	d003      	beq.n	8003dd2 <TIM_OC2_SetConfig+0x3e>
 8003dca:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8003dce:	42a8      	cmp	r0, r5
 8003dd0:	d106      	bne.n	8003de0 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd6:	68cd      	ldr	r5, [r1, #12]
 8003dd8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de0:	4d12      	ldr	r5, [pc, #72]	; (8003e2c <TIM_OC2_SetConfig+0x98>)
 8003de2:	42a8      	cmp	r0, r5
 8003de4:	d013      	beq.n	8003e0e <TIM_OC2_SetConfig+0x7a>
 8003de6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003dea:	42a8      	cmp	r0, r5
 8003dec:	d00f      	beq.n	8003e0e <TIM_OC2_SetConfig+0x7a>
 8003dee:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003df2:	42a8      	cmp	r0, r5
 8003df4:	d00b      	beq.n	8003e0e <TIM_OC2_SetConfig+0x7a>
 8003df6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003dfa:	42a8      	cmp	r0, r5
 8003dfc:	d007      	beq.n	8003e0e <TIM_OC2_SetConfig+0x7a>
 8003dfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e02:	42a8      	cmp	r0, r5
 8003e04:	d003      	beq.n	8003e0e <TIM_OC2_SetConfig+0x7a>
 8003e06:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003e0a:	42a8      	cmp	r0, r5
 8003e0c:	d107      	bne.n	8003e1e <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e0e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e12:	694d      	ldr	r5, [r1, #20]
 8003e14:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e18:	698d      	ldr	r5, [r1, #24]
 8003e1a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003e1e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e20:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003e22:	684a      	ldr	r2, [r1, #4]
 8003e24:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003e26:	6203      	str	r3, [r0, #32]
}
 8003e28:	bc30      	pop	{r4, r5}
 8003e2a:	4770      	bx	lr
 8003e2c:	40012c00 	.word	0x40012c00

08003e30 <HAL_TIM_PWM_ConfigChannel>:
{
 8003e30:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003e32:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	f000 8092 	beq.w	8003f60 <HAL_TIM_PWM_ConfigChannel+0x130>
 8003e3c:	460d      	mov	r5, r1
 8003e3e:	4604      	mov	r4, r0
 8003e40:	2301      	movs	r3, #1
 8003e42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003e46:	2302      	movs	r3, #2
 8003e48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003e4c:	2a14      	cmp	r2, #20
 8003e4e:	d81e      	bhi.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x5e>
 8003e50:	e8df f002 	tbb	[pc, r2]
 8003e54:	1d1d1d0b 	.word	0x1d1d1d0b
 8003e58:	1d1d1d24 	.word	0x1d1d1d24
 8003e5c:	1d1d1d38 	.word	0x1d1d1d38
 8003e60:	1d1d1d4b 	.word	0x1d1d1d4b
 8003e64:	1d1d1d5f 	.word	0x1d1d1d5f
 8003e68:	72          	.byte	0x72
 8003e69:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e6a:	6800      	ldr	r0, [r0, #0]
 8003e6c:	f7ff fd32 	bl	80038d4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e70:	6822      	ldr	r2, [r4, #0]
 8003e72:	6993      	ldr	r3, [r2, #24]
 8003e74:	f043 0308 	orr.w	r3, r3, #8
 8003e78:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e7a:	6822      	ldr	r2, [r4, #0]
 8003e7c:	6993      	ldr	r3, [r2, #24]
 8003e7e:	f023 0304 	bic.w	r3, r3, #4
 8003e82:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e84:	6822      	ldr	r2, [r4, #0]
 8003e86:	6993      	ldr	r3, [r2, #24]
 8003e88:	6929      	ldr	r1, [r5, #16]
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e94:	2000      	movs	r0, #0
 8003e96:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e9c:	6800      	ldr	r0, [r0, #0]
 8003e9e:	f7ff ff79 	bl	8003d94 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ea2:	6822      	ldr	r2, [r4, #0]
 8003ea4:	6993      	ldr	r3, [r2, #24]
 8003ea6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003eaa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eac:	6822      	ldr	r2, [r4, #0]
 8003eae:	6993      	ldr	r3, [r2, #24]
 8003eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eb4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	6993      	ldr	r3, [r2, #24]
 8003eba:	6929      	ldr	r1, [r5, #16]
 8003ebc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ec0:	6193      	str	r3, [r2, #24]
      break;
 8003ec2:	e7e4      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ec4:	6800      	ldr	r0, [r0, #0]
 8003ec6:	f7ff fd5b 	bl	8003980 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	69d3      	ldr	r3, [r2, #28]
 8003ece:	f043 0308 	orr.w	r3, r3, #8
 8003ed2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	69d3      	ldr	r3, [r2, #28]
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	69d3      	ldr	r3, [r2, #28]
 8003ee2:	6929      	ldr	r1, [r5, #16]
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	61d3      	str	r3, [r2, #28]
      break;
 8003ee8:	e7d1      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eea:	6800      	ldr	r0, [r0, #0]
 8003eec:	f7ff fd96 	bl	8003a1c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ef0:	6822      	ldr	r2, [r4, #0]
 8003ef2:	69d3      	ldr	r3, [r2, #28]
 8003ef4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ef8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003efa:	6822      	ldr	r2, [r4, #0]
 8003efc:	69d3      	ldr	r3, [r2, #28]
 8003efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f02:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f04:	6822      	ldr	r2, [r4, #0]
 8003f06:	69d3      	ldr	r3, [r2, #28]
 8003f08:	6929      	ldr	r1, [r5, #16]
 8003f0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f0e:	61d3      	str	r3, [r2, #28]
      break;
 8003f10:	e7bd      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f12:	6800      	ldr	r0, [r0, #0]
 8003f14:	f7ff fdbc 	bl	8003a90 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f18:	6822      	ldr	r2, [r4, #0]
 8003f1a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f1c:	f043 0308 	orr.w	r3, r3, #8
 8003f20:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f26:	f023 0304 	bic.w	r3, r3, #4
 8003f2a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f2c:	6822      	ldr	r2, [r4, #0]
 8003f2e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f30:	6929      	ldr	r1, [r5, #16]
 8003f32:	430b      	orrs	r3, r1
 8003f34:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8003f36:	e7aa      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f38:	6800      	ldr	r0, [r0, #0]
 8003f3a:	f7ff fde1 	bl	8003b00 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f46:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f50:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f52:	6822      	ldr	r2, [r4, #0]
 8003f54:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f56:	6929      	ldr	r1, [r5, #16]
 8003f58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f5c:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8003f5e:	e796      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8003f60:	2002      	movs	r0, #2
 8003f62:	e79a      	b.n	8003e9a <HAL_TIM_PWM_ConfigChannel+0x6a>

08003f64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f64:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f66:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f68:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f6c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003f70:	430b      	orrs	r3, r1
 8003f72:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f74:	6083      	str	r3, [r0, #8]
}
 8003f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <TIM_SlaveTimer_SetConfig>:
{
 8003f7c:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8003f7e:	6804      	ldr	r4, [r0, #0]
 8003f80:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f86:	684b      	ldr	r3, [r1, #4]
 8003f88:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8e:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f92:	680a      	ldr	r2, [r1, #0]
 8003f94:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003f96:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8003f98:	684b      	ldr	r3, [r1, #4]
 8003f9a:	2b50      	cmp	r3, #80	; 0x50
 8003f9c:	d023      	beq.n	8003fe6 <TIM_SlaveTimer_SetConfig+0x6a>
 8003f9e:	d90b      	bls.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x3c>
 8003fa0:	2b60      	cmp	r3, #96	; 0x60
 8003fa2:	d027      	beq.n	8003ff4 <TIM_SlaveTimer_SetConfig+0x78>
 8003fa4:	2b70      	cmp	r3, #112	; 0x70
 8003fa6:	d12c      	bne.n	8004002 <TIM_SlaveTimer_SetConfig+0x86>
      TIM_ETR_SetConfig(htim->Instance,
 8003fa8:	690b      	ldr	r3, [r1, #16]
 8003faa:	688a      	ldr	r2, [r1, #8]
 8003fac:	68c9      	ldr	r1, [r1, #12]
 8003fae:	6800      	ldr	r0, [r0, #0]
 8003fb0:	f7ff ffd8 	bl	8003f64 <TIM_ETR_SetConfig>
  return HAL_OK;
 8003fb4:	2000      	movs	r0, #0
}
 8003fb6:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d122      	bne.n	8004002 <TIM_SlaveTimer_SetConfig+0x86>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003fbc:	680b      	ldr	r3, [r1, #0]
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d021      	beq.n	8004006 <TIM_SlaveTimer_SetConfig+0x8a>
      tmpccer = htim->Instance->CCER;
 8003fc2:	6803      	ldr	r3, [r0, #0]
 8003fc4:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003fce:	6802      	ldr	r2, [r0, #0]
 8003fd0:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003fd6:	6909      	ldr	r1, [r1, #16]
 8003fd8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003fdc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8003fde:	6803      	ldr	r3, [r0, #0]
 8003fe0:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 8003fe2:	2000      	movs	r0, #0
      break;
 8003fe4:	e7e7      	b.n	8003fb6 <TIM_SlaveTimer_SetConfig+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe6:	690a      	ldr	r2, [r1, #16]
 8003fe8:	6889      	ldr	r1, [r1, #8]
 8003fea:	6800      	ldr	r0, [r0, #0]
 8003fec:	f7ff fdc2 	bl	8003b74 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 8003ff0:	2000      	movs	r0, #0
      break;
 8003ff2:	e7e0      	b.n	8003fb6 <TIM_SlaveTimer_SetConfig+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff4:	690a      	ldr	r2, [r1, #16]
 8003ff6:	6889      	ldr	r1, [r1, #8]
 8003ff8:	6800      	ldr	r0, [r0, #0]
 8003ffa:	f7ff fdce 	bl	8003b9a <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 8003ffe:	2000      	movs	r0, #0
      break;
 8004000:	e7d9      	b.n	8003fb6 <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 8004002:	2000      	movs	r0, #0
 8004004:	e7d7      	b.n	8003fb6 <TIM_SlaveTimer_SetConfig+0x3a>
        return HAL_ERROR;
 8004006:	2001      	movs	r0, #1
 8004008:	e7d5      	b.n	8003fb6 <TIM_SlaveTimer_SetConfig+0x3a>

0800400a <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800400a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d024      	beq.n	800405c <HAL_TIM_SlaveConfigSynchro+0x52>
{
 8004012:	b510      	push	{r4, lr}
 8004014:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004016:	2301      	movs	r3, #1
 8004018:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	2302      	movs	r3, #2
 800401e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004022:	f7ff ffab 	bl	8003f7c <TIM_SlaveTimer_SetConfig>
 8004026:	4603      	mov	r3, r0
 8004028:	b988      	cbnz	r0, 800404e <HAL_TIM_SlaveConfigSynchro+0x44>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800402a:	6821      	ldr	r1, [r4, #0]
 800402c:	68ca      	ldr	r2, [r1, #12]
 800402e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004032:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004034:	6821      	ldr	r1, [r4, #0]
 8004036:	68ca      	ldr	r2, [r1, #12]
 8004038:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800403c:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 800403e:	2201      	movs	r2, #1
 8004040:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004044:	2200      	movs	r2, #0
 8004046:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800404a:	4618      	mov	r0, r3
 800404c:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800404e:	2301      	movs	r3, #1
 8004050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004054:	2200      	movs	r2, #0
 8004056:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800405a:	e7f6      	b.n	800404a <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 800405c:	2302      	movs	r3, #2
}
 800405e:	4618      	mov	r0, r3
 8004060:	4770      	bx	lr

08004062 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004062:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004064:	f001 011f 	and.w	r1, r1, #31
 8004068:	2301      	movs	r3, #1
 800406a:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800406e:	6a03      	ldr	r3, [r0, #32]
 8004070:	ea23 0304 	bic.w	r3, r3, r4
 8004074:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004076:	6a03      	ldr	r3, [r0, #32]
 8004078:	408a      	lsls	r2, r1
 800407a:	4313      	orrs	r3, r2
 800407c:	6203      	str	r3, [r0, #32]
}
 800407e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_TIM_PWM_Start>:
{
 8004084:	b510      	push	{r4, lr}
 8004086:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004088:	2201      	movs	r2, #1
 800408a:	6800      	ldr	r0, [r0, #0]
 800408c:	f7ff ffe9 	bl	8004062 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <HAL_TIM_PWM_Start+0x64>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <HAL_TIM_PWM_Start+0x3c>
 8004098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800409c:	4293      	cmp	r3, r2
 800409e:	d00f      	beq.n	80040c0 <HAL_TIM_PWM_Start+0x3c>
 80040a0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00b      	beq.n	80040c0 <HAL_TIM_PWM_Start+0x3c>
 80040a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d007      	beq.n	80040c0 <HAL_TIM_PWM_Start+0x3c>
 80040b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <HAL_TIM_PWM_Start+0x3c>
 80040b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040bc:	4293      	cmp	r3, r2
 80040be:	d103      	bne.n	80040c8 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 80040c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040c6:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	6891      	ldr	r1, [r2, #8]
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <HAL_TIM_PWM_Start+0x68>)
 80040ce:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d0:	2b06      	cmp	r3, #6
 80040d2:	d006      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x5e>
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x5e>
    __HAL_TIM_ENABLE(htim);
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6013      	str	r3, [r2, #0]
}
 80040e2:	2000      	movs	r0, #0
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	bf00      	nop
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	00010007 	.word	0x00010007

080040f0 <HAL_TIM_Encoder_Start>:
{
 80040f0:	b510      	push	{r4, lr}
 80040f2:	4604      	mov	r4, r0
  switch (Channel)
 80040f4:	b161      	cbz	r1, 8004110 <HAL_TIM_Encoder_Start+0x20>
 80040f6:	2904      	cmp	r1, #4
 80040f8:	d016      	beq.n	8004128 <HAL_TIM_Encoder_Start+0x38>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040fa:	2201      	movs	r2, #1
 80040fc:	2100      	movs	r1, #0
 80040fe:	6800      	ldr	r0, [r0, #0]
 8004100:	f7ff ffaf 	bl	8004062 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004104:	2201      	movs	r2, #1
 8004106:	2104      	movs	r1, #4
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	f7ff ffaa 	bl	8004062 <TIM_CCxChannelCmd>
      break;
 800410e:	e004      	b.n	800411a <HAL_TIM_Encoder_Start+0x2a>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004110:	2201      	movs	r2, #1
 8004112:	2100      	movs	r1, #0
 8004114:	6800      	ldr	r0, [r0, #0]
 8004116:	f7ff ffa4 	bl	8004062 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	6813      	ldr	r3, [r2, #0]
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	2000      	movs	r0, #0
 8004126:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004128:	2201      	movs	r2, #1
 800412a:	2104      	movs	r1, #4
 800412c:	6800      	ldr	r0, [r0, #0]
 800412e:	f7ff ff98 	bl	8004062 <TIM_CCxChannelCmd>
      break;
 8004132:	e7f2      	b.n	800411a <HAL_TIM_Encoder_Start+0x2a>

08004134 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004134:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004136:	f001 011f 	and.w	r1, r1, #31
 800413a:	2304      	movs	r3, #4
 800413c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004140:	6a03      	ldr	r3, [r0, #32]
 8004142:	ea23 0304 	bic.w	r3, r3, r4
 8004146:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004148:	6a03      	ldr	r3, [r0, #32]
 800414a:	408a      	lsls	r2, r1
 800414c:	4313      	orrs	r3, r2
 800414e:	6203      	str	r3, [r0, #32]
}
 8004150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <HAL_TIMEx_PWMN_Start>:
{
 8004158:	b510      	push	{r4, lr}
 800415a:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800415c:	2204      	movs	r2, #4
 800415e:	6800      	ldr	r0, [r0, #0]
 8004160:	f7ff ffe8 	bl	8004134 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8004164:	6822      	ldr	r2, [r4, #0]
 8004166:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800416c:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416e:	6822      	ldr	r2, [r4, #0]
 8004170:	6891      	ldr	r1, [r2, #8]
 8004172:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_TIMEx_PWMN_Start+0x34>)
 8004174:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	2b06      	cmp	r3, #6
 8004178:	d006      	beq.n	8004188 <HAL_TIMEx_PWMN_Start+0x30>
 800417a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417e:	d003      	beq.n	8004188 <HAL_TIMEx_PWMN_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 8004180:	6813      	ldr	r3, [r2, #0]
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	2000      	movs	r0, #0
 800418a:	bd10      	pop	{r4, pc}
 800418c:	00010007 	.word	0x00010007

08004190 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004190:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d046      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8004198:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800419a:	2301      	movs	r3, #1
 800419c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80041a6:	6802      	ldr	r2, [r0, #0]
 80041a8:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80041aa:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041ac:	4c1f      	ldr	r4, [pc, #124]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80041ae:	42a2      	cmp	r2, r4
 80041b0:	d007      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80041b2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80041b6:	42a2      	cmp	r2, r4
 80041b8:	d003      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80041ba:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80041be:	42a2      	cmp	r2, r4
 80041c0:	d103      	bne.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0x3a>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041c6:	684c      	ldr	r4, [r1, #4]
 80041c8:	4323      	orrs	r3, r4
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ce:	680c      	ldr	r4, [r1, #0]
 80041d0:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80041d2:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d4:	6803      	ldr	r3, [r0, #0]
 80041d6:	4a15      	ldr	r2, [pc, #84]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d016      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e0:	d013      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00f      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00b      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041f2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041fa:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80041fe:	4293      	cmp	r3, r2
 8004200:	d003      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004202:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004206:	4293      	cmp	r3, r2
 8004208:	d104      	bne.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0x84>
    tmpsmcr &= ~TIM_SMCR_MSM;
 800420a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800420e:	688a      	ldr	r2, [r1, #8]
 8004210:	4315      	orrs	r5, r2
    htim->Instance->SMCR = tmpsmcr;
 8004212:	609d      	str	r5, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004214:	2301      	movs	r3, #1
 8004216:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800421a:	2300      	movs	r3, #0
 800421c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004220:	4618      	mov	r0, r3
}
 8004222:	bc30      	pop	{r4, r5}
 8004224:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004226:	2002      	movs	r0, #2
}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40012c00 	.word	0x40012c00

08004230 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8004230:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d042      	beq.n	80042be <HAL_TIMEx_ConfigBreakDeadTime+0x8e>
{
 8004238:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800423a:	2301      	movs	r3, #1
 800423c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004240:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	688a      	ldr	r2, [r1, #8]
 8004248:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800424a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800424e:	684a      	ldr	r2, [r1, #4]
 8004250:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004252:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004256:	680a      	ldr	r2, [r1, #0]
 8004258:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800425a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800425e:	690a      	ldr	r2, [r1, #16]
 8004260:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004266:	694a      	ldr	r2, [r1, #20]
 8004268:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800426a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800426e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004270:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004272:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004276:	698a      	ldr	r2, [r1, #24]
 8004278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800427c:	6802      	ldr	r2, [r0, #0]
 800427e:	4c11      	ldr	r4, [pc, #68]	; (80042c4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8004280:	42a2      	cmp	r2, r4
 8004282:	d007      	beq.n	8004294 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8004284:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004288:	42a2      	cmp	r2, r4
 800428a:	d003      	beq.n	8004294 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800428c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8004290:	42a2      	cmp	r2, r4
 8004292:	d10c      	bne.n	80042ae <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004294:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004298:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800429a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800429e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042a2:	69cc      	ldr	r4, [r1, #28]
 80042a4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80042aa:	6a09      	ldr	r1, [r1, #32]
 80042ac:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80042ae:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80042b0:	2300      	movs	r3, #0
 80042b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80042b6:	4618      	mov	r0, r3
}
 80042b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042bc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80042be:	2002      	movs	r0, #2
}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40012c00 	.word	0x40012c00

080042c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c8:	b510      	push	{r4, lr}
 80042ca:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042cc:	6883      	ldr	r3, [r0, #8]
 80042ce:	6902      	ldr	r2, [r0, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	6942      	ldr	r2, [r0, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	69c2      	ldr	r2, [r0, #28]
 80042d8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042da:	6801      	ldr	r1, [r0, #0]
 80042dc:	6808      	ldr	r0, [r1, #0]
 80042de:	4aa1      	ldr	r2, [pc, #644]	; (8004564 <UART_SetConfig+0x29c>)
 80042e0:	4002      	ands	r2, r0
 80042e2:	4313      	orrs	r3, r2
 80042e4:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e6:	6822      	ldr	r2, [r4, #0]
 80042e8:	6853      	ldr	r3, [r2, #4]
 80042ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042ee:	68e1      	ldr	r1, [r4, #12]
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042f4:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80042f6:	6a23      	ldr	r3, [r4, #32]
 80042f8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042fa:	6821      	ldr	r1, [r4, #0]
 80042fc:	688b      	ldr	r3, [r1, #8]
 80042fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	4a97      	ldr	r2, [pc, #604]	; (8004568 <UART_SetConfig+0x2a0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01f      	beq.n	800434e <UART_SetConfig+0x86>
 800430e:	4a97      	ldr	r2, [pc, #604]	; (800456c <UART_SetConfig+0x2a4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d02e      	beq.n	8004372 <UART_SetConfig+0xaa>
 8004314:	4a96      	ldr	r2, [pc, #600]	; (8004570 <UART_SetConfig+0x2a8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d044      	beq.n	80043a4 <UART_SetConfig+0xdc>
 800431a:	4a96      	ldr	r2, [pc, #600]	; (8004574 <UART_SetConfig+0x2ac>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d05a      	beq.n	80043d6 <UART_SetConfig+0x10e>
 8004320:	4a95      	ldr	r2, [pc, #596]	; (8004578 <UART_SetConfig+0x2b0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d070      	beq.n	8004408 <UART_SetConfig+0x140>
 8004326:	2310      	movs	r3, #16

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004328:	69e2      	ldr	r2, [r4, #28]
 800432a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800432e:	f000 8086 	beq.w	800443e <UART_SetConfig+0x176>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8004332:	2b08      	cmp	r3, #8
 8004334:	f200 810f 	bhi.w	8004556 <UART_SetConfig+0x28e>
 8004338:	e8df f013 	tbh	[pc, r3, lsl #1]
 800433c:	00e500d0 	.word	0x00e500d0
 8004340:	010d00ef 	.word	0x010d00ef
 8004344:	010d00fa 	.word	0x010d00fa
 8004348:	010d010d 	.word	0x010d010d
 800434c:	0104      	.short	0x0104
  UART_GETCLOCKSOURCE(huart, clocksource);
 800434e:	4b8b      	ldr	r3, [pc, #556]	; (800457c <UART_SetConfig+0x2b4>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b03      	cmp	r3, #3
 8004358:	d809      	bhi.n	800436e <UART_SetConfig+0xa6>
 800435a:	e8df f003 	tbb	[pc, r3]
 800435e:	0402      	.short	0x0402
 8004360:	6e06      	.short	0x6e06
 8004362:	2301      	movs	r3, #1
 8004364:	e7e0      	b.n	8004328 <UART_SetConfig+0x60>
 8004366:	2304      	movs	r3, #4
 8004368:	e7de      	b.n	8004328 <UART_SetConfig+0x60>
 800436a:	2308      	movs	r3, #8
 800436c:	e7dc      	b.n	8004328 <UART_SetConfig+0x60>
 800436e:	2310      	movs	r3, #16
 8004370:	e7da      	b.n	8004328 <UART_SetConfig+0x60>
 8004372:	4b82      	ldr	r3, [pc, #520]	; (800457c <UART_SetConfig+0x2b4>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800437a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437e:	d00b      	beq.n	8004398 <UART_SetConfig+0xd0>
 8004380:	d907      	bls.n	8004392 <UART_SetConfig+0xca>
 8004382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004386:	d009      	beq.n	800439c <UART_SetConfig+0xd4>
 8004388:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800438c:	d108      	bne.n	80043a0 <UART_SetConfig+0xd8>
 800438e:	2302      	movs	r3, #2
 8004390:	e7ca      	b.n	8004328 <UART_SetConfig+0x60>
 8004392:	b92b      	cbnz	r3, 80043a0 <UART_SetConfig+0xd8>
 8004394:	2300      	movs	r3, #0
 8004396:	e7c7      	b.n	8004328 <UART_SetConfig+0x60>
 8004398:	2304      	movs	r3, #4
 800439a:	e7c5      	b.n	8004328 <UART_SetConfig+0x60>
 800439c:	2308      	movs	r3, #8
 800439e:	e7c3      	b.n	8004328 <UART_SetConfig+0x60>
 80043a0:	2310      	movs	r3, #16
 80043a2:	e7c1      	b.n	8004328 <UART_SetConfig+0x60>
 80043a4:	4b75      	ldr	r3, [pc, #468]	; (800457c <UART_SetConfig+0x2b4>)
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80043ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043b0:	d00b      	beq.n	80043ca <UART_SetConfig+0x102>
 80043b2:	d907      	bls.n	80043c4 <UART_SetConfig+0xfc>
 80043b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043b8:	d009      	beq.n	80043ce <UART_SetConfig+0x106>
 80043ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043be:	d108      	bne.n	80043d2 <UART_SetConfig+0x10a>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e7b1      	b.n	8004328 <UART_SetConfig+0x60>
 80043c4:	b92b      	cbnz	r3, 80043d2 <UART_SetConfig+0x10a>
 80043c6:	2300      	movs	r3, #0
 80043c8:	e7ae      	b.n	8004328 <UART_SetConfig+0x60>
 80043ca:	2304      	movs	r3, #4
 80043cc:	e7ac      	b.n	8004328 <UART_SetConfig+0x60>
 80043ce:	2308      	movs	r3, #8
 80043d0:	e7aa      	b.n	8004328 <UART_SetConfig+0x60>
 80043d2:	2310      	movs	r3, #16
 80043d4:	e7a8      	b.n	8004328 <UART_SetConfig+0x60>
 80043d6:	4b69      	ldr	r3, [pc, #420]	; (800457c <UART_SetConfig+0x2b4>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80043de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e2:	d00b      	beq.n	80043fc <UART_SetConfig+0x134>
 80043e4:	d907      	bls.n	80043f6 <UART_SetConfig+0x12e>
 80043e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ea:	d009      	beq.n	8004400 <UART_SetConfig+0x138>
 80043ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043f0:	d108      	bne.n	8004404 <UART_SetConfig+0x13c>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e798      	b.n	8004328 <UART_SetConfig+0x60>
 80043f6:	b92b      	cbnz	r3, 8004404 <UART_SetConfig+0x13c>
 80043f8:	2300      	movs	r3, #0
 80043fa:	e795      	b.n	8004328 <UART_SetConfig+0x60>
 80043fc:	2304      	movs	r3, #4
 80043fe:	e793      	b.n	8004328 <UART_SetConfig+0x60>
 8004400:	2308      	movs	r3, #8
 8004402:	e791      	b.n	8004328 <UART_SetConfig+0x60>
 8004404:	2310      	movs	r3, #16
 8004406:	e78f      	b.n	8004328 <UART_SetConfig+0x60>
 8004408:	4b5c      	ldr	r3, [pc, #368]	; (800457c <UART_SetConfig+0x2b4>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004414:	d00b      	beq.n	800442e <UART_SetConfig+0x166>
 8004416:	d907      	bls.n	8004428 <UART_SetConfig+0x160>
 8004418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800441c:	d009      	beq.n	8004432 <UART_SetConfig+0x16a>
 800441e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004422:	d108      	bne.n	8004436 <UART_SetConfig+0x16e>
 8004424:	2302      	movs	r3, #2
 8004426:	e77f      	b.n	8004328 <UART_SetConfig+0x60>
 8004428:	b92b      	cbnz	r3, 8004436 <UART_SetConfig+0x16e>
 800442a:	2300      	movs	r3, #0
 800442c:	e77c      	b.n	8004328 <UART_SetConfig+0x60>
 800442e:	2304      	movs	r3, #4
 8004430:	e77a      	b.n	8004328 <UART_SetConfig+0x60>
 8004432:	2308      	movs	r3, #8
 8004434:	e778      	b.n	8004328 <UART_SetConfig+0x60>
 8004436:	2310      	movs	r3, #16
 8004438:	e776      	b.n	8004328 <UART_SetConfig+0x60>
 800443a:	2302      	movs	r3, #2
 800443c:	e774      	b.n	8004328 <UART_SetConfig+0x60>
    switch (clocksource)
 800443e:	2b08      	cmp	r3, #8
 8004440:	d849      	bhi.n	80044d6 <UART_SetConfig+0x20e>
 8004442:	e8df f003 	tbb	[pc, r3]
 8004446:	1e05      	.short	0x1e05
 8004448:	48344829 	.word	0x48344829
 800444c:	4848      	.short	0x4848
 800444e:	3f          	.byte	0x3f
 800444f:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7ff f890 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004454:	6862      	ldr	r2, [r4, #4]
 8004456:	0853      	lsrs	r3, r2, #1
 8004458:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800445c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004460:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004462:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004464:	f1a3 0110 	sub.w	r1, r3, #16
 8004468:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800446c:	4291      	cmp	r1, r2
 800446e:	d875      	bhi.n	800455c <UART_SetConfig+0x294>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004470:	b29a      	uxth	r2, r3
 8004472:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004476:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800447a:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 800447c:	6822      	ldr	r2, [r4, #0]
 800447e:	60d3      	str	r3, [r2, #12]
 8004480:	e03d      	b.n	80044fe <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004482:	f7ff f88d 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004486:	6862      	ldr	r2, [r4, #4]
 8004488:	0853      	lsrs	r3, r2, #1
 800448a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800448e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004492:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004494:	2000      	movs	r0, #0
        break;
 8004496:	e7e5      	b.n	8004464 <UART_SetConfig+0x19c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004498:	6862      	ldr	r2, [r4, #4]
 800449a:	0853      	lsrs	r3, r2, #1
 800449c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80044a0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80044a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80044a8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80044aa:	2000      	movs	r0, #0
        break;
 80044ac:	e7da      	b.n	8004464 <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetSysClockFreq();
 80044ae:	f7fe ff51 	bl	8003354 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044b2:	6862      	ldr	r2, [r4, #4]
 80044b4:	0853      	lsrs	r3, r2, #1
 80044b6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80044ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80044be:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c0:	2000      	movs	r0, #0
        break;
 80044c2:	e7cf      	b.n	8004464 <UART_SetConfig+0x19c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80044c4:	6862      	ldr	r2, [r4, #4]
 80044c6:	0853      	lsrs	r3, r2, #1
 80044c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80044cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80044d0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80044d2:	2000      	movs	r0, #0
        break;
 80044d4:	e7c6      	b.n	8004464 <UART_SetConfig+0x19c>
        ret = HAL_ERROR;
 80044d6:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80044d8:	2300      	movs	r3, #0
 80044da:	e7c3      	b.n	8004464 <UART_SetConfig+0x19c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044dc:	f7ff f84a 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044e0:	6862      	ldr	r2, [r4, #4]
 80044e2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80044e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ea:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80044ec:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ee:	f1a3 0110 	sub.w	r1, r3, #16
 80044f2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80044f6:	4291      	cmp	r1, r2
 80044f8:	d832      	bhi.n	8004560 <UART_SetConfig+0x298>
    {
      huart->Instance->BRR = usartdiv;
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004502:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8004504:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004506:	f7ff f84b 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800450a:	6862      	ldr	r2, [r4, #4]
 800450c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004510:	fbb3 f3f2 	udiv	r3, r3, r2
 8004514:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004516:	2000      	movs	r0, #0
        break;
 8004518:	e7e9      	b.n	80044ee <UART_SetConfig+0x226>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800451a:	6862      	ldr	r2, [r4, #4]
 800451c:	0853      	lsrs	r3, r2, #1
 800451e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004522:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004526:	fbb3 f3f2 	udiv	r3, r3, r2
 800452a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800452c:	2000      	movs	r0, #0
        break;
 800452e:	e7de      	b.n	80044ee <UART_SetConfig+0x226>
        pclk = HAL_RCC_GetSysClockFreq();
 8004530:	f7fe ff10 	bl	8003354 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004534:	6862      	ldr	r2, [r4, #4]
 8004536:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800453a:	fbb3 f3f2 	udiv	r3, r3, r2
 800453e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004540:	2000      	movs	r0, #0
        break;
 8004542:	e7d4      	b.n	80044ee <UART_SetConfig+0x226>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004544:	6862      	ldr	r2, [r4, #4]
 8004546:	0853      	lsrs	r3, r2, #1
 8004548:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800454c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004550:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004552:	2000      	movs	r0, #0
        break;
 8004554:	e7cb      	b.n	80044ee <UART_SetConfig+0x226>
        ret = HAL_ERROR;
 8004556:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004558:	2300      	movs	r3, #0
 800455a:	e7c8      	b.n	80044ee <UART_SetConfig+0x226>
      ret = HAL_ERROR;
 800455c:	2001      	movs	r0, #1
 800455e:	e7ce      	b.n	80044fe <UART_SetConfig+0x236>
      ret = HAL_ERROR;
 8004560:	2001      	movs	r0, #1
 8004562:	e7cc      	b.n	80044fe <UART_SetConfig+0x236>
 8004564:	efff69f3 	.word	0xefff69f3
 8004568:	40013800 	.word	0x40013800
 800456c:	40004400 	.word	0x40004400
 8004570:	40004800 	.word	0x40004800
 8004574:	40004c00 	.word	0x40004c00
 8004578:	40005000 	.word	0x40005000
 800457c:	40021000 	.word	0x40021000

08004580 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004580:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004582:	f013 0f01 	tst.w	r3, #1
 8004586:	d006      	beq.n	8004596 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004588:	6802      	ldr	r2, [r0, #0]
 800458a:	6853      	ldr	r3, [r2, #4]
 800458c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004590:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004592:	430b      	orrs	r3, r1
 8004594:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004596:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004598:	f013 0f02 	tst.w	r3, #2
 800459c:	d006      	beq.n	80045ac <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800459e:	6802      	ldr	r2, [r0, #0]
 80045a0:	6853      	ldr	r3, [r2, #4]
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045ae:	f013 0f04 	tst.w	r3, #4
 80045b2:	d006      	beq.n	80045c2 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045b4:	6802      	ldr	r2, [r0, #0]
 80045b6:	6853      	ldr	r3, [r2, #4]
 80045b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80045be:	430b      	orrs	r3, r1
 80045c0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045c4:	f013 0f08 	tst.w	r3, #8
 80045c8:	d006      	beq.n	80045d8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ca:	6802      	ldr	r2, [r0, #0]
 80045cc:	6853      	ldr	r3, [r2, #4]
 80045ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045d2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045da:	f013 0f10 	tst.w	r3, #16
 80045de:	d006      	beq.n	80045ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045e0:	6802      	ldr	r2, [r0, #0]
 80045e2:	6893      	ldr	r3, [r2, #8]
 80045e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80045ea:	430b      	orrs	r3, r1
 80045ec:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045f0:	f013 0f20 	tst.w	r3, #32
 80045f4:	d006      	beq.n	8004604 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045f6:	6802      	ldr	r2, [r0, #0]
 80045f8:	6893      	ldr	r3, [r2, #8]
 80045fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045fe:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004600:	430b      	orrs	r3, r1
 8004602:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004604:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004606:	f013 0f40 	tst.w	r3, #64	; 0x40
 800460a:	d00a      	beq.n	8004622 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800460c:	6802      	ldr	r2, [r0, #0]
 800460e:	6853      	ldr	r3, [r2, #4]
 8004610:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004614:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004616:	430b      	orrs	r3, r1
 8004618:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800461a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800461c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004620:	d00b      	beq.n	800463a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004622:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004624:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004628:	d006      	beq.n	8004638 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800462a:	6802      	ldr	r2, [r0, #0]
 800462c:	6853      	ldr	r3, [r2, #4]
 800462e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004632:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004634:	430b      	orrs	r3, r1
 8004636:	6053      	str	r3, [r2, #4]
  }
}
 8004638:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800463a:	6802      	ldr	r2, [r0, #0]
 800463c:	6853      	ldr	r3, [r2, #4]
 800463e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004642:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004644:	430b      	orrs	r3, r1
 8004646:	6053      	str	r3, [r2, #4]
 8004648:	e7eb      	b.n	8004622 <UART_AdvFeatureConfig+0xa2>

0800464a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800464a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800464e:	4604      	mov	r4, r0
 8004650:	460f      	mov	r7, r1
 8004652:	4616      	mov	r6, r2
 8004654:	4698      	mov	r8, r3
 8004656:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	ea37 0303 	bics.w	r3, r7, r3
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	42b3      	cmp	r3, r6
 8004668:	d13a      	bne.n	80046e0 <UART_WaitOnFlagUntilTimeout+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800466e:	d0f3      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004670:	f7fd f988 	bl	8001984 <HAL_GetTick>
 8004674:	eba0 0008 	sub.w	r0, r0, r8
 8004678:	42a8      	cmp	r0, r5
 800467a:	d81f      	bhi.n	80046bc <UART_WaitOnFlagUntilTimeout+0x72>
 800467c:	b1f5      	cbz	r5, 80046bc <UART_WaitOnFlagUntilTimeout+0x72>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	f012 0f04 	tst.w	r2, #4
 8004686:	d0e7      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800468e:	d0e3      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004694:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004696:	6822      	ldr	r2, [r4, #0]
 8004698:	6813      	ldr	r3, [r2, #0]
 800469a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800469e:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a0:	6822      	ldr	r2, [r4, #0]
 80046a2:	6893      	ldr	r3, [r2, #8]
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 80046aa:	2320      	movs	r3, #32
 80046ac:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80046ae:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046b0:	67e3      	str	r3, [r4, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046b2:	2300      	movs	r3, #0
 80046b4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80046b8:	2003      	movs	r0, #3
 80046ba:	e012      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046bc:	6822      	ldr	r2, [r4, #0]
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046c4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	6893      	ldr	r3, [r2, #8]
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80046d0:	2320      	movs	r3, #32
 80046d2:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80046d4:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80046d6:	2300      	movs	r3, #0
 80046d8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 80046dc:	2003      	movs	r0, #3
 80046de:	e000      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x98>
        }
      }
    }
  }
  return HAL_OK;
 80046e0:	2000      	movs	r0, #0
}
 80046e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080046e6 <UART_CheckIdleState>:
{
 80046e6:	b530      	push	{r4, r5, lr}
 80046e8:	b083      	sub	sp, #12
 80046ea:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80046f0:	f7fd f948 	bl	8001984 <HAL_GetTick>
 80046f4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f013 0f08 	tst.w	r3, #8
 80046fe:	d10c      	bne.n	800471a <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f013 0f04 	tst.w	r3, #4
 8004708:	d115      	bne.n	8004736 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 800470a:	2320      	movs	r3, #32
 800470c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800470e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004710:	2000      	movs	r0, #0
 8004712:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8004716:	b003      	add	sp, #12
 8004718:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800471a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	4603      	mov	r3, r0
 8004722:	2200      	movs	r2, #0
 8004724:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004728:	4620      	mov	r0, r4
 800472a:	f7ff ff8e 	bl	800464a <UART_WaitOnFlagUntilTimeout>
 800472e:	2800      	cmp	r0, #0
 8004730:	d0e6      	beq.n	8004700 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004732:	2003      	movs	r0, #3
 8004734:	e7ef      	b.n	8004716 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004736:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	462b      	mov	r3, r5
 800473e:	2200      	movs	r2, #0
 8004740:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004744:	4620      	mov	r0, r4
 8004746:	f7ff ff80 	bl	800464a <UART_WaitOnFlagUntilTimeout>
 800474a:	2800      	cmp	r0, #0
 800474c:	d0dd      	beq.n	800470a <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 800474e:	2003      	movs	r0, #3
 8004750:	e7e1      	b.n	8004716 <UART_CheckIdleState+0x30>

08004752 <HAL_UART_Init>:
  if (huart == NULL)
 8004752:	b368      	cbz	r0, 80047b0 <HAL_UART_Init+0x5e>
{
 8004754:	b510      	push	{r4, lr}
 8004756:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004758:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800475a:	b303      	cbz	r3, 800479e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800475c:	2324      	movs	r3, #36	; 0x24
 800475e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004760:	6822      	ldr	r2, [r4, #0]
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800476a:	4620      	mov	r0, r4
 800476c:	f7ff fdac 	bl	80042c8 <UART_SetConfig>
 8004770:	2801      	cmp	r0, #1
 8004772:	d013      	beq.n	800479c <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004776:	b9bb      	cbnz	r3, 80047a8 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004778:	6822      	ldr	r2, [r4, #0]
 800477a:	6853      	ldr	r3, [r2, #4]
 800477c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004780:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	6893      	ldr	r3, [r2, #8]
 8004786:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800478a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800478c:	6822      	ldr	r2, [r4, #0]
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004796:	4620      	mov	r0, r4
 8004798:	f7ff ffa5 	bl	80046e6 <UART_CheckIdleState>
}
 800479c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800479e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80047a2:	f7fc fff1 	bl	8001788 <HAL_UART_MspInit>
 80047a6:	e7d9      	b.n	800475c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80047a8:	4620      	mov	r0, r4
 80047aa:	f7ff fee9 	bl	8004580 <UART_AdvFeatureConfig>
 80047ae:	e7e3      	b.n	8004778 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80047b0:	2001      	movs	r0, #1
}
 80047b2:	4770      	bx	lr

080047b4 <__libc_init_array>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	4e0d      	ldr	r6, [pc, #52]	; (80047ec <__libc_init_array+0x38>)
 80047b8:	4c0d      	ldr	r4, [pc, #52]	; (80047f0 <__libc_init_array+0x3c>)
 80047ba:	1ba4      	subs	r4, r4, r6
 80047bc:	10a4      	asrs	r4, r4, #2
 80047be:	2500      	movs	r5, #0
 80047c0:	42a5      	cmp	r5, r4
 80047c2:	d109      	bne.n	80047d8 <__libc_init_array+0x24>
 80047c4:	4e0b      	ldr	r6, [pc, #44]	; (80047f4 <__libc_init_array+0x40>)
 80047c6:	4c0c      	ldr	r4, [pc, #48]	; (80047f8 <__libc_init_array+0x44>)
 80047c8:	f000 f820 	bl	800480c <_init>
 80047cc:	1ba4      	subs	r4, r4, r6
 80047ce:	10a4      	asrs	r4, r4, #2
 80047d0:	2500      	movs	r5, #0
 80047d2:	42a5      	cmp	r5, r4
 80047d4:	d105      	bne.n	80047e2 <__libc_init_array+0x2e>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047dc:	4798      	blx	r3
 80047de:	3501      	adds	r5, #1
 80047e0:	e7ee      	b.n	80047c0 <__libc_init_array+0xc>
 80047e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047e6:	4798      	blx	r3
 80047e8:	3501      	adds	r5, #1
 80047ea:	e7f2      	b.n	80047d2 <__libc_init_array+0x1e>
 80047ec:	0800485c 	.word	0x0800485c
 80047f0:	0800485c 	.word	0x0800485c
 80047f4:	0800485c 	.word	0x0800485c
 80047f8:	08004860 	.word	0x08004860

080047fc <memset>:
 80047fc:	4402      	add	r2, r0
 80047fe:	4603      	mov	r3, r0
 8004800:	4293      	cmp	r3, r2
 8004802:	d100      	bne.n	8004806 <memset+0xa>
 8004804:	4770      	bx	lr
 8004806:	f803 1b01 	strb.w	r1, [r3], #1
 800480a:	e7f9      	b.n	8004800 <memset+0x4>

0800480c <_init>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr

08004818 <_fini>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr
